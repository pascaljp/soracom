"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SORACOM API
 * SORACOM API v1
 *
 * The version of the OpenAPI document: VERSION_PLACEHOLDER
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.RuleConfigPropertyTargetOtaStatusEnum = exports.RuleConfigPropertyInactiveTimeoutDateConstEnum = exports.RuleConfigTypeEnum = exports.RoutingFilterEntryActionEnum = exports.ResourceInstanceTypeEnum = exports.ResourceInstanceOperationsEnum = exports.ProductModelProductTypeEnum = exports.PacketCaptureSessionStatusEnum = exports.NapterAuditLogEntryTypeEnum = exports.MonthlyBillPaymentStatusEnum = exports.LoraGatewayStatusEnum = exports.LoraDeviceStatusEnum = exports.LogEntryServiceEnum = exports.LogEntryResourceTypeEnum = exports.LagoonUserPermissionUpdatingRequestRoleEnum = exports.LagoonUserCreationRequestRoleEnum = exports.LagoonUserRoleEnum = exports.LagoonRegistrationRequestPlanEnum = exports.LagoonPlanChangingRequestPlanEnum = exports.LagoonDashboardPermissionsResponsePermissionsPermissionNameEnum = exports.JunctionMirroringPeerProtocolEnum = exports.IpAddressMapEntryTypeEnum = exports.GetVolumeDiscountResponseVolumeDiscountTypeEnum = exports.GetVolumeDiscountResponseVolumeDiscountPaymentTypeEnum = exports.GetVolumeDiscountResponseStatusEnum = exports.GetPaymentTransactionResultStatusEnum = exports.GetPaymentTransactionResultMessageCodeEnum = exports.GetPaymentMethodResultProviderTypeEnum = exports.GetPaymentMethodResultErrorCodeEnum = exports.GetOrderResponseOrderStatusEnum = exports.GetExportedFileResponseStatusEnum = exports.GadgetStatusEnum = exports.ExportRequestPeriodEnum = exports.ExpiryTimeExpiryActionEnum = exports.ExecuteSoraletRequestEncodingTypeEnum = exports.ExecuteSoraletRequestDirectionEnum = exports.EventHandlerModelStatusEnum = exports.EstimatedVolumeDiscountModelCurrencyEnum = exports.EstimatedCouponModelCurrencyEnum = exports.DeviceObjectModelFormatEnum = exports.CredentialsModelTypeEnum = exports.CreateEventHandlerRequestStatusEnum = exports.CreateEstimatedVolumeDiscountRequestVolumeDiscountTypeEnum = exports.CreateEstimatedVolumeDiscountRequestVolumeDiscountPaymentTypeEnum = exports.CreateAndUpdateCredentialsModelTypeEnum = exports.AvailableLongTermDiscountModelVolumeDiscountTypeEnum = exports.AvailableLongTermDiscountModelVolumeDiscountPaymentTypeEnum = exports.ActionConfigPropertySpeedClassEnum = exports.ActionConfigPropertyHttpMethodEnum = exports.ActionConfigTypeEnum = void 0;
exports.FileEntryApiAxiosParamCreator = exports.EventHandlerApi = exports.EventHandlerApiFactory = exports.EventHandlerApiFp = exports.EventHandlerApiAxiosParamCreator = exports.EmailApi = exports.EmailApiFactory = exports.EmailApiFp = exports.EmailApiAxiosParamCreator = exports.DeviceObjectModelApi = exports.DeviceObjectModelApiFactory = exports.DeviceObjectModelApiFp = exports.DeviceObjectModelApiAxiosParamCreator = exports.DeviceApi = exports.DeviceApiFactory = exports.DeviceApiFp = exports.DeviceApiAxiosParamCreator = exports.DataEntryApi = exports.DataEntryApiFactory = exports.DataEntryApiFp = exports.DataEntryApiAxiosParamCreator = exports.CredentialApi = exports.CredentialApiFactory = exports.CredentialApiFp = exports.CredentialApiAxiosParamCreator = exports.CellLocationApi = exports.CellLocationApiFactory = exports.CellLocationApiFp = exports.CellLocationApiAxiosParamCreator = exports.BillingApi = exports.BillingApiFactory = exports.BillingApiFp = exports.BillingApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.AuditLogApi = exports.AuditLogApiFactory = exports.AuditLogApiFp = exports.AuditLogApiAxiosParamCreator = exports.VolumeDiscountModelVolumeDiscountTypeEnum = exports.VolumeDiscountModelVolumeDiscountPaymentTypeEnum = exports.UpdateSpeedClassRequestSpeedClassEnum = exports.SubscriberExpiryActionEnum = exports.SimTypeEnum = exports.SigfoxDeviceStatusEnum = exports.ShippingCostModelShippingAreaEnum = exports.RuleConfigPropertyTargetStatusEnum = exports.RuleConfigPropertyTargetSpeedClassEnum = void 0;
exports.PortMappingApiFactory = exports.PortMappingApiFp = exports.PortMappingApiAxiosParamCreator = exports.PaymentApi = exports.PaymentApiFactory = exports.PaymentApiFp = exports.PaymentApiAxiosParamCreator = exports.OrderApi = exports.OrderApiFactory = exports.OrderApiFp = exports.OrderApiAxiosParamCreator = exports.OperatorApi = exports.OperatorApiFactory = exports.OperatorApiFp = exports.OperatorApiAxiosParamCreator = exports.LoraNetworkSetApi = exports.LoraNetworkSetApiFactory = exports.LoraNetworkSetApiFp = exports.LoraNetworkSetApiAxiosParamCreator = exports.LoraGatewayApi = exports.LoraGatewayApiFactory = exports.LoraGatewayApiFp = exports.LoraGatewayApiAxiosParamCreator = exports.LoraDeviceApi = exports.LoraDeviceApiFactory = exports.LoraDeviceApiFp = exports.LoraDeviceApiAxiosParamCreator = exports.LogApi = exports.LogApiFactory = exports.LogApiFp = exports.LogApiAxiosParamCreator = exports.LagoonApi = exports.LagoonApiFactory = exports.LagoonApiFp = exports.LagoonApiAxiosParamCreator = exports.GroupApi = exports.GroupApiFactory = exports.GroupApiFp = exports.GroupApiAxiosParamCreator = exports.GadgetApi = exports.GadgetApiFactory = exports.GadgetApiFp = exports.GadgetApiAxiosParamCreator = exports.FilesApi = exports.FilesApiFactory = exports.FilesApiFp = exports.FilesApiAxiosParamCreator = exports.FileEntryApi = exports.FileEntryApiFactory = exports.FileEntryApiFp = void 0;
exports.VirtualPrivateGatewayApi = exports.VirtualPrivateGatewayApiFactory = exports.VirtualPrivateGatewayApiFp = exports.VirtualPrivateGatewayApiAxiosParamCreator = exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = exports.SystemNotificationApi = exports.SystemNotificationApiFactory = exports.SystemNotificationApiFp = exports.SystemNotificationApiAxiosParamCreator = exports.SubscriberApi = exports.SubscriberApiFactory = exports.SubscriberApiFp = exports.SubscriberApiAxiosParamCreator = exports.StatsApi = exports.StatsApiFactory = exports.StatsApiFp = exports.StatsApiAxiosParamCreator = exports.SoraletApi = exports.SoraletApiFactory = exports.SoraletApiFp = exports.SoraletApiAxiosParamCreator = exports.SimApi = exports.SimApiFactory = exports.SimApiFp = exports.SimApiAxiosParamCreator = exports.SigfoxDeviceApi = exports.SigfoxDeviceApiFactory = exports.SigfoxDeviceApiFp = exports.SigfoxDeviceApiAxiosParamCreator = exports.ShippingAddressApi = exports.ShippingAddressApiFactory = exports.ShippingAddressApiFp = exports.ShippingAddressApiAxiosParamCreator = exports.RoleApi = exports.RoleApiFactory = exports.RoleApiFp = exports.RoleApiAxiosParamCreator = exports.QueryApi = exports.QueryApiFactory = exports.QueryApiFp = exports.QueryApiAxiosParamCreator = exports.PortMappingApi = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var ActionConfigTypeEnum;
(function (ActionConfigTypeEnum) {
    ActionConfigTypeEnum["ChangeSpeedClassAction"] = "ChangeSpeedClassAction";
    ActionConfigTypeEnum["InvokeAwsLambdaAction"] = "InvokeAWSLambdaAction";
    ActionConfigTypeEnum["ExecuteWebRequestAction"] = "ExecuteWebRequestAction";
    ActionConfigTypeEnum["SendMailAction"] = "SendMailAction";
    ActionConfigTypeEnum["SendMailToOperatorAction"] = "SendMailToOperatorAction";
    ActionConfigTypeEnum["ActivationAction"] = "ActivationAction";
    ActionConfigTypeEnum["DeactivationAction"] = "DeactivationAction";
})(ActionConfigTypeEnum = exports.ActionConfigTypeEnum || (exports.ActionConfigTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ActionConfigPropertyHttpMethodEnum;
(function (ActionConfigPropertyHttpMethodEnum) {
    ActionConfigPropertyHttpMethodEnum["Get"] = "GET";
    ActionConfigPropertyHttpMethodEnum["Post"] = "POST";
    ActionConfigPropertyHttpMethodEnum["Put"] = "PUT";
    ActionConfigPropertyHttpMethodEnum["Delete"] = "DELETE";
})(ActionConfigPropertyHttpMethodEnum = exports.ActionConfigPropertyHttpMethodEnum || (exports.ActionConfigPropertyHttpMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ActionConfigPropertySpeedClassEnum;
(function (ActionConfigPropertySpeedClassEnum) {
    ActionConfigPropertySpeedClassEnum["Minimum"] = "s1.minimum";
    ActionConfigPropertySpeedClassEnum["Slow"] = "s1.slow";
    ActionConfigPropertySpeedClassEnum["Standard"] = "s1.standard";
    ActionConfigPropertySpeedClassEnum["Fast"] = "s1.fast";
})(ActionConfigPropertySpeedClassEnum = exports.ActionConfigPropertySpeedClassEnum || (exports.ActionConfigPropertySpeedClassEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AvailableLongTermDiscountModelVolumeDiscountPaymentTypeEnum;
(function (AvailableLongTermDiscountModelVolumeDiscountPaymentTypeEnum) {
    AvailableLongTermDiscountModelVolumeDiscountPaymentTypeEnum["Monthly"] = "MONTHLY";
    AvailableLongTermDiscountModelVolumeDiscountPaymentTypeEnum["Prepayment"] = "PREPAYMENT";
})(AvailableLongTermDiscountModelVolumeDiscountPaymentTypeEnum = exports.AvailableLongTermDiscountModelVolumeDiscountPaymentTypeEnum || (exports.AvailableLongTermDiscountModelVolumeDiscountPaymentTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AvailableLongTermDiscountModelVolumeDiscountTypeEnum;
(function (AvailableLongTermDiscountModelVolumeDiscountTypeEnum) {
    AvailableLongTermDiscountModelVolumeDiscountTypeEnum["BasicChargeV2"] = "SORACOM_AIR_BASIC_CHARGE_V2";
    AvailableLongTermDiscountModelVolumeDiscountTypeEnum["BasicCharge"] = "SORACOM_AIR_BASIC_CHARGE";
    AvailableLongTermDiscountModelVolumeDiscountTypeEnum["MonthlyFixedBasicCharge"] = "SORACOM_AIR_MONTHLY_FIXED_BASIC_CHARGE";
})(AvailableLongTermDiscountModelVolumeDiscountTypeEnum = exports.AvailableLongTermDiscountModelVolumeDiscountTypeEnum || (exports.AvailableLongTermDiscountModelVolumeDiscountTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateAndUpdateCredentialsModelTypeEnum;
(function (CreateAndUpdateCredentialsModelTypeEnum) {
    CreateAndUpdateCredentialsModelTypeEnum["AwsCredentials"] = "aws-credentials";
    CreateAndUpdateCredentialsModelTypeEnum["AzureCredentials"] = "azure-credentials";
    CreateAndUpdateCredentialsModelTypeEnum["Psk"] = "psk";
    CreateAndUpdateCredentialsModelTypeEnum["X509"] = "x509";
})(CreateAndUpdateCredentialsModelTypeEnum = exports.CreateAndUpdateCredentialsModelTypeEnum || (exports.CreateAndUpdateCredentialsModelTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateEstimatedVolumeDiscountRequestVolumeDiscountPaymentTypeEnum;
(function (CreateEstimatedVolumeDiscountRequestVolumeDiscountPaymentTypeEnum) {
    CreateEstimatedVolumeDiscountRequestVolumeDiscountPaymentTypeEnum["Monthly"] = "MONTHLY";
    CreateEstimatedVolumeDiscountRequestVolumeDiscountPaymentTypeEnum["Prepayment"] = "PREPAYMENT";
})(CreateEstimatedVolumeDiscountRequestVolumeDiscountPaymentTypeEnum = exports.CreateEstimatedVolumeDiscountRequestVolumeDiscountPaymentTypeEnum || (exports.CreateEstimatedVolumeDiscountRequestVolumeDiscountPaymentTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateEstimatedVolumeDiscountRequestVolumeDiscountTypeEnum;
(function (CreateEstimatedVolumeDiscountRequestVolumeDiscountTypeEnum) {
    CreateEstimatedVolumeDiscountRequestVolumeDiscountTypeEnum["BasicChargeV2"] = "SORACOM_AIR_BASIC_CHARGE_V2";
    CreateEstimatedVolumeDiscountRequestVolumeDiscountTypeEnum["BasicCharge"] = "SORACOM_AIR_BASIC_CHARGE";
    CreateEstimatedVolumeDiscountRequestVolumeDiscountTypeEnum["MonthlyFixedBasicCharge"] = "SORACOM_AIR_MONTHLY_FIXED_BASIC_CHARGE";
})(CreateEstimatedVolumeDiscountRequestVolumeDiscountTypeEnum = exports.CreateEstimatedVolumeDiscountRequestVolumeDiscountTypeEnum || (exports.CreateEstimatedVolumeDiscountRequestVolumeDiscountTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateEventHandlerRequestStatusEnum;
(function (CreateEventHandlerRequestStatusEnum) {
    CreateEventHandlerRequestStatusEnum["Inactive"] = "inactive";
    CreateEventHandlerRequestStatusEnum["Active"] = "active";
})(CreateEventHandlerRequestStatusEnum = exports.CreateEventHandlerRequestStatusEnum || (exports.CreateEventHandlerRequestStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CredentialsModelTypeEnum;
(function (CredentialsModelTypeEnum) {
    CredentialsModelTypeEnum["AwsCredentials"] = "aws-credentials";
    CredentialsModelTypeEnum["AzureCredentials"] = "azure-credentials";
    CredentialsModelTypeEnum["Psk"] = "psk";
    CredentialsModelTypeEnum["X509"] = "x509";
})(CredentialsModelTypeEnum = exports.CredentialsModelTypeEnum || (exports.CredentialsModelTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DeviceObjectModelFormatEnum;
(function (DeviceObjectModelFormatEnum) {
    DeviceObjectModelFormatEnum["Xml"] = "xml";
    DeviceObjectModelFormatEnum["Json"] = "json";
})(DeviceObjectModelFormatEnum = exports.DeviceObjectModelFormatEnum || (exports.DeviceObjectModelFormatEnum = {}));
/**
    * @export
    * @enum {string}
    */
var EstimatedCouponModelCurrencyEnum;
(function (EstimatedCouponModelCurrencyEnum) {
    EstimatedCouponModelCurrencyEnum["Jpy"] = "JPY";
    EstimatedCouponModelCurrencyEnum["Usd"] = "USD";
})(EstimatedCouponModelCurrencyEnum = exports.EstimatedCouponModelCurrencyEnum || (exports.EstimatedCouponModelCurrencyEnum = {}));
/**
    * @export
    * @enum {string}
    */
var EstimatedVolumeDiscountModelCurrencyEnum;
(function (EstimatedVolumeDiscountModelCurrencyEnum) {
    EstimatedVolumeDiscountModelCurrencyEnum["Jpy"] = "JPY";
    EstimatedVolumeDiscountModelCurrencyEnum["Usd"] = "USD";
})(EstimatedVolumeDiscountModelCurrencyEnum = exports.EstimatedVolumeDiscountModelCurrencyEnum || (exports.EstimatedVolumeDiscountModelCurrencyEnum = {}));
/**
    * @export
    * @enum {string}
    */
var EventHandlerModelStatusEnum;
(function (EventHandlerModelStatusEnum) {
    EventHandlerModelStatusEnum["Inactive"] = "inactive";
    EventHandlerModelStatusEnum["Active"] = "active";
})(EventHandlerModelStatusEnum = exports.EventHandlerModelStatusEnum || (exports.EventHandlerModelStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ExecuteSoraletRequestDirectionEnum;
(function (ExecuteSoraletRequestDirectionEnum) {
    ExecuteSoraletRequestDirectionEnum["Uplink"] = "uplink";
    ExecuteSoraletRequestDirectionEnum["Downlink"] = "downlink";
})(ExecuteSoraletRequestDirectionEnum = exports.ExecuteSoraletRequestDirectionEnum || (exports.ExecuteSoraletRequestDirectionEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ExecuteSoraletRequestEncodingTypeEnum;
(function (ExecuteSoraletRequestEncodingTypeEnum) {
    ExecuteSoraletRequestEncodingTypeEnum["Text"] = "text";
    ExecuteSoraletRequestEncodingTypeEnum["Binary"] = "binary";
})(ExecuteSoraletRequestEncodingTypeEnum = exports.ExecuteSoraletRequestEncodingTypeEnum || (exports.ExecuteSoraletRequestEncodingTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ExpiryTimeExpiryActionEnum;
(function (ExpiryTimeExpiryActionEnum) {
    ExpiryTimeExpiryActionEnum["DoNothing"] = "doNothing";
    ExpiryTimeExpiryActionEnum["DeleteSession"] = "deleteSession";
    ExpiryTimeExpiryActionEnum["Deactivate"] = "deactivate";
    ExpiryTimeExpiryActionEnum["Suspend"] = "suspend";
    ExpiryTimeExpiryActionEnum["Terminate"] = "terminate";
})(ExpiryTimeExpiryActionEnum = exports.ExpiryTimeExpiryActionEnum || (exports.ExpiryTimeExpiryActionEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ExportRequestPeriodEnum;
(function (ExportRequestPeriodEnum) {
    ExportRequestPeriodEnum["Month"] = "month";
    ExportRequestPeriodEnum["Day"] = "day";
    ExportRequestPeriodEnum["Minutes"] = "minutes";
})(ExportRequestPeriodEnum = exports.ExportRequestPeriodEnum || (exports.ExportRequestPeriodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GadgetStatusEnum;
(function (GadgetStatusEnum) {
    GadgetStatusEnum["Active"] = "active";
    GadgetStatusEnum["Terminated"] = "terminated";
})(GadgetStatusEnum = exports.GadgetStatusEnum || (exports.GadgetStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetExportedFileResponseStatusEnum;
(function (GetExportedFileResponseStatusEnum) {
    GetExportedFileResponseStatusEnum["Processing"] = "processing";
    GetExportedFileResponseStatusEnum["Exported"] = "exported";
    GetExportedFileResponseStatusEnum["Failed"] = "failed";
})(GetExportedFileResponseStatusEnum = exports.GetExportedFileResponseStatusEnum || (exports.GetExportedFileResponseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetOrderResponseOrderStatusEnum;
(function (GetOrderResponseOrderStatusEnum) {
    GetOrderResponseOrderStatusEnum["Ordering"] = "ordering";
    GetOrderResponseOrderStatusEnum["Ordered"] = "ordered";
    GetOrderResponseOrderStatusEnum["Kitting"] = "kitting";
    GetOrderResponseOrderStatusEnum["Shipped"] = "shipped";
    GetOrderResponseOrderStatusEnum["Received"] = "received";
    GetOrderResponseOrderStatusEnum["Cancelling"] = "cancelling";
    GetOrderResponseOrderStatusEnum["Cancelled"] = "cancelled";
    GetOrderResponseOrderStatusEnum["Failed"] = "failed";
})(GetOrderResponseOrderStatusEnum = exports.GetOrderResponseOrderStatusEnum || (exports.GetOrderResponseOrderStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetPaymentMethodResultErrorCodeEnum;
(function (GetPaymentMethodResultErrorCodeEnum) {
    GetPaymentMethodResultErrorCodeEnum["Success"] = "success";
    GetPaymentMethodResultErrorCodeEnum["Processing"] = "processing";
    GetPaymentMethodResultErrorCodeEnum["InvalidRequest"] = "invalid_request";
    GetPaymentMethodResultErrorCodeEnum["InvalidNumber"] = "invalid_number";
    GetPaymentMethodResultErrorCodeEnum["IncorrectNumber"] = "incorrect_number";
    GetPaymentMethodResultErrorCodeEnum["InvalidName"] = "invalid_name";
    GetPaymentMethodResultErrorCodeEnum["InvalidExpiryMonth"] = "invalid_expiry_month";
    GetPaymentMethodResultErrorCodeEnum["InvalidExpiryYear"] = "invalid_expiry_year";
    GetPaymentMethodResultErrorCodeEnum["InvalidExpiry"] = "invalid_expiry";
    GetPaymentMethodResultErrorCodeEnum["IncorrectExpiry"] = "incorrect_expiry";
    GetPaymentMethodResultErrorCodeEnum["InvalidCvc"] = "invalid_cvc";
    GetPaymentMethodResultErrorCodeEnum["IncorrectCvc"] = "incorrect_cvc";
    GetPaymentMethodResultErrorCodeEnum["CardDeclined"] = "card_declined";
    GetPaymentMethodResultErrorCodeEnum["Missing"] = "missing";
    GetPaymentMethodResultErrorCodeEnum["ProcessingError"] = "processing_error";
})(GetPaymentMethodResultErrorCodeEnum = exports.GetPaymentMethodResultErrorCodeEnum || (exports.GetPaymentMethodResultErrorCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetPaymentMethodResultProviderTypeEnum;
(function (GetPaymentMethodResultProviderTypeEnum) {
    GetPaymentMethodResultProviderTypeEnum["WebPay"] = "WebPay";
})(GetPaymentMethodResultProviderTypeEnum = exports.GetPaymentMethodResultProviderTypeEnum || (exports.GetPaymentMethodResultProviderTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetPaymentTransactionResultMessageCodeEnum;
(function (GetPaymentTransactionResultMessageCodeEnum) {
    GetPaymentTransactionResultMessageCodeEnum["Success"] = "success";
    GetPaymentTransactionResultMessageCodeEnum["Processing"] = "processing";
    GetPaymentTransactionResultMessageCodeEnum["InvalidRequest"] = "invalid_request";
    GetPaymentTransactionResultMessageCodeEnum["InvalidNumber"] = "invalid_number";
    GetPaymentTransactionResultMessageCodeEnum["IncorrectNumber"] = "incorrect_number";
    GetPaymentTransactionResultMessageCodeEnum["InvalidName"] = "invalid_name";
    GetPaymentTransactionResultMessageCodeEnum["InvalidExpiryMonth"] = "invalid_expiry_month";
    GetPaymentTransactionResultMessageCodeEnum["InvalidExpiryYear"] = "invalid_expiry_year";
    GetPaymentTransactionResultMessageCodeEnum["InvalidExpiry"] = "invalid_expiry";
    GetPaymentTransactionResultMessageCodeEnum["IncorrectExpiry"] = "incorrect_expiry";
    GetPaymentTransactionResultMessageCodeEnum["InvalidCvc"] = "invalid_cvc";
    GetPaymentTransactionResultMessageCodeEnum["IncorrectCvc"] = "incorrect_cvc";
    GetPaymentTransactionResultMessageCodeEnum["CardDeclined"] = "card_declined";
    GetPaymentTransactionResultMessageCodeEnum["Missing"] = "missing";
    GetPaymentTransactionResultMessageCodeEnum["ProcessingError"] = "processing_error";
})(GetPaymentTransactionResultMessageCodeEnum = exports.GetPaymentTransactionResultMessageCodeEnum || (exports.GetPaymentTransactionResultMessageCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetPaymentTransactionResultStatusEnum;
(function (GetPaymentTransactionResultStatusEnum) {
    GetPaymentTransactionResultStatusEnum["Success"] = "success";
    GetPaymentTransactionResultStatusEnum["Error"] = "error";
})(GetPaymentTransactionResultStatusEnum = exports.GetPaymentTransactionResultStatusEnum || (exports.GetPaymentTransactionResultStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetVolumeDiscountResponseStatusEnum;
(function (GetVolumeDiscountResponseStatusEnum) {
    GetVolumeDiscountResponseStatusEnum["Active"] = "active";
    GetVolumeDiscountResponseStatusEnum["Expired"] = "expired";
})(GetVolumeDiscountResponseStatusEnum = exports.GetVolumeDiscountResponseStatusEnum || (exports.GetVolumeDiscountResponseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetVolumeDiscountResponseVolumeDiscountPaymentTypeEnum;
(function (GetVolumeDiscountResponseVolumeDiscountPaymentTypeEnum) {
    GetVolumeDiscountResponseVolumeDiscountPaymentTypeEnum["Monthly"] = "MONTHLY";
    GetVolumeDiscountResponseVolumeDiscountPaymentTypeEnum["Prepayment"] = "PREPAYMENT";
})(GetVolumeDiscountResponseVolumeDiscountPaymentTypeEnum = exports.GetVolumeDiscountResponseVolumeDiscountPaymentTypeEnum || (exports.GetVolumeDiscountResponseVolumeDiscountPaymentTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetVolumeDiscountResponseVolumeDiscountTypeEnum;
(function (GetVolumeDiscountResponseVolumeDiscountTypeEnum) {
    GetVolumeDiscountResponseVolumeDiscountTypeEnum["BasicChargeV2"] = "SORACOM_AIR_BASIC_CHARGE_V2";
    GetVolumeDiscountResponseVolumeDiscountTypeEnum["BasicCharge"] = "SORACOM_AIR_BASIC_CHARGE";
    GetVolumeDiscountResponseVolumeDiscountTypeEnum["MonthlyFixedBasicCharge"] = "SORACOM_AIR_MONTHLY_FIXED_BASIC_CHARGE";
})(GetVolumeDiscountResponseVolumeDiscountTypeEnum = exports.GetVolumeDiscountResponseVolumeDiscountTypeEnum || (exports.GetVolumeDiscountResponseVolumeDiscountTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var IpAddressMapEntryTypeEnum;
(function (IpAddressMapEntryTypeEnum) {
    IpAddressMapEntryTypeEnum["Static"] = "static";
    IpAddressMapEntryTypeEnum["Dynamic"] = "dynamic";
    IpAddressMapEntryTypeEnum["CustomerGatePeer"] = "customerGatePeer";
    IpAddressMapEntryTypeEnum["GatePeer"] = "gatePeer";
})(IpAddressMapEntryTypeEnum = exports.IpAddressMapEntryTypeEnum || (exports.IpAddressMapEntryTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var JunctionMirroringPeerProtocolEnum;
(function (JunctionMirroringPeerProtocolEnum) {
    JunctionMirroringPeerProtocolEnum["Gre"] = "gre";
})(JunctionMirroringPeerProtocolEnum = exports.JunctionMirroringPeerProtocolEnum || (exports.JunctionMirroringPeerProtocolEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LagoonDashboardPermissionsResponsePermissionsPermissionNameEnum;
(function (LagoonDashboardPermissionsResponsePermissionsPermissionNameEnum) {
    LagoonDashboardPermissionsResponsePermissionsPermissionNameEnum["View"] = "View";
    LagoonDashboardPermissionsResponsePermissionsPermissionNameEnum["Edit"] = "Edit";
    LagoonDashboardPermissionsResponsePermissionsPermissionNameEnum["Admin"] = "Admin";
})(LagoonDashboardPermissionsResponsePermissionsPermissionNameEnum = exports.LagoonDashboardPermissionsResponsePermissionsPermissionNameEnum || (exports.LagoonDashboardPermissionsResponsePermissionsPermissionNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LagoonPlanChangingRequestPlanEnum;
(function (LagoonPlanChangingRequestPlanEnum) {
    LagoonPlanChangingRequestPlanEnum["Maker"] = "maker";
    LagoonPlanChangingRequestPlanEnum["Pro"] = "pro";
    LagoonPlanChangingRequestPlanEnum["Free"] = "free";
})(LagoonPlanChangingRequestPlanEnum = exports.LagoonPlanChangingRequestPlanEnum || (exports.LagoonPlanChangingRequestPlanEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LagoonRegistrationRequestPlanEnum;
(function (LagoonRegistrationRequestPlanEnum) {
    LagoonRegistrationRequestPlanEnum["Maker"] = "maker";
})(LagoonRegistrationRequestPlanEnum = exports.LagoonRegistrationRequestPlanEnum || (exports.LagoonRegistrationRequestPlanEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LagoonUserRoleEnum;
(function (LagoonUserRoleEnum) {
    LagoonUserRoleEnum["Viewer"] = "Viewer";
    LagoonUserRoleEnum["Editor"] = "Editor";
})(LagoonUserRoleEnum = exports.LagoonUserRoleEnum || (exports.LagoonUserRoleEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LagoonUserCreationRequestRoleEnum;
(function (LagoonUserCreationRequestRoleEnum) {
    LagoonUserCreationRequestRoleEnum["Viewer"] = "Viewer";
    LagoonUserCreationRequestRoleEnum["Editor"] = "Editor";
})(LagoonUserCreationRequestRoleEnum = exports.LagoonUserCreationRequestRoleEnum || (exports.LagoonUserCreationRequestRoleEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LagoonUserPermissionUpdatingRequestRoleEnum;
(function (LagoonUserPermissionUpdatingRequestRoleEnum) {
    LagoonUserPermissionUpdatingRequestRoleEnum["Viewer"] = "Viewer";
    LagoonUserPermissionUpdatingRequestRoleEnum["Editor"] = "Editor";
})(LagoonUserPermissionUpdatingRequestRoleEnum = exports.LagoonUserPermissionUpdatingRequestRoleEnum || (exports.LagoonUserPermissionUpdatingRequestRoleEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LogEntryResourceTypeEnum;
(function (LogEntryResourceTypeEnum) {
    LogEntryResourceTypeEnum["Subscriber"] = "Subscriber";
    LogEntryResourceTypeEnum["EventHandler"] = "EventHandler";
    LogEntryResourceTypeEnum["VirtualPrivateGateway"] = "VirtualPrivateGateway";
})(LogEntryResourceTypeEnum = exports.LogEntryResourceTypeEnum || (exports.LogEntryResourceTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LogEntryServiceEnum;
(function (LogEntryServiceEnum) {
    LogEntryServiceEnum["Air"] = "Air";
    LogEntryServiceEnum["Beam"] = "Beam";
    LogEntryServiceEnum["Canal"] = "Canal";
    LogEntryServiceEnum["Direct"] = "Direct";
    LogEntryServiceEnum["Door"] = "Door";
    LogEntryServiceEnum["Endorse"] = "Endorse";
    LogEntryServiceEnum["Funnel"] = "Funnel";
    LogEntryServiceEnum["Gate"] = "Gate";
})(LogEntryServiceEnum = exports.LogEntryServiceEnum || (exports.LogEntryServiceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LoraDeviceStatusEnum;
(function (LoraDeviceStatusEnum) {
    LoraDeviceStatusEnum["Active"] = "active";
    LoraDeviceStatusEnum["Ready"] = "ready";
    LoraDeviceStatusEnum["Terminated"] = "terminated";
    LoraDeviceStatusEnum["Instock"] = "instock";
})(LoraDeviceStatusEnum = exports.LoraDeviceStatusEnum || (exports.LoraDeviceStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LoraGatewayStatusEnum;
(function (LoraGatewayStatusEnum) {
    LoraGatewayStatusEnum["Active"] = "active";
    LoraGatewayStatusEnum["Terminated"] = "terminated";
    LoraGatewayStatusEnum["Ready"] = "ready";
    LoraGatewayStatusEnum["Instock"] = "instock";
})(LoraGatewayStatusEnum = exports.LoraGatewayStatusEnum || (exports.LoraGatewayStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MonthlyBillPaymentStatusEnum;
(function (MonthlyBillPaymentStatusEnum) {
    MonthlyBillPaymentStatusEnum["LessThanMinimumCharge"] = "lessThanMinimumCharge";
    MonthlyBillPaymentStatusEnum["Paying"] = "paying";
    MonthlyBillPaymentStatusEnum["Paid"] = "paid";
    MonthlyBillPaymentStatusEnum["Refunding"] = "refunding";
    MonthlyBillPaymentStatusEnum["Refunded"] = "refunded";
    MonthlyBillPaymentStatusEnum["Fail"] = "fail";
})(MonthlyBillPaymentStatusEnum = exports.MonthlyBillPaymentStatusEnum || (exports.MonthlyBillPaymentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var NapterAuditLogEntryTypeEnum;
(function (NapterAuditLogEntryTypeEnum) {
    NapterAuditLogEntryTypeEnum["Access"] = "ACCESS";
    NapterAuditLogEntryTypeEnum["Denied"] = "DENIED";
    NapterAuditLogEntryTypeEnum["Connected"] = "CONNECTED";
    NapterAuditLogEntryTypeEnum["Closed"] = "CLOSED";
    NapterAuditLogEntryTypeEnum["Refused"] = "REFUSED";
    NapterAuditLogEntryTypeEnum["Created"] = "CREATED";
    NapterAuditLogEntryTypeEnum["Deleted"] = "DELETED";
    NapterAuditLogEntryTypeEnum["Expired"] = "EXPIRED";
})(NapterAuditLogEntryTypeEnum = exports.NapterAuditLogEntryTypeEnum || (exports.NapterAuditLogEntryTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PacketCaptureSessionStatusEnum;
(function (PacketCaptureSessionStatusEnum) {
    PacketCaptureSessionStatusEnum["Requested"] = "REQUESTED";
    PacketCaptureSessionStatusEnum["Accepted"] = "ACCEPTED";
    PacketCaptureSessionStatusEnum["Capturing"] = "CAPTURING";
    PacketCaptureSessionStatusEnum["PostProcessing"] = "POST_PROCESSING";
    PacketCaptureSessionStatusEnum["Done"] = "DONE";
    PacketCaptureSessionStatusEnum["Failed"] = "FAILED";
})(PacketCaptureSessionStatusEnum = exports.PacketCaptureSessionStatusEnum || (exports.PacketCaptureSessionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ProductModelProductTypeEnum;
(function (ProductModelProductTypeEnum) {
    ProductModelProductTypeEnum["Sim"] = "sim";
    ProductModelProductTypeEnum["NetworkModule"] = "network_module";
})(ProductModelProductTypeEnum = exports.ProductModelProductTypeEnum || (exports.ProductModelProductTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ResourceInstanceOperationsEnum;
(function (ResourceInstanceOperationsEnum) {
    ResourceInstanceOperationsEnum["None"] = "NONE";
    ResourceInstanceOperationsEnum["R"] = "R";
    ResourceInstanceOperationsEnum["W"] = "W";
    ResourceInstanceOperationsEnum["Rw"] = "RW";
    ResourceInstanceOperationsEnum["E"] = "E";
    ResourceInstanceOperationsEnum["Re"] = "RE";
    ResourceInstanceOperationsEnum["We"] = "WE";
    ResourceInstanceOperationsEnum["Rwe"] = "RWE";
})(ResourceInstanceOperationsEnum = exports.ResourceInstanceOperationsEnum || (exports.ResourceInstanceOperationsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ResourceInstanceTypeEnum;
(function (ResourceInstanceTypeEnum) {
    ResourceInstanceTypeEnum["String"] = "STRING";
    ResourceInstanceTypeEnum["Integer"] = "INTEGER";
    ResourceInstanceTypeEnum["Float"] = "FLOAT";
    ResourceInstanceTypeEnum["Boolean"] = "BOOLEAN";
    ResourceInstanceTypeEnum["Opaque"] = "OPAQUE";
    ResourceInstanceTypeEnum["Time"] = "TIME";
    ResourceInstanceTypeEnum["Objlnk"] = "OBJLNK";
})(ResourceInstanceTypeEnum = exports.ResourceInstanceTypeEnum || (exports.ResourceInstanceTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RoutingFilterEntryActionEnum;
(function (RoutingFilterEntryActionEnum) {
    RoutingFilterEntryActionEnum["Allow"] = "allow";
    RoutingFilterEntryActionEnum["Deny"] = "deny";
})(RoutingFilterEntryActionEnum = exports.RoutingFilterEntryActionEnum || (exports.RoutingFilterEntryActionEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RuleConfigTypeEnum;
(function (RuleConfigTypeEnum) {
    RuleConfigTypeEnum["SubscriberDailyTrafficRule"] = "SubscriberDailyTrafficRule";
    RuleConfigTypeEnum["SubscriberMonthlyTrafficRule"] = "SubscriberMonthlyTrafficRule";
    RuleConfigTypeEnum["SubscriberCumulativeTrafficRule"] = "SubscriberCumulativeTrafficRule";
    RuleConfigTypeEnum["SubscriberFirstTrafficRule"] = "SubscriberFirstTrafficRule";
    RuleConfigTypeEnum["DailyTotalTrafficRule"] = "DailyTotalTrafficRule";
    RuleConfigTypeEnum["MonthlyTotalTrafficRule"] = "MonthlyTotalTrafficRule";
    RuleConfigTypeEnum["SubscriberStatusAttributeRule"] = "SubscriberStatusAttributeRule";
    RuleConfigTypeEnum["SubscriberSpeedClassAttributeRule"] = "SubscriberSpeedClassAttributeRule";
    RuleConfigTypeEnum["SubscriberExpiredRule"] = "SubscriberExpiredRule";
    RuleConfigTypeEnum["SimDailyTotalTrafficRule"] = "SimDailyTotalTrafficRule";
    RuleConfigTypeEnum["SimMonthlyTotalTrafficRule"] = "SimMonthlyTotalTrafficRule";
    RuleConfigTypeEnum["SimCumulativeTotalTrafficRule"] = "SimCumulativeTotalTrafficRule";
    RuleConfigTypeEnum["SimStatusAttributeRule"] = "SimStatusAttributeRule";
    RuleConfigTypeEnum["SimSpeedClassAttributeRule"] = "SimSpeedClassAttributeRule";
    RuleConfigTypeEnum["SimExpiredRule"] = "SimExpiredRule";
    RuleConfigTypeEnum["SimSubscriptionStatusRule"] = "SimSubscriptionStatusRule";
})(RuleConfigTypeEnum = exports.RuleConfigTypeEnum || (exports.RuleConfigTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RuleConfigPropertyInactiveTimeoutDateConstEnum;
(function (RuleConfigPropertyInactiveTimeoutDateConstEnum) {
    RuleConfigPropertyInactiveTimeoutDateConstEnum["Immediately"] = "IMMEDIATELY";
    RuleConfigPropertyInactiveTimeoutDateConstEnum["BeginningOfNextMonth"] = "BEGINNING_OF_NEXT_MONTH";
    RuleConfigPropertyInactiveTimeoutDateConstEnum["BeginningOfNextDay"] = "BEGINNING_OF_NEXT_DAY";
    RuleConfigPropertyInactiveTimeoutDateConstEnum["AfterOneDay"] = "AFTER_ONE_DAY";
    RuleConfigPropertyInactiveTimeoutDateConstEnum["Never"] = "NEVER";
})(RuleConfigPropertyInactiveTimeoutDateConstEnum = exports.RuleConfigPropertyInactiveTimeoutDateConstEnum || (exports.RuleConfigPropertyInactiveTimeoutDateConstEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RuleConfigPropertyTargetOtaStatusEnum;
(function (RuleConfigPropertyTargetOtaStatusEnum) {
    RuleConfigPropertyTargetOtaStatusEnum["Started"] = "started";
    RuleConfigPropertyTargetOtaStatusEnum["Finished"] = "finished";
    RuleConfigPropertyTargetOtaStatusEnum["Failed"] = "failed";
})(RuleConfigPropertyTargetOtaStatusEnum = exports.RuleConfigPropertyTargetOtaStatusEnum || (exports.RuleConfigPropertyTargetOtaStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RuleConfigPropertyTargetSpeedClassEnum;
(function (RuleConfigPropertyTargetSpeedClassEnum) {
    RuleConfigPropertyTargetSpeedClassEnum["Minimum"] = "s1.minimum";
    RuleConfigPropertyTargetSpeedClassEnum["Slow"] = "s1.slow";
    RuleConfigPropertyTargetSpeedClassEnum["Standard"] = "s1.standard";
    RuleConfigPropertyTargetSpeedClassEnum["Fast"] = "s1.fast";
})(RuleConfigPropertyTargetSpeedClassEnum = exports.RuleConfigPropertyTargetSpeedClassEnum || (exports.RuleConfigPropertyTargetSpeedClassEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RuleConfigPropertyTargetStatusEnum;
(function (RuleConfigPropertyTargetStatusEnum) {
    RuleConfigPropertyTargetStatusEnum["Ready"] = "ready";
    RuleConfigPropertyTargetStatusEnum["Active"] = "active";
    RuleConfigPropertyTargetStatusEnum["Inactive"] = "inactive";
    RuleConfigPropertyTargetStatusEnum["Suspended"] = "suspended";
    RuleConfigPropertyTargetStatusEnum["Terminated"] = "terminated";
})(RuleConfigPropertyTargetStatusEnum = exports.RuleConfigPropertyTargetStatusEnum || (exports.RuleConfigPropertyTargetStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ShippingCostModelShippingAreaEnum;
(function (ShippingCostModelShippingAreaEnum) {
    ShippingCostModelShippingAreaEnum["Hokkaido"] = "hokkaido";
    ShippingCostModelShippingAreaEnum["KitaTohoku"] = "kita_tohoku";
    ShippingCostModelShippingAreaEnum["MinamiTohoku"] = "minami_tohoku";
    ShippingCostModelShippingAreaEnum["Kanto"] = "kanto";
    ShippingCostModelShippingAreaEnum["Shinetsu"] = "shinetsu";
    ShippingCostModelShippingAreaEnum["Chubu"] = "chubu";
    ShippingCostModelShippingAreaEnum["Hokuriku"] = "hokuriku";
    ShippingCostModelShippingAreaEnum["Kansai"] = "kansai";
    ShippingCostModelShippingAreaEnum["Chugoku"] = "chugoku";
    ShippingCostModelShippingAreaEnum["Shikoku"] = "shikoku";
    ShippingCostModelShippingAreaEnum["Kyushu"] = "kyushu";
    ShippingCostModelShippingAreaEnum["Okinawa"] = "okinawa";
})(ShippingCostModelShippingAreaEnum = exports.ShippingCostModelShippingAreaEnum || (exports.ShippingCostModelShippingAreaEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SigfoxDeviceStatusEnum;
(function (SigfoxDeviceStatusEnum) {
    SigfoxDeviceStatusEnum["Active"] = "active";
    SigfoxDeviceStatusEnum["Ready"] = "ready";
    SigfoxDeviceStatusEnum["Terminated"] = "terminated";
    SigfoxDeviceStatusEnum["Instock"] = "instock";
})(SigfoxDeviceStatusEnum = exports.SigfoxDeviceStatusEnum || (exports.SigfoxDeviceStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SimTypeEnum;
(function (SimTypeEnum) {
    SimTypeEnum["Uicc"] = "uicc";
    SimTypeEnum["Euicc"] = "euicc";
})(SimTypeEnum = exports.SimTypeEnum || (exports.SimTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SubscriberExpiryActionEnum;
(function (SubscriberExpiryActionEnum) {
    SubscriberExpiryActionEnum["DoNothing"] = "doNothing";
    SubscriberExpiryActionEnum["DeleteSession"] = "deleteSession";
    SubscriberExpiryActionEnum["Deactivate"] = "deactivate";
    SubscriberExpiryActionEnum["Suspend"] = "suspend";
    SubscriberExpiryActionEnum["Terminate"] = "terminate";
})(SubscriberExpiryActionEnum = exports.SubscriberExpiryActionEnum || (exports.SubscriberExpiryActionEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateSpeedClassRequestSpeedClassEnum;
(function (UpdateSpeedClassRequestSpeedClassEnum) {
    UpdateSpeedClassRequestSpeedClassEnum["Minimum"] = "s1.minimum";
    UpdateSpeedClassRequestSpeedClassEnum["Slow"] = "s1.slow";
    UpdateSpeedClassRequestSpeedClassEnum["Standard"] = "s1.standard";
    UpdateSpeedClassRequestSpeedClassEnum["Fast"] = "s1.fast";
})(UpdateSpeedClassRequestSpeedClassEnum = exports.UpdateSpeedClassRequestSpeedClassEnum || (exports.UpdateSpeedClassRequestSpeedClassEnum = {}));
/**
    * @export
    * @enum {string}
    */
var VolumeDiscountModelVolumeDiscountPaymentTypeEnum;
(function (VolumeDiscountModelVolumeDiscountPaymentTypeEnum) {
    VolumeDiscountModelVolumeDiscountPaymentTypeEnum["Monthly"] = "MONTHLY";
    VolumeDiscountModelVolumeDiscountPaymentTypeEnum["Prepayment"] = "PREPAYMENT";
})(VolumeDiscountModelVolumeDiscountPaymentTypeEnum = exports.VolumeDiscountModelVolumeDiscountPaymentTypeEnum || (exports.VolumeDiscountModelVolumeDiscountPaymentTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var VolumeDiscountModelVolumeDiscountTypeEnum;
(function (VolumeDiscountModelVolumeDiscountTypeEnum) {
    VolumeDiscountModelVolumeDiscountTypeEnum["BasicChargeV2"] = "SORACOM_AIR_BASIC_CHARGE_V2";
    VolumeDiscountModelVolumeDiscountTypeEnum["BasicCharge"] = "SORACOM_AIR_BASIC_CHARGE";
    VolumeDiscountModelVolumeDiscountTypeEnum["MonthlyFixedBasicCharge"] = "SORACOM_AIR_MONTHLY_FIXED_BASIC_CHARGE";
})(VolumeDiscountModelVolumeDiscountTypeEnum = exports.VolumeDiscountModelVolumeDiscountTypeEnum || (exports.VolumeDiscountModelVolumeDiscountTypeEnum = {}));
/**
 * AuditLogApi - axios parameter creator
 * @export
 */
var AuditLogApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieve audit logs for API calls.
         * @summary Retrieve audit logs for API calls
         * @param {string} [apiKind] Filter item for audit log retrieval by API kind (e.g. &#x60;/v1/auth&#x60;).
         * @param {number} [fromEpochMs] Start time for the log search range (unixtime milliseconds).
         * @param {number} [toEpochMs] End time for the log search range (unixtime milliseconds).
         * @param {number} [limit] Maximum number of log entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;requestedTimeEpochMs&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuditLogs: function (apiKind, fromEpochMs, toEpochMs, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/audit_logs/api";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (apiKind !== undefined) {
                                localVarQueryParameter['api_kind'] = apiKind;
                            }
                            if (fromEpochMs !== undefined) {
                                localVarQueryParameter['from_epoch_ms'] = fromEpochMs;
                            }
                            if (toEpochMs !== undefined) {
                                localVarQueryParameter['to_epoch_ms'] = toEpochMs;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve audit logs for Napter.
         * @summary Retrieve audit logs for Napter
         * @param {'Subscriber'} [resourceType] Type of the target resource to query Napter audit log entries.
         * @param {string} [resourceId] Identity of the target resource to query log entries.
         * @param {number} [from] Start time for the log search range (unixtime milliseconds).
         * @param {number} [to] End time for the log search range (unixtime milliseconds).
         * @param {number} [limit] Maximum number of log entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNapterAuditLogs: function (resourceType, resourceId, from, to, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/audit_logs/napter";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (resourceType !== undefined) {
                                localVarQueryParameter['resource_type'] = resourceType;
                            }
                            if (resourceId !== undefined) {
                                localVarQueryParameter['resource_id'] = resourceId;
                            }
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.AuditLogApiAxiosParamCreator = AuditLogApiAxiosParamCreator;
/**
 * AuditLogApi - functional programming interface
 * @export
 */
var AuditLogApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.AuditLogApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieve audit logs for API calls.
         * @summary Retrieve audit logs for API calls
         * @param {string} [apiKind] Filter item for audit log retrieval by API kind (e.g. &#x60;/v1/auth&#x60;).
         * @param {number} [fromEpochMs] Start time for the log search range (unixtime milliseconds).
         * @param {number} [toEpochMs] End time for the log search range (unixtime milliseconds).
         * @param {number} [limit] Maximum number of log entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;requestedTimeEpochMs&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuditLogs: function (apiKind, fromEpochMs, toEpochMs, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getApiAuditLogs(apiKind, fromEpochMs, toEpochMs, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve audit logs for Napter.
         * @summary Retrieve audit logs for Napter
         * @param {'Subscriber'} [resourceType] Type of the target resource to query Napter audit log entries.
         * @param {string} [resourceId] Identity of the target resource to query log entries.
         * @param {number} [from] Start time for the log search range (unixtime milliseconds).
         * @param {number} [to] End time for the log search range (unixtime milliseconds).
         * @param {number} [limit] Maximum number of log entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNapterAuditLogs: function (resourceType, resourceId, from, to, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNapterAuditLogs(resourceType, resourceId, from, to, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.AuditLogApiFp = AuditLogApiFp;
/**
 * AuditLogApi - factory interface
 * @export
 */
var AuditLogApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.AuditLogApiFp(configuration);
    return {
        /**
         * Retrieve audit logs for API calls.
         * @summary Retrieve audit logs for API calls
         * @param {string} [apiKind] Filter item for audit log retrieval by API kind (e.g. &#x60;/v1/auth&#x60;).
         * @param {number} [fromEpochMs] Start time for the log search range (unixtime milliseconds).
         * @param {number} [toEpochMs] End time for the log search range (unixtime milliseconds).
         * @param {number} [limit] Maximum number of log entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;requestedTimeEpochMs&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuditLogs: function (apiKind, fromEpochMs, toEpochMs, limit, lastEvaluatedKey, options) {
            return localVarFp.getApiAuditLogs(apiKind, fromEpochMs, toEpochMs, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve audit logs for Napter.
         * @summary Retrieve audit logs for Napter
         * @param {'Subscriber'} [resourceType] Type of the target resource to query Napter audit log entries.
         * @param {string} [resourceId] Identity of the target resource to query log entries.
         * @param {number} [from] Start time for the log search range (unixtime milliseconds).
         * @param {number} [to] End time for the log search range (unixtime milliseconds).
         * @param {number} [limit] Maximum number of log entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNapterAuditLogs: function (resourceType, resourceId, from, to, limit, lastEvaluatedKey, options) {
            return localVarFp.getNapterAuditLogs(resourceType, resourceId, from, to, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.AuditLogApiFactory = AuditLogApiFactory;
/**
 * AuditLogApi - object-oriented interface
 * @export
 * @class AuditLogApi
 * @extends {BaseAPI}
 */
var AuditLogApi = /** @class */ (function (_super) {
    __extends(AuditLogApi, _super);
    function AuditLogApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve audit logs for API calls.
     * @summary Retrieve audit logs for API calls
     * @param {string} [apiKind] Filter item for audit log retrieval by API kind (e.g. &#x60;/v1/auth&#x60;).
     * @param {number} [fromEpochMs] Start time for the log search range (unixtime milliseconds).
     * @param {number} [toEpochMs] End time for the log search range (unixtime milliseconds).
     * @param {number} [limit] Maximum number of log entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;requestedTimeEpochMs&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    AuditLogApi.prototype.getApiAuditLogs = function (apiKind, fromEpochMs, toEpochMs, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.AuditLogApiFp(this.configuration).getApiAuditLogs(apiKind, fromEpochMs, toEpochMs, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve audit logs for Napter.
     * @summary Retrieve audit logs for Napter
     * @param {'Subscriber'} [resourceType] Type of the target resource to query Napter audit log entries.
     * @param {string} [resourceId] Identity of the target resource to query log entries.
     * @param {number} [from] Start time for the log search range (unixtime milliseconds).
     * @param {number} [to] End time for the log search range (unixtime milliseconds).
     * @param {number} [limit] Maximum number of log entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    AuditLogApi.prototype.getNapterAuditLogs = function (resourceType, resourceId, from, to, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.AuditLogApiFp(this.configuration).getNapterAuditLogs(resourceType, resourceId, from, to, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuditLogApi;
}(base_1.BaseAPI));
exports.AuditLogApi = AuditLogApi;
/**
 * AuthApi - axios parameter creator
 * @export
 */
var AuthApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Performs authentication to access to the SORACOM API. To perform authentication by a root account, specify `email` and `password`. To perform authentication by an AuthKey, specify `authKeyId` and `authKey`. To perform authentication by a SAM user, specify `operatorId`, `userName` and `password`. An API Key and an API Token will be included in the response if successful. Specify the API Key and the API Token to requests afterwards
         * @summary Performs authentication to access to the SORACOM API.
         * @param {AuthRequest} auth Authentication request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth: function (auth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'auth' is not null or undefined
                    common_1.assertParamExists('auth', 'auth', auth);
                    localVarPath = "/auth";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(auth, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * Generates a password reset token and send it to the operator\'s mail address. After receiving the password reset token, call /v1/auth/password_reset_token/verify API with the token to update operator\'s password.
         * @summary Issues a password reset token for the operator.
         * @param {IssuePasswordResetTokenRequest} email email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuePasswordResetToken: function (email, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'email' is not null or undefined
                    common_1.assertParamExists('issuePasswordResetToken', 'email', email);
                    localVarPath = "/auth/password_reset_token/issue";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(email, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * Updates the operator\'s password if the password reset token is verified.
         * @summary Verifies the password reset token and updates password.
         * @param {VerifyPasswordResetTokenRequest} request token, password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPasswordResetToken: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    common_1.assertParamExists('verifyPasswordResetToken', 'request', request);
                    localVarPath = "/auth/password_reset_token/verify";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        }
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
var AuthApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.AuthApiAxiosParamCreator(configuration);
    return {
        /**
         * Performs authentication to access to the SORACOM API. To perform authentication by a root account, specify `email` and `password`. To perform authentication by an AuthKey, specify `authKeyId` and `authKey`. To perform authentication by a SAM user, specify `operatorId`, `userName` and `password`. An API Key and an API Token will be included in the response if successful. Specify the API Key and the API Token to requests afterwards
         * @summary Performs authentication to access to the SORACOM API.
         * @param {AuthRequest} auth Authentication request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth: function (auth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.auth(auth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Generates a password reset token and send it to the operator\'s mail address. After receiving the password reset token, call /v1/auth/password_reset_token/verify API with the token to update operator\'s password.
         * @summary Issues a password reset token for the operator.
         * @param {IssuePasswordResetTokenRequest} email email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuePasswordResetToken: function (email, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.issuePasswordResetToken(email, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the operator\'s password if the password reset token is verified.
         * @summary Verifies the password reset token and updates password.
         * @param {VerifyPasswordResetTokenRequest} request token, password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPasswordResetToken: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.verifyPasswordResetToken(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
var AuthApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.AuthApiFp(configuration);
    return {
        /**
         * Performs authentication to access to the SORACOM API. To perform authentication by a root account, specify `email` and `password`. To perform authentication by an AuthKey, specify `authKeyId` and `authKey`. To perform authentication by a SAM user, specify `operatorId`, `userName` and `password`. An API Key and an API Token will be included in the response if successful. Specify the API Key and the API Token to requests afterwards
         * @summary Performs authentication to access to the SORACOM API.
         * @param {AuthRequest} auth Authentication request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth: function (auth, options) {
            return localVarFp.auth(auth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Generates a password reset token and send it to the operator\'s mail address. After receiving the password reset token, call /v1/auth/password_reset_token/verify API with the token to update operator\'s password.
         * @summary Issues a password reset token for the operator.
         * @param {IssuePasswordResetTokenRequest} email email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuePasswordResetToken: function (email, options) {
            return localVarFp.issuePasswordResetToken(email, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the operator\'s password if the password reset token is verified.
         * @summary Verifies the password reset token and updates password.
         * @param {VerifyPasswordResetTokenRequest} request token, password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPasswordResetToken: function (request, options) {
            return localVarFp.verifyPasswordResetToken(request, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Performs authentication to access to the SORACOM API. To perform authentication by a root account, specify `email` and `password`. To perform authentication by an AuthKey, specify `authKeyId` and `authKey`. To perform authentication by a SAM user, specify `operatorId`, `userName` and `password`. An API Key and an API Token will be included in the response if successful. Specify the API Key and the API Token to requests afterwards
     * @summary Performs authentication to access to the SORACOM API.
     * @param {AuthRequest} auth Authentication request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.auth = function (auth, options) {
        var _this = this;
        return exports.AuthApiFp(this.configuration).auth(auth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Generates a password reset token and send it to the operator\'s mail address. After receiving the password reset token, call /v1/auth/password_reset_token/verify API with the token to update operator\'s password.
     * @summary Issues a password reset token for the operator.
     * @param {IssuePasswordResetTokenRequest} email email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.issuePasswordResetToken = function (email, options) {
        var _this = this;
        return exports.AuthApiFp(this.configuration).issuePasswordResetToken(email, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the operator\'s password if the password reset token is verified.
     * @summary Verifies the password reset token and updates password.
     * @param {VerifyPasswordResetTokenRequest} request token, password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.verifyPasswordResetToken = function (request, options) {
        var _this = this;
        return exports.AuthApiFp(this.configuration).verifyPasswordResetToken(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthApi;
}(base_1.BaseAPI));
exports.AuthApi = AuthApi;
/**
 * BillingApi - axios parameter creator
 * @export
 */
var BillingApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns detailed information for the billing amounts for the specified month. This detailed information includes billing amounts per day, subscriber, and billing item.
         * @summary Output billing CSV file to S3.
         * @param {string} yyyyMM yyyyMM
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBilling: function (yyyyMM, exportMode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'yyyyMM' is not null or undefined
                            common_1.assertParamExists('exportBilling', 'yyyyMM', yyyyMM);
                            localVarPath = "/bills/{yyyyMM}/export"
                                .replace("{" + "yyyyMM" + "}", encodeURIComponent(String(yyyyMM)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (exportMode !== undefined) {
                                localVarQueryParameter['export_mode'] = exportMode;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns detailed information of the billing amounts for the latest month. This detailed information includes billing amounts per day, subscriber, and billing item. The amounts retrieved using this API correspond to the values before the invoice was finalized.
         * @summary Export latest billing CSV file to S3.
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportLatestBilling: function (exportMode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/bills/latest/export";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (exportMode !== undefined) {
                                localVarQueryParameter['export_mode'] = exportMode;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns the billing history for the specified month (after applied discounts such as free tiers, etc., inclusive of tax). The amounts retrieved using this API correspond to the values before the invoice was finalized.
         * @summary Get bill.
         * @param {string} yyyyMM year and month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBilling: function (yyyyMM, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'yyyyMM' is not null or undefined
                            common_1.assertParamExists('getBilling', 'yyyyMM', yyyyMM);
                            localVarPath = "/bills/{yyyyMM}"
                                .replace("{" + "yyyyMM" + "}", encodeURIComponent(String(yyyyMM)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns past billing history (after applied discounts such as free tiers, etc., inclusive of tax). This API only returns the billing amounts that have been finalized at the end of the month.
         * @summary Get billing history.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingHistory: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/bills";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns detailed information of billing amounts per day for the specified month. This API only returns the billing amounts that have been finalized.
         * @summary Get bill per day.
         * @param {string} yyyyMM year and month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingPerDay: function (yyyyMM, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'yyyyMM' is not null or undefined
                            common_1.assertParamExists('getBillingPerDay', 'yyyyMM', yyyyMM);
                            localVarPath = "/bills/{yyyyMM}/daily"
                                .replace("{" + "yyyyMM" + "}", encodeURIComponent(String(yyyyMM)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns the latest billing amounts after applied discounts such as free tiers, etc. The amounts retrieved using this API correspond to the values before the invoice was finalized.
         * @summary Get latest bill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBilling: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/bills/latest";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.BillingApiAxiosParamCreator = BillingApiAxiosParamCreator;
/**
 * BillingApi - functional programming interface
 * @export
 */
var BillingApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.BillingApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns detailed information for the billing amounts for the specified month. This detailed information includes billing amounts per day, subscriber, and billing item.
         * @summary Output billing CSV file to S3.
         * @param {string} yyyyMM yyyyMM
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBilling: function (yyyyMM, exportMode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportBilling(yyyyMM, exportMode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns detailed information of the billing amounts for the latest month. This detailed information includes billing amounts per day, subscriber, and billing item. The amounts retrieved using this API correspond to the values before the invoice was finalized.
         * @summary Export latest billing CSV file to S3.
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportLatestBilling: function (exportMode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportLatestBilling(exportMode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the billing history for the specified month (after applied discounts such as free tiers, etc., inclusive of tax). The amounts retrieved using this API correspond to the values before the invoice was finalized.
         * @summary Get bill.
         * @param {string} yyyyMM year and month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBilling: function (yyyyMM, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBilling(yyyyMM, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns past billing history (after applied discounts such as free tiers, etc., inclusive of tax). This API only returns the billing amounts that have been finalized at the end of the month.
         * @summary Get billing history.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingHistory: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBillingHistory(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns detailed information of billing amounts per day for the specified month. This API only returns the billing amounts that have been finalized.
         * @summary Get bill per day.
         * @param {string} yyyyMM year and month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingPerDay: function (yyyyMM, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBillingPerDay(yyyyMM, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the latest billing amounts after applied discounts such as free tiers, etc. The amounts retrieved using this API correspond to the values before the invoice was finalized.
         * @summary Get latest bill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBilling: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLatestBilling(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.BillingApiFp = BillingApiFp;
/**
 * BillingApi - factory interface
 * @export
 */
var BillingApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.BillingApiFp(configuration);
    return {
        /**
         * Returns detailed information for the billing amounts for the specified month. This detailed information includes billing amounts per day, subscriber, and billing item.
         * @summary Output billing CSV file to S3.
         * @param {string} yyyyMM yyyyMM
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBilling: function (yyyyMM, exportMode, options) {
            return localVarFp.exportBilling(yyyyMM, exportMode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns detailed information of the billing amounts for the latest month. This detailed information includes billing amounts per day, subscriber, and billing item. The amounts retrieved using this API correspond to the values before the invoice was finalized.
         * @summary Export latest billing CSV file to S3.
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportLatestBilling: function (exportMode, options) {
            return localVarFp.exportLatestBilling(exportMode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the billing history for the specified month (after applied discounts such as free tiers, etc., inclusive of tax). The amounts retrieved using this API correspond to the values before the invoice was finalized.
         * @summary Get bill.
         * @param {string} yyyyMM year and month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBilling: function (yyyyMM, options) {
            return localVarFp.getBilling(yyyyMM, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns past billing history (after applied discounts such as free tiers, etc., inclusive of tax). This API only returns the billing amounts that have been finalized at the end of the month.
         * @summary Get billing history.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingHistory: function (options) {
            return localVarFp.getBillingHistory(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns detailed information of billing amounts per day for the specified month. This API only returns the billing amounts that have been finalized.
         * @summary Get bill per day.
         * @param {string} yyyyMM year and month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingPerDay: function (yyyyMM, options) {
            return localVarFp.getBillingPerDay(yyyyMM, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the latest billing amounts after applied discounts such as free tiers, etc. The amounts retrieved using this API correspond to the values before the invoice was finalized.
         * @summary Get latest bill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBilling: function (options) {
            return localVarFp.getLatestBilling(options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.BillingApiFactory = BillingApiFactory;
/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
var BillingApi = /** @class */ (function (_super) {
    __extends(BillingApi, _super);
    function BillingApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns detailed information for the billing amounts for the specified month. This detailed information includes billing amounts per day, subscriber, and billing item.
     * @summary Output billing CSV file to S3.
     * @param {string} yyyyMM yyyyMM
     * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    BillingApi.prototype.exportBilling = function (yyyyMM, exportMode, options) {
        var _this = this;
        return exports.BillingApiFp(this.configuration).exportBilling(yyyyMM, exportMode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns detailed information of the billing amounts for the latest month. This detailed information includes billing amounts per day, subscriber, and billing item. The amounts retrieved using this API correspond to the values before the invoice was finalized.
     * @summary Export latest billing CSV file to S3.
     * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    BillingApi.prototype.exportLatestBilling = function (exportMode, options) {
        var _this = this;
        return exports.BillingApiFp(this.configuration).exportLatestBilling(exportMode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the billing history for the specified month (after applied discounts such as free tiers, etc., inclusive of tax). The amounts retrieved using this API correspond to the values before the invoice was finalized.
     * @summary Get bill.
     * @param {string} yyyyMM year and month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    BillingApi.prototype.getBilling = function (yyyyMM, options) {
        var _this = this;
        return exports.BillingApiFp(this.configuration).getBilling(yyyyMM, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns past billing history (after applied discounts such as free tiers, etc., inclusive of tax). This API only returns the billing amounts that have been finalized at the end of the month.
     * @summary Get billing history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    BillingApi.prototype.getBillingHistory = function (options) {
        var _this = this;
        return exports.BillingApiFp(this.configuration).getBillingHistory(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns detailed information of billing amounts per day for the specified month. This API only returns the billing amounts that have been finalized.
     * @summary Get bill per day.
     * @param {string} yyyyMM year and month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    BillingApi.prototype.getBillingPerDay = function (yyyyMM, options) {
        var _this = this;
        return exports.BillingApiFp(this.configuration).getBillingPerDay(yyyyMM, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the latest billing amounts after applied discounts such as free tiers, etc. The amounts retrieved using this API correspond to the values before the invoice was finalized.
     * @summary Get latest bill.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    BillingApi.prototype.getLatestBilling = function (options) {
        var _this = this;
        return exports.BillingApiFp(this.configuration).getLatestBilling(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BillingApi;
}(base_1.BaseAPI));
exports.BillingApi = BillingApi;
/**
 * CellLocationApi - axios parameter creator
 * @export
 */
var CellLocationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieves a list of location information (latitude / longitude) for multiple cell towers which are identified by Cell IDs etc.
         * @summary List location information for multiple cell towers.
         * @param {Array<CellIdentifier>} body List of cell identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchGetCellLocations: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            common_1.assertParamExists('batchGetCellLocations', 'body', body);
                            localVarPath = "/cell_locations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves location information (latitude / longitude) for a cell tower which is identified by Cell ID etc. Please specify MCC, MNC, LAC and CID when the access radio technology is 3G. It is possible to retrieve location information without CID, but the location information will be low accuracy. For LTE (4G), please specify MCC, MNC, TAC and ECID. As it is based on an open database to convert cell information into location information, the location information does not exist or might be incorrect.
         * @summary Get location information for a cell tower.
         * @param {string} mcc MCC - Mobile Country Code
         * @param {string} mnc MNC - Mobile Network Code
         * @param {string} [lac] LAC - Location Area Code (for 3G)
         * @param {string} [cid] CID - Cell ID (for 3G)
         * @param {string} [tac] TAC - Tracking Area Code (for 4G)
         * @param {string} [ecid] ECID - Enhanced Cell ID (for 4G)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCellLocation: function (mcc, mnc, lac, cid, tac, ecid, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mcc' is not null or undefined
                            common_1.assertParamExists('getCellLocation', 'mcc', mcc);
                            // verify required parameter 'mnc' is not null or undefined
                            common_1.assertParamExists('getCellLocation', 'mnc', mnc);
                            localVarPath = "/cell_locations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (mcc !== undefined) {
                                localVarQueryParameter['mcc'] = mcc;
                            }
                            if (mnc !== undefined) {
                                localVarQueryParameter['mnc'] = mnc;
                            }
                            if (lac !== undefined) {
                                localVarQueryParameter['lac'] = lac;
                            }
                            if (cid !== undefined) {
                                localVarQueryParameter['cid'] = cid;
                            }
                            if (tac !== undefined) {
                                localVarQueryParameter['tac'] = tac;
                            }
                            if (ecid !== undefined) {
                                localVarQueryParameter['ecid'] = ecid;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.CellLocationApiAxiosParamCreator = CellLocationApiAxiosParamCreator;
/**
 * CellLocationApi - functional programming interface
 * @export
 */
var CellLocationApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CellLocationApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves a list of location information (latitude / longitude) for multiple cell towers which are identified by Cell IDs etc.
         * @summary List location information for multiple cell towers.
         * @param {Array<CellIdentifier>} body List of cell identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchGetCellLocations: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.batchGetCellLocations(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves location information (latitude / longitude) for a cell tower which is identified by Cell ID etc. Please specify MCC, MNC, LAC and CID when the access radio technology is 3G. It is possible to retrieve location information without CID, but the location information will be low accuracy. For LTE (4G), please specify MCC, MNC, TAC and ECID. As it is based on an open database to convert cell information into location information, the location information does not exist or might be incorrect.
         * @summary Get location information for a cell tower.
         * @param {string} mcc MCC - Mobile Country Code
         * @param {string} mnc MNC - Mobile Network Code
         * @param {string} [lac] LAC - Location Area Code (for 3G)
         * @param {string} [cid] CID - Cell ID (for 3G)
         * @param {string} [tac] TAC - Tracking Area Code (for 4G)
         * @param {string} [ecid] ECID - Enhanced Cell ID (for 4G)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCellLocation: function (mcc, mnc, lac, cid, tac, ecid, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCellLocation(mcc, mnc, lac, cid, tac, ecid, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.CellLocationApiFp = CellLocationApiFp;
/**
 * CellLocationApi - factory interface
 * @export
 */
var CellLocationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CellLocationApiFp(configuration);
    return {
        /**
         * Retrieves a list of location information (latitude / longitude) for multiple cell towers which are identified by Cell IDs etc.
         * @summary List location information for multiple cell towers.
         * @param {Array<CellIdentifier>} body List of cell identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchGetCellLocations: function (body, options) {
            return localVarFp.batchGetCellLocations(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves location information (latitude / longitude) for a cell tower which is identified by Cell ID etc. Please specify MCC, MNC, LAC and CID when the access radio technology is 3G. It is possible to retrieve location information without CID, but the location information will be low accuracy. For LTE (4G), please specify MCC, MNC, TAC and ECID. As it is based on an open database to convert cell information into location information, the location information does not exist or might be incorrect.
         * @summary Get location information for a cell tower.
         * @param {string} mcc MCC - Mobile Country Code
         * @param {string} mnc MNC - Mobile Network Code
         * @param {string} [lac] LAC - Location Area Code (for 3G)
         * @param {string} [cid] CID - Cell ID (for 3G)
         * @param {string} [tac] TAC - Tracking Area Code (for 4G)
         * @param {string} [ecid] ECID - Enhanced Cell ID (for 4G)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCellLocation: function (mcc, mnc, lac, cid, tac, ecid, options) {
            return localVarFp.getCellLocation(mcc, mnc, lac, cid, tac, ecid, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.CellLocationApiFactory = CellLocationApiFactory;
/**
 * CellLocationApi - object-oriented interface
 * @export
 * @class CellLocationApi
 * @extends {BaseAPI}
 */
var CellLocationApi = /** @class */ (function (_super) {
    __extends(CellLocationApi, _super);
    function CellLocationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a list of location information (latitude / longitude) for multiple cell towers which are identified by Cell IDs etc.
     * @summary List location information for multiple cell towers.
     * @param {Array<CellIdentifier>} body List of cell identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CellLocationApi
     */
    CellLocationApi.prototype.batchGetCellLocations = function (body, options) {
        var _this = this;
        return exports.CellLocationApiFp(this.configuration).batchGetCellLocations(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves location information (latitude / longitude) for a cell tower which is identified by Cell ID etc. Please specify MCC, MNC, LAC and CID when the access radio technology is 3G. It is possible to retrieve location information without CID, but the location information will be low accuracy. For LTE (4G), please specify MCC, MNC, TAC and ECID. As it is based on an open database to convert cell information into location information, the location information does not exist or might be incorrect.
     * @summary Get location information for a cell tower.
     * @param {string} mcc MCC - Mobile Country Code
     * @param {string} mnc MNC - Mobile Network Code
     * @param {string} [lac] LAC - Location Area Code (for 3G)
     * @param {string} [cid] CID - Cell ID (for 3G)
     * @param {string} [tac] TAC - Tracking Area Code (for 4G)
     * @param {string} [ecid] ECID - Enhanced Cell ID (for 4G)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CellLocationApi
     */
    CellLocationApi.prototype.getCellLocation = function (mcc, mnc, lac, cid, tac, ecid, options) {
        var _this = this;
        return exports.CellLocationApiFp(this.configuration).getCellLocation(mcc, mnc, lac, cid, tac, ecid, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CellLocationApi;
}(base_1.BaseAPI));
exports.CellLocationApi = CellLocationApi;
/**
 * CredentialApi - axios parameter creator
 * @export
 */
var CredentialApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new credential.
         * @summary Create a credential.
         * @param {string} credentialsId credentials_id
         * @param {CreateAndUpdateCredentialsModel} credentials credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCredential: function (credentialsId, credentials, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'credentialsId' is not null or undefined
                            common_1.assertParamExists('createCredential', 'credentialsId', credentialsId);
                            // verify required parameter 'credentials' is not null or undefined
                            common_1.assertParamExists('createCredential', 'credentials', credentials);
                            localVarPath = "/credentials/{credentials_id}"
                                .replace("{" + "credentials_id" + "}", encodeURIComponent(String(credentialsId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(credentials, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a credential.
         * @summary Delete a credential.
         * @param {string} credentialsId Credentials ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCredential: function (credentialsId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'credentialsId' is not null or undefined
                            common_1.assertParamExists('deleteCredential', 'credentialsId', credentialsId);
                            localVarPath = "/credentials/{credentials_id}"
                                .replace("{" + "credentials_id" + "}", encodeURIComponent(String(credentialsId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of credentials.
         * @summary List of credentials.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCredentials: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/credentials";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates a credential.
         * @summary Update a credential.
         * @param {string} credentialsId credentials_id
         * @param {CreateAndUpdateCredentialsModel} credentials credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCredential: function (credentialsId, credentials, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'credentialsId' is not null or undefined
                            common_1.assertParamExists('updateCredential', 'credentialsId', credentialsId);
                            // verify required parameter 'credentials' is not null or undefined
                            common_1.assertParamExists('updateCredential', 'credentials', credentials);
                            localVarPath = "/credentials/{credentials_id}"
                                .replace("{" + "credentials_id" + "}", encodeURIComponent(String(credentialsId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(credentials, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.CredentialApiAxiosParamCreator = CredentialApiAxiosParamCreator;
/**
 * CredentialApi - functional programming interface
 * @export
 */
var CredentialApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CredentialApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new credential.
         * @summary Create a credential.
         * @param {string} credentialsId credentials_id
         * @param {CreateAndUpdateCredentialsModel} credentials credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCredential: function (credentialsId, credentials, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCredential(credentialsId, credentials, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a credential.
         * @summary Delete a credential.
         * @param {string} credentialsId Credentials ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCredential: function (credentialsId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCredential(credentialsId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of credentials.
         * @summary List of credentials.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCredentials: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listCredentials(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates a credential.
         * @summary Update a credential.
         * @param {string} credentialsId credentials_id
         * @param {CreateAndUpdateCredentialsModel} credentials credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCredential: function (credentialsId, credentials, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCredential(credentialsId, credentials, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.CredentialApiFp = CredentialApiFp;
/**
 * CredentialApi - factory interface
 * @export
 */
var CredentialApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CredentialApiFp(configuration);
    return {
        /**
         * Creates a new credential.
         * @summary Create a credential.
         * @param {string} credentialsId credentials_id
         * @param {CreateAndUpdateCredentialsModel} credentials credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCredential: function (credentialsId, credentials, options) {
            return localVarFp.createCredential(credentialsId, credentials, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a credential.
         * @summary Delete a credential.
         * @param {string} credentialsId Credentials ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCredential: function (credentialsId, options) {
            return localVarFp.deleteCredential(credentialsId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of credentials.
         * @summary List of credentials.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCredentials: function (options) {
            return localVarFp.listCredentials(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a credential.
         * @summary Update a credential.
         * @param {string} credentialsId credentials_id
         * @param {CreateAndUpdateCredentialsModel} credentials credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCredential: function (credentialsId, credentials, options) {
            return localVarFp.updateCredential(credentialsId, credentials, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.CredentialApiFactory = CredentialApiFactory;
/**
 * CredentialApi - object-oriented interface
 * @export
 * @class CredentialApi
 * @extends {BaseAPI}
 */
var CredentialApi = /** @class */ (function (_super) {
    __extends(CredentialApi, _super);
    function CredentialApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new credential.
     * @summary Create a credential.
     * @param {string} credentialsId credentials_id
     * @param {CreateAndUpdateCredentialsModel} credentials credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    CredentialApi.prototype.createCredential = function (credentialsId, credentials, options) {
        var _this = this;
        return exports.CredentialApiFp(this.configuration).createCredential(credentialsId, credentials, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a credential.
     * @summary Delete a credential.
     * @param {string} credentialsId Credentials ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    CredentialApi.prototype.deleteCredential = function (credentialsId, options) {
        var _this = this;
        return exports.CredentialApiFp(this.configuration).deleteCredential(credentialsId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of credentials.
     * @summary List of credentials.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    CredentialApi.prototype.listCredentials = function (options) {
        var _this = this;
        return exports.CredentialApiFp(this.configuration).listCredentials(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a credential.
     * @summary Update a credential.
     * @param {string} credentialsId credentials_id
     * @param {CreateAndUpdateCredentialsModel} credentials credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    CredentialApi.prototype.updateCredential = function (credentialsId, credentials, options) {
        var _this = this;
        return exports.CredentialApiFp(this.configuration).updateCredential(credentialsId, credentials, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CredentialApi;
}(base_1.BaseAPI));
exports.CredentialApi = CredentialApi;
/**
 * DataEntryApi - axios parameter creator
 * @export
 */
var DataEntryApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes a data entry identified with resource ID and timestamp
         * @summary Deletes a data entry
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
         * @param {string} resourceId ID of data source resource
         * @param {number} time Timestamp of the target data entry to delete (unixtime in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataEntry: function (resourceType, resourceId, time, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'resourceType' is not null or undefined
                            common_1.assertParamExists('deleteDataEntry', 'resourceType', resourceType);
                            // verify required parameter 'resourceId' is not null or undefined
                            common_1.assertParamExists('deleteDataEntry', 'resourceId', resourceId);
                            // verify required parameter 'time' is not null or undefined
                            common_1.assertParamExists('deleteDataEntry', 'time', time);
                            localVarPath = "/data/{resource_type}/{resource_id}/{time}"
                                .replace("{" + "resource_type" + "}", encodeURIComponent(String(resourceType)))
                                .replace("{" + "resource_id" + "}", encodeURIComponent(String(resourceId)))
                                .replace("{" + "time" + "}", encodeURIComponent(String(time)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a resource that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a resource.
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
         * @param {string} resourceId ID of data source resource
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataEntries: function (resourceType, resourceId, from, to, sort, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'resourceType' is not null or undefined
                            common_1.assertParamExists('getDataEntries', 'resourceType', resourceType);
                            // verify required parameter 'resourceId' is not null or undefined
                            common_1.assertParamExists('getDataEntries', 'resourceId', resourceId);
                            localVarPath = "/data/{resource_type}/{resource_id}"
                                .replace("{" + "resource_type" + "}", encodeURIComponent(String(resourceType)))
                                .replace("{" + "resource_id" + "}", encodeURIComponent(String(resourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (sort !== undefined) {
                                localVarQueryParameter['sort'] = sort;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Gets a data entry identified with resource ID and timestamp
         * @summary Gets a data entry
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
         * @param {string} resourceId ID of data source resource
         * @param {number} time Timestamp of the target data entry to get (unixtime in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataEntry: function (resourceType, resourceId, time, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'resourceType' is not null or undefined
                            common_1.assertParamExists('getDataEntry', 'resourceType', resourceType);
                            // verify required parameter 'resourceId' is not null or undefined
                            common_1.assertParamExists('getDataEntry', 'resourceId', resourceId);
                            // verify required parameter 'time' is not null or undefined
                            common_1.assertParamExists('getDataEntry', 'time', time);
                            localVarPath = "/data/{resource_type}/{resource_id}/{time}"
                                .replace("{" + "resource_type" + "}", encodeURIComponent(String(resourceType)))
                                .replace("{" + "resource_id" + "}", encodeURIComponent(String(resourceId)))
                                .replace("{" + "time" + "}", encodeURIComponent(String(time)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of data source resources that have sent data from resources that belong to the operator. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get the list of data source resources
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} [resourceType] Type of data source resource
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;resourceId&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataSourceResources: function (resourceType, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/data/resources";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (resourceType !== undefined) {
                                localVarQueryParameter['resource_type'] = resourceType;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.DataEntryApiAxiosParamCreator = DataEntryApiAxiosParamCreator;
/**
 * DataEntryApi - functional programming interface
 * @export
 */
var DataEntryApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.DataEntryApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes a data entry identified with resource ID and timestamp
         * @summary Deletes a data entry
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
         * @param {string} resourceId ID of data source resource
         * @param {number} time Timestamp of the target data entry to delete (unixtime in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataEntry: function (resourceType, resourceId, time, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteDataEntry(resourceType, resourceId, time, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a resource that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a resource.
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
         * @param {string} resourceId ID of data source resource
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataEntries: function (resourceType, resourceId, from, to, sort, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDataEntries(resourceType, resourceId, from, to, sort, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a data entry identified with resource ID and timestamp
         * @summary Gets a data entry
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
         * @param {string} resourceId ID of data source resource
         * @param {number} time Timestamp of the target data entry to get (unixtime in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataEntry: function (resourceType, resourceId, time, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDataEntry(resourceType, resourceId, time, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of data source resources that have sent data from resources that belong to the operator. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get the list of data source resources
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} [resourceType] Type of data source resource
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;resourceId&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataSourceResources: function (resourceType, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listDataSourceResources(resourceType, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.DataEntryApiFp = DataEntryApiFp;
/**
 * DataEntryApi - factory interface
 * @export
 */
var DataEntryApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.DataEntryApiFp(configuration);
    return {
        /**
         * Deletes a data entry identified with resource ID and timestamp
         * @summary Deletes a data entry
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
         * @param {string} resourceId ID of data source resource
         * @param {number} time Timestamp of the target data entry to delete (unixtime in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataEntry: function (resourceType, resourceId, time, options) {
            return localVarFp.deleteDataEntry(resourceType, resourceId, time, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of data entries sent from a resource that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a resource.
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
         * @param {string} resourceId ID of data source resource
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataEntries: function (resourceType, resourceId, from, to, sort, limit, lastEvaluatedKey, options) {
            return localVarFp.getDataEntries(resourceType, resourceId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a data entry identified with resource ID and timestamp
         * @summary Gets a data entry
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
         * @param {string} resourceId ID of data source resource
         * @param {number} time Timestamp of the target data entry to get (unixtime in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataEntry: function (resourceType, resourceId, time, options) {
            return localVarFp.getDataEntry(resourceType, resourceId, time, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of data source resources that have sent data from resources that belong to the operator. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get the list of data source resources
         * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} [resourceType] Type of data source resource
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;resourceId&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataSourceResources: function (resourceType, limit, lastEvaluatedKey, options) {
            return localVarFp.listDataSourceResources(resourceType, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.DataEntryApiFactory = DataEntryApiFactory;
/**
 * DataEntryApi - object-oriented interface
 * @export
 * @class DataEntryApi
 * @extends {BaseAPI}
 */
var DataEntryApi = /** @class */ (function (_super) {
    __extends(DataEntryApi, _super);
    function DataEntryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a data entry identified with resource ID and timestamp
     * @summary Deletes a data entry
     * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
     * @param {string} resourceId ID of data source resource
     * @param {number} time Timestamp of the target data entry to delete (unixtime in milliseconds).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataEntryApi
     */
    DataEntryApi.prototype.deleteDataEntry = function (resourceType, resourceId, time, options) {
        var _this = this;
        return exports.DataEntryApiFp(this.configuration).deleteDataEntry(resourceType, resourceId, time, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of data entries sent from a resource that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary Get data sent from a resource.
     * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
     * @param {string} resourceId ID of data source resource
     * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
     * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
     * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
     * @param {number} [limit] Maximum number of data entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataEntryApi
     */
    DataEntryApi.prototype.getDataEntries = function (resourceType, resourceId, from, to, sort, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.DataEntryApiFp(this.configuration).getDataEntries(resourceType, resourceId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a data entry identified with resource ID and timestamp
     * @summary Gets a data entry
     * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} resourceType Type of data source resource
     * @param {string} resourceId ID of data source resource
     * @param {number} time Timestamp of the target data entry to get (unixtime in milliseconds).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataEntryApi
     */
    DataEntryApi.prototype.getDataEntry = function (resourceType, resourceId, time, options) {
        var _this = this;
        return exports.DataEntryApiFp(this.configuration).getDataEntry(resourceType, resourceId, time, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of data source resources that have sent data from resources that belong to the operator. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary Get the list of data source resources
     * @param {'Subscriber' | 'LoraDevice' | 'SubscriberIdentityModule' | 'SigfoxDevice' | 'Device'} [resourceType] Type of data source resource
     * @param {number} [limit] Maximum number of data entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;resourceId&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataEntryApi
     */
    DataEntryApi.prototype.listDataSourceResources = function (resourceType, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.DataEntryApiFp(this.configuration).listDataSourceResources(resourceType, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DataEntryApi;
}(base_1.BaseAPI));
exports.DataEntryApi = DataEntryApi;
/**
 * DeviceApi - axios parameter creator
 * @export
 */
var DeviceApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new Device
         * @summary Creates a new Device
         * @param {Device} device Device to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice: function (device, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'device' is not null or undefined
                            common_1.assertParamExists('createDevice', 'device', device);
                            localVarPath = "/devices";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(device, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Delete Device
         * @summary Delete Device
         * @param {string} deviceId Device to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('deleteDevice', 'deviceId', deviceId);
                            localVarPath = "/devices/{device_id}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Delete device tag
         * @summary Delete device tag
         * @param {string} deviceId Device to update
         * @param {string} tagName Name of tag to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceTag: function (deviceId, tagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('deleteDeviceTag', 'deviceId', deviceId);
                            // verify required parameter 'tagName' is not null or undefined
                            common_1.assertParamExists('deleteDeviceTag', 'tagName', tagName);
                            localVarPath = "/devices/{device_id}/tags/{tag_name}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "tag_name" + "}", encodeURIComponent(String(tagName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Executes a resource of a device
         * @summary Executes a resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {InlineObject} [arg]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeDeviceResource: function (deviceId, object, instance, resource, arg, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('executeDeviceResource', 'deviceId', deviceId);
                            // verify required parameter 'object' is not null or undefined
                            common_1.assertParamExists('executeDeviceResource', 'object', object);
                            // verify required parameter 'instance' is not null or undefined
                            common_1.assertParamExists('executeDeviceResource', 'instance', instance);
                            // verify required parameter 'resource' is not null or undefined
                            common_1.assertParamExists('executeDeviceResource', 'resource', resource);
                            localVarPath = "/devices/{device_id}/{object}/{instance}/{resource}/execute"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "object" + "}", encodeURIComponent(String(object)))
                                .replace("{" + "instance" + "}", encodeURIComponent(String(instance)))
                                .replace("{" + "resource" + "}", encodeURIComponent(String(resource)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arg, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a device.
         * @param {string} deviceId Device ID of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromDevice: function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('getDataFromDevice', 'deviceId', deviceId);
                            localVarPath = "/devices/{device_id}/data"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (sort !== undefined) {
                                localVarQueryParameter['sort'] = sort;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a Device identified by device ID
         * @summary Returns a Device identified by device ID
         * @param {string} deviceId Device ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevice: function (deviceId, model, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('getDevice', 'deviceId', deviceId);
                            localVarPath = "/devices/{device_id}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (model !== undefined) {
                                localVarQueryParameter['model'] = model;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of Devices
         * @summary Returns a list of Devices
         * @param {string} [tagName] Tag name
         * @param {string} [tagValue] Tag value
         * @param {string} [tagValueMatchMode] Tag value match mode (exact | prefix)
         * @param {string} [lastEvaluatedKey] ID of the last Device in the previous page
         * @param {number} [limit] Max number of Devices in a response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices: function (tagName, tagValue, tagValueMatchMode, lastEvaluatedKey, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/devices";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (tagName !== undefined) {
                                localVarQueryParameter['tag_name'] = tagName;
                            }
                            if (tagValue !== undefined) {
                                localVarQueryParameter['tag_value'] = tagValue;
                            }
                            if (tagValueMatchMode !== undefined) {
                                localVarQueryParameter['tag_value_match_mode'] = tagValueMatchMode;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Triggers observation of the specified resource of a device
         * @summary Triggers observation of the specified resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observeDeviceResource: function (deviceId, object, instance, resource, model, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('observeDeviceResource', 'deviceId', deviceId);
                            // verify required parameter 'object' is not null or undefined
                            common_1.assertParamExists('observeDeviceResource', 'object', object);
                            // verify required parameter 'instance' is not null or undefined
                            common_1.assertParamExists('observeDeviceResource', 'instance', instance);
                            // verify required parameter 'resource' is not null or undefined
                            common_1.assertParamExists('observeDeviceResource', 'resource', resource);
                            localVarPath = "/devices/{device_id}/{object}/{instance}/{resource}/observe"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "object" + "}", encodeURIComponent(String(object)))
                                .replace("{" + "instance" + "}", encodeURIComponent(String(instance)))
                                .replace("{" + "resource" + "}", encodeURIComponent(String(resource)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (model !== undefined) {
                                localVarQueryParameter['model'] = model;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Triggers observation of resources under an object instance of a device
         * @summary Triggers observation of resources under an object instance of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observeDeviceResources: function (deviceId, object, instance, model, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('observeDeviceResources', 'deviceId', deviceId);
                            // verify required parameter 'object' is not null or undefined
                            common_1.assertParamExists('observeDeviceResources', 'object', object);
                            // verify required parameter 'instance' is not null or undefined
                            common_1.assertParamExists('observeDeviceResources', 'instance', instance);
                            localVarPath = "/devices/{device_id}/{object}/{instance}/observe"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "object" + "}", encodeURIComponent(String(object)))
                                .replace("{" + "instance" + "}", encodeURIComponent(String(instance)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (model !== undefined) {
                                localVarQueryParameter['model'] = model;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates device tags
         * @summary Updates device tags
         * @param {string} deviceId Device to update
         * @param {Array<TagUpdateRequest>} tags Array of values for tags to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDeviceTags: function (deviceId, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('putDeviceTags', 'deviceId', deviceId);
                            // verify required parameter 'tags' is not null or undefined
                            common_1.assertParamExists('putDeviceTags', 'tags', tags);
                            localVarPath = "/devices/{device_id}/tags"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Get the specified resource of a device
         * @summary Get the specified resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDeviceResource: function (deviceId, object, instance, resource, model, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('readDeviceResource', 'deviceId', deviceId);
                            // verify required parameter 'object' is not null or undefined
                            common_1.assertParamExists('readDeviceResource', 'object', object);
                            // verify required parameter 'instance' is not null or undefined
                            common_1.assertParamExists('readDeviceResource', 'instance', instance);
                            // verify required parameter 'resource' is not null or undefined
                            common_1.assertParamExists('readDeviceResource', 'resource', resource);
                            localVarPath = "/devices/{device_id}/{object}/{instance}/{resource}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "object" + "}", encodeURIComponent(String(object)))
                                .replace("{" + "instance" + "}", encodeURIComponent(String(instance)))
                                .replace("{" + "resource" + "}", encodeURIComponent(String(resource)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (model !== undefined) {
                                localVarQueryParameter['model'] = model;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Get resources under an object instance of a device
         * @summary Get resources under an object instance of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDeviceResources: function (deviceId, object, instance, model, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('readDeviceResources', 'deviceId', deviceId);
                            // verify required parameter 'object' is not null or undefined
                            common_1.assertParamExists('readDeviceResources', 'object', object);
                            // verify required parameter 'instance' is not null or undefined
                            common_1.assertParamExists('readDeviceResources', 'instance', instance);
                            localVarPath = "/devices/{device_id}/{object}/{instance}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "object" + "}", encodeURIComponent(String(object)))
                                .replace("{" + "instance" + "}", encodeURIComponent(String(instance)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (model !== undefined) {
                                localVarQueryParameter['model'] = model;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Lets a device device join a group
         * @summary Lets a device device join a group
         * @param {string} deviceId Device to update
         * @param {InlineObject1} [groupId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeviceGroup: function (deviceId, groupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('setDeviceGroup', 'deviceId', deviceId);
                            localVarPath = "/devices/{device_id}/set_group"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(groupId, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Stops observation of a resource of a device
         * @summary Stops observation of a resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unobserveDeviceResource: function (deviceId, object, instance, resource, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('unobserveDeviceResource', 'deviceId', deviceId);
                            // verify required parameter 'object' is not null or undefined
                            common_1.assertParamExists('unobserveDeviceResource', 'object', object);
                            // verify required parameter 'instance' is not null or undefined
                            common_1.assertParamExists('unobserveDeviceResource', 'instance', instance);
                            // verify required parameter 'resource' is not null or undefined
                            common_1.assertParamExists('unobserveDeviceResource', 'resource', resource);
                            localVarPath = "/devices/{device_id}/{object}/{instance}/{resource}/unobserve"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "object" + "}", encodeURIComponent(String(object)))
                                .replace("{" + "instance" + "}", encodeURIComponent(String(instance)))
                                .replace("{" + "resource" + "}", encodeURIComponent(String(resource)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Stops observation of resources under an object instance of a device
         * @summary Stops observation of resources under an object instance of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unobserveDeviceResources: function (deviceId, object, instance, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('unobserveDeviceResources', 'deviceId', deviceId);
                            // verify required parameter 'object' is not null or undefined
                            common_1.assertParamExists('unobserveDeviceResources', 'object', object);
                            // verify required parameter 'instance' is not null or undefined
                            common_1.assertParamExists('unobserveDeviceResources', 'instance', instance);
                            localVarPath = "/devices/{device_id}/{object}/{instance}/unobserve"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "object" + "}", encodeURIComponent(String(object)))
                                .replace("{" + "instance" + "}", encodeURIComponent(String(instance)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Lets a device leave from a group
         * @summary Lets a device leave from a group
         * @param {string} deviceId Device to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetDeviceGroup: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('unsetDeviceGroup', 'deviceId', deviceId);
                            localVarPath = "/devices/{device_id}/unset_group"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Write value to a resource of a device
         * @summary Write value to a resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {object} value Value(s) to write to the resource. This value accepts LwM2M basic data types. You have to use the property name &#x60;values&#x60; (instead of &#x60;value&#x60;) with an array value if the resource model is multiple-mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeDeviceResource: function (deviceId, object, instance, resource, value, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('writeDeviceResource', 'deviceId', deviceId);
                            // verify required parameter 'object' is not null or undefined
                            common_1.assertParamExists('writeDeviceResource', 'object', object);
                            // verify required parameter 'instance' is not null or undefined
                            common_1.assertParamExists('writeDeviceResource', 'instance', instance);
                            // verify required parameter 'resource' is not null or undefined
                            common_1.assertParamExists('writeDeviceResource', 'resource', resource);
                            // verify required parameter 'value' is not null or undefined
                            common_1.assertParamExists('writeDeviceResource', 'value', value);
                            localVarPath = "/devices/{device_id}/{object}/{instance}/{resource}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "object" + "}", encodeURIComponent(String(object)))
                                .replace("{" + "instance" + "}", encodeURIComponent(String(instance)))
                                .replace("{" + "resource" + "}", encodeURIComponent(String(resource)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(value, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.DeviceApiAxiosParamCreator = DeviceApiAxiosParamCreator;
/**
 * DeviceApi - functional programming interface
 * @export
 */
var DeviceApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.DeviceApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new Device
         * @summary Creates a new Device
         * @param {Device} device Device to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice: function (device, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createDevice(device, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete Device
         * @summary Delete Device
         * @param {string} deviceId Device to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteDevice(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete device tag
         * @summary Delete device tag
         * @param {string} deviceId Device to update
         * @param {string} tagName Name of tag to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceTag: function (deviceId, tagName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteDeviceTag(deviceId, tagName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Executes a resource of a device
         * @summary Executes a resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {InlineObject} [arg]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeDeviceResource: function (deviceId, object, instance, resource, arg, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.executeDeviceResource(deviceId, object, instance, resource, arg, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a device.
         * @param {string} deviceId Device ID of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromDevice: function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDataFromDevice(deviceId, from, to, sort, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a Device identified by device ID
         * @summary Returns a Device identified by device ID
         * @param {string} deviceId Device ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevice: function (deviceId, model, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDevice(deviceId, model, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of Devices
         * @summary Returns a list of Devices
         * @param {string} [tagName] Tag name
         * @param {string} [tagValue] Tag value
         * @param {string} [tagValueMatchMode] Tag value match mode (exact | prefix)
         * @param {string} [lastEvaluatedKey] ID of the last Device in the previous page
         * @param {number} [limit] Max number of Devices in a response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices: function (tagName, tagValue, tagValueMatchMode, lastEvaluatedKey, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listDevices(tagName, tagValue, tagValueMatchMode, lastEvaluatedKey, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Triggers observation of the specified resource of a device
         * @summary Triggers observation of the specified resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observeDeviceResource: function (deviceId, object, instance, resource, model, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.observeDeviceResource(deviceId, object, instance, resource, model, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Triggers observation of resources under an object instance of a device
         * @summary Triggers observation of resources under an object instance of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observeDeviceResources: function (deviceId, object, instance, model, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.observeDeviceResources(deviceId, object, instance, model, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates device tags
         * @summary Updates device tags
         * @param {string} deviceId Device to update
         * @param {Array<TagUpdateRequest>} tags Array of values for tags to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDeviceTags: function (deviceId, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putDeviceTags(deviceId, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the specified resource of a device
         * @summary Get the specified resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDeviceResource: function (deviceId, object, instance, resource, model, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.readDeviceResource(deviceId, object, instance, resource, model, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get resources under an object instance of a device
         * @summary Get resources under an object instance of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDeviceResources: function (deviceId, object, instance, model, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.readDeviceResources(deviceId, object, instance, model, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Lets a device device join a group
         * @summary Lets a device device join a group
         * @param {string} deviceId Device to update
         * @param {InlineObject1} [groupId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeviceGroup: function (deviceId, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setDeviceGroup(deviceId, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Stops observation of a resource of a device
         * @summary Stops observation of a resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unobserveDeviceResource: function (deviceId, object, instance, resource, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unobserveDeviceResource(deviceId, object, instance, resource, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Stops observation of resources under an object instance of a device
         * @summary Stops observation of resources under an object instance of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unobserveDeviceResources: function (deviceId, object, instance, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unobserveDeviceResources(deviceId, object, instance, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Lets a device leave from a group
         * @summary Lets a device leave from a group
         * @param {string} deviceId Device to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetDeviceGroup: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetDeviceGroup(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Write value to a resource of a device
         * @summary Write value to a resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {object} value Value(s) to write to the resource. This value accepts LwM2M basic data types. You have to use the property name &#x60;values&#x60; (instead of &#x60;value&#x60;) with an array value if the resource model is multiple-mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeDeviceResource: function (deviceId, object, instance, resource, value, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.writeDeviceResource(deviceId, object, instance, resource, value, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.DeviceApiFp = DeviceApiFp;
/**
 * DeviceApi - factory interface
 * @export
 */
var DeviceApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.DeviceApiFp(configuration);
    return {
        /**
         * Creates a new Device
         * @summary Creates a new Device
         * @param {Device} device Device to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice: function (device, options) {
            return localVarFp.createDevice(device, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete Device
         * @summary Delete Device
         * @param {string} deviceId Device to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: function (deviceId, options) {
            return localVarFp.deleteDevice(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete device tag
         * @summary Delete device tag
         * @param {string} deviceId Device to update
         * @param {string} tagName Name of tag to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceTag: function (deviceId, tagName, options) {
            return localVarFp.deleteDeviceTag(deviceId, tagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Executes a resource of a device
         * @summary Executes a resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {InlineObject} [arg]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeDeviceResource: function (deviceId, object, instance, resource, arg, options) {
            return localVarFp.executeDeviceResource(deviceId, object, instance, resource, arg, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of data entries sent from a device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a device.
         * @param {string} deviceId Device ID of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromDevice: function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
            return localVarFp.getDataFromDevice(deviceId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a Device identified by device ID
         * @summary Returns a Device identified by device ID
         * @param {string} deviceId Device ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevice: function (deviceId, model, options) {
            return localVarFp.getDevice(deviceId, model, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of Devices
         * @summary Returns a list of Devices
         * @param {string} [tagName] Tag name
         * @param {string} [tagValue] Tag value
         * @param {string} [tagValueMatchMode] Tag value match mode (exact | prefix)
         * @param {string} [lastEvaluatedKey] ID of the last Device in the previous page
         * @param {number} [limit] Max number of Devices in a response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices: function (tagName, tagValue, tagValueMatchMode, lastEvaluatedKey, limit, options) {
            return localVarFp.listDevices(tagName, tagValue, tagValueMatchMode, lastEvaluatedKey, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Triggers observation of the specified resource of a device
         * @summary Triggers observation of the specified resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observeDeviceResource: function (deviceId, object, instance, resource, model, options) {
            return localVarFp.observeDeviceResource(deviceId, object, instance, resource, model, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Triggers observation of resources under an object instance of a device
         * @summary Triggers observation of resources under an object instance of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        observeDeviceResources: function (deviceId, object, instance, model, options) {
            return localVarFp.observeDeviceResources(deviceId, object, instance, model, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates device tags
         * @summary Updates device tags
         * @param {string} deviceId Device to update
         * @param {Array<TagUpdateRequest>} tags Array of values for tags to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDeviceTags: function (deviceId, tags, options) {
            return localVarFp.putDeviceTags(deviceId, tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the specified resource of a device
         * @summary Get the specified resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDeviceResource: function (deviceId, object, instance, resource, model, options) {
            return localVarFp.readDeviceResource(deviceId, object, instance, resource, model, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get resources under an object instance of a device
         * @summary Get resources under an object instance of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {boolean} [model] Whether or not to add model information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDeviceResources: function (deviceId, object, instance, model, options) {
            return localVarFp.readDeviceResources(deviceId, object, instance, model, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lets a device device join a group
         * @summary Lets a device device join a group
         * @param {string} deviceId Device to update
         * @param {InlineObject1} [groupId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeviceGroup: function (deviceId, groupId, options) {
            return localVarFp.setDeviceGroup(deviceId, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Stops observation of a resource of a device
         * @summary Stops observation of a resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unobserveDeviceResource: function (deviceId, object, instance, resource, options) {
            return localVarFp.unobserveDeviceResource(deviceId, object, instance, resource, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Stops observation of resources under an object instance of a device
         * @summary Stops observation of resources under an object instance of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unobserveDeviceResources: function (deviceId, object, instance, options) {
            return localVarFp.unobserveDeviceResources(deviceId, object, instance, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lets a device leave from a group
         * @summary Lets a device leave from a group
         * @param {string} deviceId Device to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetDeviceGroup: function (deviceId, options) {
            return localVarFp.unsetDeviceGroup(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Write value to a resource of a device
         * @summary Write value to a resource of a device
         * @param {string} deviceId Target device
         * @param {string} object Object ID
         * @param {string} instance Instance ID
         * @param {string} resource Resource ID
         * @param {object} value Value(s) to write to the resource. This value accepts LwM2M basic data types. You have to use the property name &#x60;values&#x60; (instead of &#x60;value&#x60;) with an array value if the resource model is multiple-mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeDeviceResource: function (deviceId, object, instance, resource, value, options) {
            return localVarFp.writeDeviceResource(deviceId, object, instance, resource, value, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.DeviceApiFactory = DeviceApiFactory;
/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
var DeviceApi = /** @class */ (function (_super) {
    __extends(DeviceApi, _super);
    function DeviceApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new Device
     * @summary Creates a new Device
     * @param {Device} device Device to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.createDevice = function (device, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).createDevice(device, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete Device
     * @summary Delete Device
     * @param {string} deviceId Device to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deleteDevice = function (deviceId, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).deleteDevice(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete device tag
     * @summary Delete device tag
     * @param {string} deviceId Device to update
     * @param {string} tagName Name of tag to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deleteDeviceTag = function (deviceId, tagName, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).deleteDeviceTag(deviceId, tagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Executes a resource of a device
     * @summary Executes a resource of a device
     * @param {string} deviceId Target device
     * @param {string} object Object ID
     * @param {string} instance Instance ID
     * @param {string} resource Resource ID
     * @param {InlineObject} [arg]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.executeDeviceResource = function (deviceId, object, instance, resource, arg, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).executeDeviceResource(deviceId, object, instance, resource, arg, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of data entries sent from a device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary Get data sent from a device.
     * @param {string} deviceId Device ID of the target subscriber that generated data entries.
     * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
     * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
     * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
     * @param {number} [limit] Maximum number of data entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.getDataFromDevice = function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).getDataFromDevice(deviceId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a Device identified by device ID
     * @summary Returns a Device identified by device ID
     * @param {string} deviceId Device ID
     * @param {boolean} [model] Whether or not to add model information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.getDevice = function (deviceId, model, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).getDevice(deviceId, model, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of Devices
     * @summary Returns a list of Devices
     * @param {string} [tagName] Tag name
     * @param {string} [tagValue] Tag value
     * @param {string} [tagValueMatchMode] Tag value match mode (exact | prefix)
     * @param {string} [lastEvaluatedKey] ID of the last Device in the previous page
     * @param {number} [limit] Max number of Devices in a response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.listDevices = function (tagName, tagValue, tagValueMatchMode, lastEvaluatedKey, limit, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).listDevices(tagName, tagValue, tagValueMatchMode, lastEvaluatedKey, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Triggers observation of the specified resource of a device
     * @summary Triggers observation of the specified resource of a device
     * @param {string} deviceId Target device
     * @param {string} object Object ID
     * @param {string} instance Instance ID
     * @param {string} resource Resource ID
     * @param {boolean} [model] Whether or not to add model information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.observeDeviceResource = function (deviceId, object, instance, resource, model, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).observeDeviceResource(deviceId, object, instance, resource, model, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Triggers observation of resources under an object instance of a device
     * @summary Triggers observation of resources under an object instance of a device
     * @param {string} deviceId Target device
     * @param {string} object Object ID
     * @param {string} instance Instance ID
     * @param {boolean} [model] Whether or not to add model information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.observeDeviceResources = function (deviceId, object, instance, model, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).observeDeviceResources(deviceId, object, instance, model, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates device tags
     * @summary Updates device tags
     * @param {string} deviceId Device to update
     * @param {Array<TagUpdateRequest>} tags Array of values for tags to be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.putDeviceTags = function (deviceId, tags, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).putDeviceTags(deviceId, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the specified resource of a device
     * @summary Get the specified resource of a device
     * @param {string} deviceId Target device
     * @param {string} object Object ID
     * @param {string} instance Instance ID
     * @param {string} resource Resource ID
     * @param {boolean} [model] Whether or not to add model information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.readDeviceResource = function (deviceId, object, instance, resource, model, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).readDeviceResource(deviceId, object, instance, resource, model, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get resources under an object instance of a device
     * @summary Get resources under an object instance of a device
     * @param {string} deviceId Target device
     * @param {string} object Object ID
     * @param {string} instance Instance ID
     * @param {boolean} [model] Whether or not to add model information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.readDeviceResources = function (deviceId, object, instance, model, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).readDeviceResources(deviceId, object, instance, model, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lets a device device join a group
     * @summary Lets a device device join a group
     * @param {string} deviceId Device to update
     * @param {InlineObject1} [groupId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.setDeviceGroup = function (deviceId, groupId, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).setDeviceGroup(deviceId, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Stops observation of a resource of a device
     * @summary Stops observation of a resource of a device
     * @param {string} deviceId Target device
     * @param {string} object Object ID
     * @param {string} instance Instance ID
     * @param {string} resource Resource ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.unobserveDeviceResource = function (deviceId, object, instance, resource, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).unobserveDeviceResource(deviceId, object, instance, resource, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Stops observation of resources under an object instance of a device
     * @summary Stops observation of resources under an object instance of a device
     * @param {string} deviceId Target device
     * @param {string} object Object ID
     * @param {string} instance Instance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.unobserveDeviceResources = function (deviceId, object, instance, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).unobserveDeviceResources(deviceId, object, instance, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lets a device leave from a group
     * @summary Lets a device leave from a group
     * @param {string} deviceId Device to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.unsetDeviceGroup = function (deviceId, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).unsetDeviceGroup(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Write value to a resource of a device
     * @summary Write value to a resource of a device
     * @param {string} deviceId Target device
     * @param {string} object Object ID
     * @param {string} instance Instance ID
     * @param {string} resource Resource ID
     * @param {object} value Value(s) to write to the resource. This value accepts LwM2M basic data types. You have to use the property name &#x60;values&#x60; (instead of &#x60;value&#x60;) with an array value if the resource model is multiple-mode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.writeDeviceResource = function (deviceId, object, instance, resource, value, options) {
        var _this = this;
        return exports.DeviceApiFp(this.configuration).writeDeviceResource(deviceId, object, instance, resource, value, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DeviceApi;
}(base_1.BaseAPI));
exports.DeviceApi = DeviceApi;
/**
 * DeviceObjectModelApi - axios parameter creator
 * @export
 */
var DeviceObjectModelApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new device object model
         * @summary Creates a new device object model
         * @param {DeviceObjectModel} objectModelDefinition Device object model definition in either XML or JSON format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceObjectModel: function (objectModelDefinition, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'objectModelDefinition' is not null or undefined
                            common_1.assertParamExists('createDeviceObjectModel', 'objectModelDefinition', objectModelDefinition);
                            localVarPath = "/device_object_models";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(objectModelDefinition, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a device object model
         * @summary Deletes a device object model
         * @param {string} modelId Device object model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceObjectModel: function (modelId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'modelId' is not null or undefined
                            common_1.assertParamExists('deleteDeviceObjectModel', 'modelId', modelId);
                            localVarPath = "/device_object_models/{model_id}"
                                .replace("{" + "model_id" + "}", encodeURIComponent(String(modelId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Gets a device object model
         * @summary Gets a device object model
         * @param {string} modelId Device object model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceObjectModel: function (modelId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'modelId' is not null or undefined
                            common_1.assertParamExists('getDeviceObjectModel', 'modelId', modelId);
                            localVarPath = "/device_object_models/{model_id}"
                                .replace("{" + "model_id" + "}", encodeURIComponent(String(modelId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of device object models
         * @summary Returns a list of device object models
         * @param {string} [lastEvaluatedKey] ID of the last device object model in the previous page
         * @param {number} [limit] Max number of device object models in a response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeviceObjectModels: function (lastEvaluatedKey, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/device_object_models";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets scope for a device object model
         * @summary Sets scope for a device object model
         * @param {string} modelId Target device object model ID
         * @param {SetDeviceObjectModelScopeRequest} scope Scope value that is applied to the target device object model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeviceObjectModelScope: function (modelId, scope, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'modelId' is not null or undefined
                            common_1.assertParamExists('setDeviceObjectModelScope', 'modelId', modelId);
                            // verify required parameter 'scope' is not null or undefined
                            common_1.assertParamExists('setDeviceObjectModelScope', 'scope', scope);
                            localVarPath = "/device_object_models/{model_id}/set_scope"
                                .replace("{" + "model_id" + "}", encodeURIComponent(String(modelId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(scope, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates a device object model
         * @summary Updates a device object model
         * @param {string} modelId Device object model ID
         * @param {DeviceObjectModel} objectModelDefinition Device object model definition in either XML or JSON format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceObjectModel: function (modelId, objectModelDefinition, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'modelId' is not null or undefined
                            common_1.assertParamExists('updateDeviceObjectModel', 'modelId', modelId);
                            // verify required parameter 'objectModelDefinition' is not null or undefined
                            common_1.assertParamExists('updateDeviceObjectModel', 'objectModelDefinition', objectModelDefinition);
                            localVarPath = "/device_object_models/{model_id}"
                                .replace("{" + "model_id" + "}", encodeURIComponent(String(modelId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(objectModelDefinition, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.DeviceObjectModelApiAxiosParamCreator = DeviceObjectModelApiAxiosParamCreator;
/**
 * DeviceObjectModelApi - functional programming interface
 * @export
 */
var DeviceObjectModelApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.DeviceObjectModelApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new device object model
         * @summary Creates a new device object model
         * @param {DeviceObjectModel} objectModelDefinition Device object model definition in either XML or JSON format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceObjectModel: function (objectModelDefinition, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createDeviceObjectModel(objectModelDefinition, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a device object model
         * @summary Deletes a device object model
         * @param {string} modelId Device object model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceObjectModel: function (modelId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteDeviceObjectModel(modelId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a device object model
         * @summary Gets a device object model
         * @param {string} modelId Device object model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceObjectModel: function (modelId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDeviceObjectModel(modelId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of device object models
         * @summary Returns a list of device object models
         * @param {string} [lastEvaluatedKey] ID of the last device object model in the previous page
         * @param {number} [limit] Max number of device object models in a response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeviceObjectModels: function (lastEvaluatedKey, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listDeviceObjectModels(lastEvaluatedKey, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets scope for a device object model
         * @summary Sets scope for a device object model
         * @param {string} modelId Target device object model ID
         * @param {SetDeviceObjectModelScopeRequest} scope Scope value that is applied to the target device object model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeviceObjectModelScope: function (modelId, scope, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setDeviceObjectModelScope(modelId, scope, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates a device object model
         * @summary Updates a device object model
         * @param {string} modelId Device object model ID
         * @param {DeviceObjectModel} objectModelDefinition Device object model definition in either XML or JSON format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceObjectModel: function (modelId, objectModelDefinition, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateDeviceObjectModel(modelId, objectModelDefinition, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.DeviceObjectModelApiFp = DeviceObjectModelApiFp;
/**
 * DeviceObjectModelApi - factory interface
 * @export
 */
var DeviceObjectModelApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.DeviceObjectModelApiFp(configuration);
    return {
        /**
         * Creates a new device object model
         * @summary Creates a new device object model
         * @param {DeviceObjectModel} objectModelDefinition Device object model definition in either XML or JSON format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceObjectModel: function (objectModelDefinition, options) {
            return localVarFp.createDeviceObjectModel(objectModelDefinition, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a device object model
         * @summary Deletes a device object model
         * @param {string} modelId Device object model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceObjectModel: function (modelId, options) {
            return localVarFp.deleteDeviceObjectModel(modelId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a device object model
         * @summary Gets a device object model
         * @param {string} modelId Device object model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceObjectModel: function (modelId, options) {
            return localVarFp.getDeviceObjectModel(modelId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of device object models
         * @summary Returns a list of device object models
         * @param {string} [lastEvaluatedKey] ID of the last device object model in the previous page
         * @param {number} [limit] Max number of device object models in a response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeviceObjectModels: function (lastEvaluatedKey, limit, options) {
            return localVarFp.listDeviceObjectModels(lastEvaluatedKey, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets scope for a device object model
         * @summary Sets scope for a device object model
         * @param {string} modelId Target device object model ID
         * @param {SetDeviceObjectModelScopeRequest} scope Scope value that is applied to the target device object model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeviceObjectModelScope: function (modelId, scope, options) {
            return localVarFp.setDeviceObjectModelScope(modelId, scope, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a device object model
         * @summary Updates a device object model
         * @param {string} modelId Device object model ID
         * @param {DeviceObjectModel} objectModelDefinition Device object model definition in either XML or JSON format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceObjectModel: function (modelId, objectModelDefinition, options) {
            return localVarFp.updateDeviceObjectModel(modelId, objectModelDefinition, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.DeviceObjectModelApiFactory = DeviceObjectModelApiFactory;
/**
 * DeviceObjectModelApi - object-oriented interface
 * @export
 * @class DeviceObjectModelApi
 * @extends {BaseAPI}
 */
var DeviceObjectModelApi = /** @class */ (function (_super) {
    __extends(DeviceObjectModelApi, _super);
    function DeviceObjectModelApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new device object model
     * @summary Creates a new device object model
     * @param {DeviceObjectModel} objectModelDefinition Device object model definition in either XML or JSON format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceObjectModelApi
     */
    DeviceObjectModelApi.prototype.createDeviceObjectModel = function (objectModelDefinition, options) {
        var _this = this;
        return exports.DeviceObjectModelApiFp(this.configuration).createDeviceObjectModel(objectModelDefinition, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a device object model
     * @summary Deletes a device object model
     * @param {string} modelId Device object model ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceObjectModelApi
     */
    DeviceObjectModelApi.prototype.deleteDeviceObjectModel = function (modelId, options) {
        var _this = this;
        return exports.DeviceObjectModelApiFp(this.configuration).deleteDeviceObjectModel(modelId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a device object model
     * @summary Gets a device object model
     * @param {string} modelId Device object model ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceObjectModelApi
     */
    DeviceObjectModelApi.prototype.getDeviceObjectModel = function (modelId, options) {
        var _this = this;
        return exports.DeviceObjectModelApiFp(this.configuration).getDeviceObjectModel(modelId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of device object models
     * @summary Returns a list of device object models
     * @param {string} [lastEvaluatedKey] ID of the last device object model in the previous page
     * @param {number} [limit] Max number of device object models in a response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceObjectModelApi
     */
    DeviceObjectModelApi.prototype.listDeviceObjectModels = function (lastEvaluatedKey, limit, options) {
        var _this = this;
        return exports.DeviceObjectModelApiFp(this.configuration).listDeviceObjectModels(lastEvaluatedKey, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets scope for a device object model
     * @summary Sets scope for a device object model
     * @param {string} modelId Target device object model ID
     * @param {SetDeviceObjectModelScopeRequest} scope Scope value that is applied to the target device object model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceObjectModelApi
     */
    DeviceObjectModelApi.prototype.setDeviceObjectModelScope = function (modelId, scope, options) {
        var _this = this;
        return exports.DeviceObjectModelApiFp(this.configuration).setDeviceObjectModelScope(modelId, scope, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a device object model
     * @summary Updates a device object model
     * @param {string} modelId Device object model ID
     * @param {DeviceObjectModel} objectModelDefinition Device object model definition in either XML or JSON format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceObjectModelApi
     */
    DeviceObjectModelApi.prototype.updateDeviceObjectModel = function (modelId, objectModelDefinition, options) {
        var _this = this;
        return exports.DeviceObjectModelApiFp(this.configuration).updateDeviceObjectModel(modelId, objectModelDefinition, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DeviceObjectModelApi;
}(base_1.BaseAPI));
exports.DeviceObjectModelApi = DeviceObjectModelApi;
/**
 * EmailApi - axios parameter creator
 * @export
 */
var EmailApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes an email address.
         * @summary Delete email address
         * @param {string} operatorId operator_id
         * @param {string} emailId email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmail: function (operatorId, emailId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('deleteEmail', 'operatorId', operatorId);
                            // verify required parameter 'emailId' is not null or undefined
                            common_1.assertParamExists('deleteEmail', 'emailId', emailId);
                            localVarPath = "/operators/{operator_id}/emails/{email_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "email_id" + "}", encodeURIComponent(String(emailId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns an email address.
         * @summary Get email address
         * @param {string} operatorId operator_id
         * @param {string} emailId email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail: function (operatorId, emailId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getEmail', 'operatorId', operatorId);
                            // verify required parameter 'emailId' is not null or undefined
                            common_1.assertParamExists('getEmail', 'emailId', emailId);
                            localVarPath = "/operators/{operator_id}/emails/{email_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "email_id" + "}", encodeURIComponent(String(emailId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sends an email with a one-time token for adding an e-mail address.
         * @summary Issue a token to add an email address
         * @param {IssueAddEmailTokenRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueAddEmailToken: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('issueAddEmailToken', 'request', request);
                            localVarPath = "/operators/add_email_token/issue";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of email addresses.
         * @summary List email addresses
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmails: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('listEmails', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/emails"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Verifies the token for adding email address.
         * @summary Verify a token to add an email address
         * @param {VerifyAddEmailTokenRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAddEmailToken: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    common_1.assertParamExists('verifyAddEmailToken', 'request', request);
                    localVarPath = "/operators/add_email_token/verify";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        }
    };
};
exports.EmailApiAxiosParamCreator = EmailApiAxiosParamCreator;
/**
 * EmailApi - functional programming interface
 * @export
 */
var EmailApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EmailApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes an email address.
         * @summary Delete email address
         * @param {string} operatorId operator_id
         * @param {string} emailId email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmail: function (operatorId, emailId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEmail(operatorId, emailId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns an email address.
         * @summary Get email address
         * @param {string} operatorId operator_id
         * @param {string} emailId email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail: function (operatorId, emailId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEmail(operatorId, emailId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sends an email with a one-time token for adding an e-mail address.
         * @summary Issue a token to add an email address
         * @param {IssueAddEmailTokenRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueAddEmailToken: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.issueAddEmailToken(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of email addresses.
         * @summary List email addresses
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmails: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listEmails(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Verifies the token for adding email address.
         * @summary Verify a token to add an email address
         * @param {VerifyAddEmailTokenRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAddEmailToken: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.verifyAddEmailToken(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.EmailApiFp = EmailApiFp;
/**
 * EmailApi - factory interface
 * @export
 */
var EmailApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EmailApiFp(configuration);
    return {
        /**
         * Deletes an email address.
         * @summary Delete email address
         * @param {string} operatorId operator_id
         * @param {string} emailId email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmail: function (operatorId, emailId, options) {
            return localVarFp.deleteEmail(operatorId, emailId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns an email address.
         * @summary Get email address
         * @param {string} operatorId operator_id
         * @param {string} emailId email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail: function (operatorId, emailId, options) {
            return localVarFp.getEmail(operatorId, emailId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sends an email with a one-time token for adding an e-mail address.
         * @summary Issue a token to add an email address
         * @param {IssueAddEmailTokenRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueAddEmailToken: function (request, options) {
            return localVarFp.issueAddEmailToken(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of email addresses.
         * @summary List email addresses
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmails: function (operatorId, options) {
            return localVarFp.listEmails(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Verifies the token for adding email address.
         * @summary Verify a token to add an email address
         * @param {VerifyAddEmailTokenRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAddEmailToken: function (request, options) {
            return localVarFp.verifyAddEmailToken(request, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.EmailApiFactory = EmailApiFactory;
/**
 * EmailApi - object-oriented interface
 * @export
 * @class EmailApi
 * @extends {BaseAPI}
 */
var EmailApi = /** @class */ (function (_super) {
    __extends(EmailApi, _super);
    function EmailApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes an email address.
     * @summary Delete email address
     * @param {string} operatorId operator_id
     * @param {string} emailId email_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    EmailApi.prototype.deleteEmail = function (operatorId, emailId, options) {
        var _this = this;
        return exports.EmailApiFp(this.configuration).deleteEmail(operatorId, emailId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns an email address.
     * @summary Get email address
     * @param {string} operatorId operator_id
     * @param {string} emailId email_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    EmailApi.prototype.getEmail = function (operatorId, emailId, options) {
        var _this = this;
        return exports.EmailApiFp(this.configuration).getEmail(operatorId, emailId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sends an email with a one-time token for adding an e-mail address.
     * @summary Issue a token to add an email address
     * @param {IssueAddEmailTokenRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    EmailApi.prototype.issueAddEmailToken = function (request, options) {
        var _this = this;
        return exports.EmailApiFp(this.configuration).issueAddEmailToken(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of email addresses.
     * @summary List email addresses
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    EmailApi.prototype.listEmails = function (operatorId, options) {
        var _this = this;
        return exports.EmailApiFp(this.configuration).listEmails(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Verifies the token for adding email address.
     * @summary Verify a token to add an email address
     * @param {VerifyAddEmailTokenRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    EmailApi.prototype.verifyAddEmailToken = function (request, options) {
        var _this = this;
        return exports.EmailApiFp(this.configuration).verifyAddEmailToken(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EmailApi;
}(base_1.BaseAPI));
exports.EmailApi = EmailApi;
/**
 * EventHandlerApi - axios parameter creator
 * @export
 */
var EventHandlerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new event handler. Please see also https://developers.soracom.io/en/docs/air/event-handler/
         * @summary Create Event Handler.
         * @param {CreateEventHandlerRequest} req event handler settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventHandler: function (req, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'req' is not null or undefined
                            common_1.assertParamExists('createEventHandler', 'req', req);
                            localVarPath = "/event_handlers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(req, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the specified event handler.
         * @summary Delete Event Handler.
         * @param {string} handlerId handler ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventHandler: function (handlerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'handlerId' is not null or undefined
                            common_1.assertParamExists('deleteEventHandler', 'handlerId', handlerId);
                            localVarPath = "/event_handlers/{handler_id}"
                                .replace("{" + "handler_id" + "}", encodeURIComponent(String(handlerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the setting for ignoring the specified event handler of the specified IMSI.
         * @summary Delete Ignore Event Handler.
         * @param {string} imsi imsi
         * @param {string} handlerId handler_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIgnoreEventHandler: function (imsi, handlerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('deleteIgnoreEventHandler', 'imsi', imsi);
                            // verify required parameter 'handlerId' is not null or undefined
                            common_1.assertParamExists('deleteIgnoreEventHandler', 'handlerId', handlerId);
                            localVarPath = "/event_handlers/{handler_id}/subscribers/{imsi}/ignore"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)))
                                .replace("{" + "handler_id" + "}", encodeURIComponent(String(handlerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns information about the specified event handler.
         * @summary Get Event Handler.
         * @param {string} handlerId handler ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventHandler: function (handlerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'handlerId' is not null or undefined
                            common_1.assertParamExists('getEventHandler', 'handlerId', handlerId);
                            localVarPath = "/event_handlers/{handler_id}"
                                .replace("{" + "handler_id" + "}", encodeURIComponent(String(handlerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of event handlers.
         * @summary List Event Handlers.
         * @param {'operator' | 'imsi' | 'sim' | 'group'} [target] target
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventHandlers: function (target, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/event_handlers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (target !== undefined) {
                                localVarQueryParameter['target'] = target;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of event handlers related to the specified IMSI.
         * @summary List Event Handlers related to Subscriber.
         * @param {string} imsi imsi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventHandlersBySubscriber: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('listEventHandlersBySubscriber', 'imsi', imsi);
                            localVarPath = "/event_handlers/subscribers/{imsi}"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Adds a setting for ignoring the specified event handler of the specified IMSI.
         * @summary Ignore Event Handler.
         * @param {string} imsi imsi
         * @param {string} handlerId handler_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIgnoreEventHandler: function (imsi, handlerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('setIgnoreEventHandler', 'imsi', imsi);
                            // verify required parameter 'handlerId' is not null or undefined
                            common_1.assertParamExists('setIgnoreEventHandler', 'handlerId', handlerId);
                            localVarPath = "/event_handlers/{handler_id}/subscribers/{imsi}/ignore"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)))
                                .replace("{" + "handler_id" + "}", encodeURIComponent(String(handlerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates the specified event handler. Please see also https://developers.soracom.io/en/docs/air/event-handler/
         * @summary Update Event Handler.
         * @param {string} handlerId handler ID
         * @param {CreateEventHandlerRequest} eventHandlerModel event handler settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventHandler: function (handlerId, eventHandlerModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'handlerId' is not null or undefined
                            common_1.assertParamExists('updateEventHandler', 'handlerId', handlerId);
                            // verify required parameter 'eventHandlerModel' is not null or undefined
                            common_1.assertParamExists('updateEventHandler', 'eventHandlerModel', eventHandlerModel);
                            localVarPath = "/event_handlers/{handler_id}"
                                .replace("{" + "handler_id" + "}", encodeURIComponent(String(handlerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(eventHandlerModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.EventHandlerApiAxiosParamCreator = EventHandlerApiAxiosParamCreator;
/**
 * EventHandlerApi - functional programming interface
 * @export
 */
var EventHandlerApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EventHandlerApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new event handler. Please see also https://developers.soracom.io/en/docs/air/event-handler/
         * @summary Create Event Handler.
         * @param {CreateEventHandlerRequest} req event handler settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventHandler: function (req, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEventHandler(req, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the specified event handler.
         * @summary Delete Event Handler.
         * @param {string} handlerId handler ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventHandler: function (handlerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEventHandler(handlerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the setting for ignoring the specified event handler of the specified IMSI.
         * @summary Delete Ignore Event Handler.
         * @param {string} imsi imsi
         * @param {string} handlerId handler_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIgnoreEventHandler: function (imsi, handlerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteIgnoreEventHandler(imsi, handlerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns information about the specified event handler.
         * @summary Get Event Handler.
         * @param {string} handlerId handler ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventHandler: function (handlerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEventHandler(handlerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of event handlers.
         * @summary List Event Handlers.
         * @param {'operator' | 'imsi' | 'sim' | 'group'} [target] target
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventHandlers: function (target, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listEventHandlers(target, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of event handlers related to the specified IMSI.
         * @summary List Event Handlers related to Subscriber.
         * @param {string} imsi imsi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventHandlersBySubscriber: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listEventHandlersBySubscriber(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Adds a setting for ignoring the specified event handler of the specified IMSI.
         * @summary Ignore Event Handler.
         * @param {string} imsi imsi
         * @param {string} handlerId handler_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIgnoreEventHandler: function (imsi, handlerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setIgnoreEventHandler(imsi, handlerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the specified event handler. Please see also https://developers.soracom.io/en/docs/air/event-handler/
         * @summary Update Event Handler.
         * @param {string} handlerId handler ID
         * @param {CreateEventHandlerRequest} eventHandlerModel event handler settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventHandler: function (handlerId, eventHandlerModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEventHandler(handlerId, eventHandlerModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.EventHandlerApiFp = EventHandlerApiFp;
/**
 * EventHandlerApi - factory interface
 * @export
 */
var EventHandlerApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EventHandlerApiFp(configuration);
    return {
        /**
         * Creates a new event handler. Please see also https://developers.soracom.io/en/docs/air/event-handler/
         * @summary Create Event Handler.
         * @param {CreateEventHandlerRequest} req event handler settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventHandler: function (req, options) {
            return localVarFp.createEventHandler(req, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the specified event handler.
         * @summary Delete Event Handler.
         * @param {string} handlerId handler ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventHandler: function (handlerId, options) {
            return localVarFp.deleteEventHandler(handlerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the setting for ignoring the specified event handler of the specified IMSI.
         * @summary Delete Ignore Event Handler.
         * @param {string} imsi imsi
         * @param {string} handlerId handler_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIgnoreEventHandler: function (imsi, handlerId, options) {
            return localVarFp.deleteIgnoreEventHandler(imsi, handlerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns information about the specified event handler.
         * @summary Get Event Handler.
         * @param {string} handlerId handler ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventHandler: function (handlerId, options) {
            return localVarFp.getEventHandler(handlerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of event handlers.
         * @summary List Event Handlers.
         * @param {'operator' | 'imsi' | 'sim' | 'group'} [target] target
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventHandlers: function (target, options) {
            return localVarFp.listEventHandlers(target, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of event handlers related to the specified IMSI.
         * @summary List Event Handlers related to Subscriber.
         * @param {string} imsi imsi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventHandlersBySubscriber: function (imsi, options) {
            return localVarFp.listEventHandlersBySubscriber(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Adds a setting for ignoring the specified event handler of the specified IMSI.
         * @summary Ignore Event Handler.
         * @param {string} imsi imsi
         * @param {string} handlerId handler_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIgnoreEventHandler: function (imsi, handlerId, options) {
            return localVarFp.setIgnoreEventHandler(imsi, handlerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the specified event handler. Please see also https://developers.soracom.io/en/docs/air/event-handler/
         * @summary Update Event Handler.
         * @param {string} handlerId handler ID
         * @param {CreateEventHandlerRequest} eventHandlerModel event handler settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventHandler: function (handlerId, eventHandlerModel, options) {
            return localVarFp.updateEventHandler(handlerId, eventHandlerModel, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.EventHandlerApiFactory = EventHandlerApiFactory;
/**
 * EventHandlerApi - object-oriented interface
 * @export
 * @class EventHandlerApi
 * @extends {BaseAPI}
 */
var EventHandlerApi = /** @class */ (function (_super) {
    __extends(EventHandlerApi, _super);
    function EventHandlerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new event handler. Please see also https://developers.soracom.io/en/docs/air/event-handler/
     * @summary Create Event Handler.
     * @param {CreateEventHandlerRequest} req event handler settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventHandlerApi
     */
    EventHandlerApi.prototype.createEventHandler = function (req, options) {
        var _this = this;
        return exports.EventHandlerApiFp(this.configuration).createEventHandler(req, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the specified event handler.
     * @summary Delete Event Handler.
     * @param {string} handlerId handler ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventHandlerApi
     */
    EventHandlerApi.prototype.deleteEventHandler = function (handlerId, options) {
        var _this = this;
        return exports.EventHandlerApiFp(this.configuration).deleteEventHandler(handlerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the setting for ignoring the specified event handler of the specified IMSI.
     * @summary Delete Ignore Event Handler.
     * @param {string} imsi imsi
     * @param {string} handlerId handler_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventHandlerApi
     */
    EventHandlerApi.prototype.deleteIgnoreEventHandler = function (imsi, handlerId, options) {
        var _this = this;
        return exports.EventHandlerApiFp(this.configuration).deleteIgnoreEventHandler(imsi, handlerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns information about the specified event handler.
     * @summary Get Event Handler.
     * @param {string} handlerId handler ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventHandlerApi
     */
    EventHandlerApi.prototype.getEventHandler = function (handlerId, options) {
        var _this = this;
        return exports.EventHandlerApiFp(this.configuration).getEventHandler(handlerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of event handlers.
     * @summary List Event Handlers.
     * @param {'operator' | 'imsi' | 'sim' | 'group'} [target] target
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventHandlerApi
     */
    EventHandlerApi.prototype.listEventHandlers = function (target, options) {
        var _this = this;
        return exports.EventHandlerApiFp(this.configuration).listEventHandlers(target, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of event handlers related to the specified IMSI.
     * @summary List Event Handlers related to Subscriber.
     * @param {string} imsi imsi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventHandlerApi
     */
    EventHandlerApi.prototype.listEventHandlersBySubscriber = function (imsi, options) {
        var _this = this;
        return exports.EventHandlerApiFp(this.configuration).listEventHandlersBySubscriber(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Adds a setting for ignoring the specified event handler of the specified IMSI.
     * @summary Ignore Event Handler.
     * @param {string} imsi imsi
     * @param {string} handlerId handler_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventHandlerApi
     */
    EventHandlerApi.prototype.setIgnoreEventHandler = function (imsi, handlerId, options) {
        var _this = this;
        return exports.EventHandlerApiFp(this.configuration).setIgnoreEventHandler(imsi, handlerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the specified event handler. Please see also https://developers.soracom.io/en/docs/air/event-handler/
     * @summary Update Event Handler.
     * @param {string} handlerId handler ID
     * @param {CreateEventHandlerRequest} eventHandlerModel event handler settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventHandlerApi
     */
    EventHandlerApi.prototype.updateEventHandler = function (handlerId, eventHandlerModel, options) {
        var _this = this;
        return exports.EventHandlerApiFp(this.configuration).updateEventHandler(handlerId, eventHandlerModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EventHandlerApi;
}(base_1.BaseAPI));
exports.EventHandlerApi = EventHandlerApi;
/**
 * FileEntryApi - axios parameter creator
 * @export
 */
var FileEntryApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes the specified directory in the scope. Only `private` scope is allowed for the operation.
         * @summary Delete specified directory in the scope.
         * @param {'private'} scope Scope of the request
         * @param {string} path Target directory path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDirectory: function (scope, path, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'scope' is not null or undefined
                            common_1.assertParamExists('deleteDirectory', 'scope', scope);
                            // verify required parameter 'path' is not null or undefined
                            common_1.assertParamExists('deleteDirectory', 'path', path);
                            localVarPath = "/files/{scope}/{path}/"
                                .replace("{" + "scope" + "}", encodeURIComponent(String(scope)))
                                .replace("{" + "path" + "}", encodeURIComponent(String(path)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the specified file in the scope. Only `private` scope is allowed for the operation.
         * @summary Delete specified file in the scope.
         * @param {'private'} scope Scope of the request
         * @param {string} path Target path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: function (scope, path, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'scope' is not null or undefined
                            common_1.assertParamExists('deleteFile', 'scope', scope);
                            // verify required parameter 'path' is not null or undefined
                            common_1.assertParamExists('deleteFile', 'path', path);
                            localVarPath = "/files/{scope}/{path}"
                                .replace("{" + "scope" + "}", encodeURIComponent(String(scope)))
                                .replace("{" + "path" + "}", encodeURIComponent(String(path)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of file entries which beginnings of their file paths are matched with the `prefix` query string in the ascending sorted UTF-8 bytes order of their file paths. An empty list is returned if the prefix does not match with any paths of file entries.
         * @summary Find files with prefix query parameter in the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} prefix Prefix to match with file path
         * @param {string} [limit] Num of entries
         * @param {string} [lastEvaluatedKey] The filePath of the last file entry retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFiles: function (scope, prefix, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'scope' is not null or undefined
                            common_1.assertParamExists('findFiles', 'scope', scope);
                            // verify required parameter 'prefix' is not null or undefined
                            common_1.assertParamExists('findFiles', 'prefix', prefix);
                            localVarPath = "/files";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (scope !== undefined) {
                                localVarQueryParameter['scope'] = scope;
                            }
                            if (prefix !== undefined) {
                                localVarQueryParameter['prefix'] = prefix;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Redirects the client to URL for the link to download the file specified by the scope and the path. By issuing HTTP GET request to the link returned in the response, the client is able to download the file.
         * @summary Download file specified by the path and the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} path Target path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: function (scope, path, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'scope' is not null or undefined
                            common_1.assertParamExists('getFile', 'scope', scope);
                            // verify required parameter 'path' is not null or undefined
                            common_1.assertParamExists('getFile', 'path', path);
                            localVarPath = "/files/{scope}/{path}"
                                .replace("{" + "scope" + "}", encodeURIComponent(String(scope)))
                                .replace("{" + "path" + "}", encodeURIComponent(String(path)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Gets metadata of the file specified by the path and the scope.
         * @summary Get the metadata of the file specified by the path and the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} path Target path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileMetadata: function (scope, path, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'scope' is not null or undefined
                            common_1.assertParamExists('getFileMetadata', 'scope', scope);
                            // verify required parameter 'path' is not null or undefined
                            common_1.assertParamExists('getFileMetadata', 'path', path);
                            localVarPath = "/files/{scope}/{path}"
                                .replace("{" + "scope" + "}", encodeURIComponent(String(scope)))
                                .replace("{" + "path" + "}", encodeURIComponent(String(path)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of file entries under the path in the scope. This operation works only for directories and an error will be retrurned if the file entry corresponds to the given path is not a directory. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List files and directories on the path in the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} path Target path
         * @param {string} [limit] Num of entries
         * @param {string} [lastEvaluatedKey] The filename  of the last file entry retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles: function (scope, path, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'scope' is not null or undefined
                            common_1.assertParamExists('listFiles', 'scope', scope);
                            // verify required parameter 'path' is not null or undefined
                            common_1.assertParamExists('listFiles', 'path', path);
                            localVarPath = "/files/{scope}/{path}/"
                                .replace("{" + "scope" + "}", encodeURIComponent(String(scope)))
                                .replace("{" + "path" + "}", encodeURIComponent(String(path)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Uploads the file to the specified path in the scope. Only `private` scope is allowed for the operation.
         * @summary Upload file to the path in the scope.
         * @param {'private'} scope Scope of the request
         * @param {string} path Target path
         * @param {any} body Content of the file to upload
         * @param {string} [contentType] Content type of the file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFile: function (scope, path, body, contentType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'scope' is not null or undefined
                            common_1.assertParamExists('putFile', 'scope', scope);
                            // verify required parameter 'path' is not null or undefined
                            common_1.assertParamExists('putFile', 'path', path);
                            // verify required parameter 'body' is not null or undefined
                            common_1.assertParamExists('putFile', 'body', body);
                            localVarPath = "/files/{scope}/{path}"
                                .replace("{" + "scope" + "}", encodeURIComponent(String(scope)))
                                .replace("{" + "path" + "}", encodeURIComponent(String(path)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (contentType !== undefined && contentType !== null) {
                                localVarHeaderParameter['content-type'] = String(contentType);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.FileEntryApiAxiosParamCreator = FileEntryApiAxiosParamCreator;
/**
 * FileEntryApi - functional programming interface
 * @export
 */
var FileEntryApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.FileEntryApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes the specified directory in the scope. Only `private` scope is allowed for the operation.
         * @summary Delete specified directory in the scope.
         * @param {'private'} scope Scope of the request
         * @param {string} path Target directory path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDirectory: function (scope, path, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteDirectory(scope, path, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the specified file in the scope. Only `private` scope is allowed for the operation.
         * @summary Delete specified file in the scope.
         * @param {'private'} scope Scope of the request
         * @param {string} path Target path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: function (scope, path, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteFile(scope, path, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of file entries which beginnings of their file paths are matched with the `prefix` query string in the ascending sorted UTF-8 bytes order of their file paths. An empty list is returned if the prefix does not match with any paths of file entries.
         * @summary Find files with prefix query parameter in the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} prefix Prefix to match with file path
         * @param {string} [limit] Num of entries
         * @param {string} [lastEvaluatedKey] The filePath of the last file entry retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFiles: function (scope, prefix, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findFiles(scope, prefix, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Redirects the client to URL for the link to download the file specified by the scope and the path. By issuing HTTP GET request to the link returned in the response, the client is able to download the file.
         * @summary Download file specified by the path and the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} path Target path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: function (scope, path, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFile(scope, path, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets metadata of the file specified by the path and the scope.
         * @summary Get the metadata of the file specified by the path and the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} path Target path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileMetadata: function (scope, path, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFileMetadata(scope, path, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of file entries under the path in the scope. This operation works only for directories and an error will be retrurned if the file entry corresponds to the given path is not a directory. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List files and directories on the path in the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} path Target path
         * @param {string} [limit] Num of entries
         * @param {string} [lastEvaluatedKey] The filename  of the last file entry retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles: function (scope, path, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listFiles(scope, path, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Uploads the file to the specified path in the scope. Only `private` scope is allowed for the operation.
         * @summary Upload file to the path in the scope.
         * @param {'private'} scope Scope of the request
         * @param {string} path Target path
         * @param {any} body Content of the file to upload
         * @param {string} [contentType] Content type of the file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFile: function (scope, path, body, contentType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putFile(scope, path, body, contentType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.FileEntryApiFp = FileEntryApiFp;
/**
 * FileEntryApi - factory interface
 * @export
 */
var FileEntryApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.FileEntryApiFp(configuration);
    return {
        /**
         * Deletes the specified directory in the scope. Only `private` scope is allowed for the operation.
         * @summary Delete specified directory in the scope.
         * @param {'private'} scope Scope of the request
         * @param {string} path Target directory path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDirectory: function (scope, path, options) {
            return localVarFp.deleteDirectory(scope, path, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the specified file in the scope. Only `private` scope is allowed for the operation.
         * @summary Delete specified file in the scope.
         * @param {'private'} scope Scope of the request
         * @param {string} path Target path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: function (scope, path, options) {
            return localVarFp.deleteFile(scope, path, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of file entries which beginnings of their file paths are matched with the `prefix` query string in the ascending sorted UTF-8 bytes order of their file paths. An empty list is returned if the prefix does not match with any paths of file entries.
         * @summary Find files with prefix query parameter in the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} prefix Prefix to match with file path
         * @param {string} [limit] Num of entries
         * @param {string} [lastEvaluatedKey] The filePath of the last file entry retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFiles: function (scope, prefix, limit, lastEvaluatedKey, options) {
            return localVarFp.findFiles(scope, prefix, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Redirects the client to URL for the link to download the file specified by the scope and the path. By issuing HTTP GET request to the link returned in the response, the client is able to download the file.
         * @summary Download file specified by the path and the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} path Target path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: function (scope, path, options) {
            return localVarFp.getFile(scope, path, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets metadata of the file specified by the path and the scope.
         * @summary Get the metadata of the file specified by the path and the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} path Target path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileMetadata: function (scope, path, options) {
            return localVarFp.getFileMetadata(scope, path, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of file entries under the path in the scope. This operation works only for directories and an error will be retrurned if the file entry corresponds to the given path is not a directory. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List files and directories on the path in the scope
         * @param {'private' | 'public'} scope Scope of the request
         * @param {string} path Target path
         * @param {string} [limit] Num of entries
         * @param {string} [lastEvaluatedKey] The filename  of the last file entry retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles: function (scope, path, limit, lastEvaluatedKey, options) {
            return localVarFp.listFiles(scope, path, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Uploads the file to the specified path in the scope. Only `private` scope is allowed for the operation.
         * @summary Upload file to the path in the scope.
         * @param {'private'} scope Scope of the request
         * @param {string} path Target path
         * @param {any} body Content of the file to upload
         * @param {string} [contentType] Content type of the file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFile: function (scope, path, body, contentType, options) {
            return localVarFp.putFile(scope, path, body, contentType, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.FileEntryApiFactory = FileEntryApiFactory;
/**
 * FileEntryApi - object-oriented interface
 * @export
 * @class FileEntryApi
 * @extends {BaseAPI}
 */
var FileEntryApi = /** @class */ (function (_super) {
    __extends(FileEntryApi, _super);
    function FileEntryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes the specified directory in the scope. Only `private` scope is allowed for the operation.
     * @summary Delete specified directory in the scope.
     * @param {'private'} scope Scope of the request
     * @param {string} path Target directory path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileEntryApi
     */
    FileEntryApi.prototype.deleteDirectory = function (scope, path, options) {
        var _this = this;
        return exports.FileEntryApiFp(this.configuration).deleteDirectory(scope, path, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the specified file in the scope. Only `private` scope is allowed for the operation.
     * @summary Delete specified file in the scope.
     * @param {'private'} scope Scope of the request
     * @param {string} path Target path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileEntryApi
     */
    FileEntryApi.prototype.deleteFile = function (scope, path, options) {
        var _this = this;
        return exports.FileEntryApiFp(this.configuration).deleteFile(scope, path, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of file entries which beginnings of their file paths are matched with the `prefix` query string in the ascending sorted UTF-8 bytes order of their file paths. An empty list is returned if the prefix does not match with any paths of file entries.
     * @summary Find files with prefix query parameter in the scope
     * @param {'private' | 'public'} scope Scope of the request
     * @param {string} prefix Prefix to match with file path
     * @param {string} [limit] Num of entries
     * @param {string} [lastEvaluatedKey] The filePath of the last file entry retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileEntryApi
     */
    FileEntryApi.prototype.findFiles = function (scope, prefix, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.FileEntryApiFp(this.configuration).findFiles(scope, prefix, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Redirects the client to URL for the link to download the file specified by the scope and the path. By issuing HTTP GET request to the link returned in the response, the client is able to download the file.
     * @summary Download file specified by the path and the scope
     * @param {'private' | 'public'} scope Scope of the request
     * @param {string} path Target path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileEntryApi
     */
    FileEntryApi.prototype.getFile = function (scope, path, options) {
        var _this = this;
        return exports.FileEntryApiFp(this.configuration).getFile(scope, path, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets metadata of the file specified by the path and the scope.
     * @summary Get the metadata of the file specified by the path and the scope
     * @param {'private' | 'public'} scope Scope of the request
     * @param {string} path Target path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileEntryApi
     */
    FileEntryApi.prototype.getFileMetadata = function (scope, path, options) {
        var _this = this;
        return exports.FileEntryApiFp(this.configuration).getFileMetadata(scope, path, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of file entries under the path in the scope. This operation works only for directories and an error will be retrurned if the file entry corresponds to the given path is not a directory. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary List files and directories on the path in the scope
     * @param {'private' | 'public'} scope Scope of the request
     * @param {string} path Target path
     * @param {string} [limit] Num of entries
     * @param {string} [lastEvaluatedKey] The filename  of the last file entry retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileEntryApi
     */
    FileEntryApi.prototype.listFiles = function (scope, path, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.FileEntryApiFp(this.configuration).listFiles(scope, path, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Uploads the file to the specified path in the scope. Only `private` scope is allowed for the operation.
     * @summary Upload file to the path in the scope.
     * @param {'private'} scope Scope of the request
     * @param {string} path Target path
     * @param {any} body Content of the file to upload
     * @param {string} [contentType] Content type of the file to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileEntryApi
     */
    FileEntryApi.prototype.putFile = function (scope, path, body, contentType, options) {
        var _this = this;
        return exports.FileEntryApiFp(this.configuration).putFile(scope, path, body, contentType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FileEntryApi;
}(base_1.BaseAPI));
exports.FileEntryApi = FileEntryApi;
/**
 * FilesApi - axios parameter creator
 * @export
 */
var FilesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get an exported file. The `url` field in the response will contain a URL to download the exported file.
         * @summary Get an exported file.
         * @param {string} exportedFileId file export id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportedFile: function (exportedFileId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'exportedFileId' is not null or undefined
                            common_1.assertParamExists('getExportedFile', 'exportedFileId', exportedFileId);
                            localVarPath = "/files/exported/{exported_file_id}"
                                .replace("{" + "exported_file_id" + "}", encodeURIComponent(String(exportedFileId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.FilesApiAxiosParamCreator = FilesApiAxiosParamCreator;
/**
 * FilesApi - functional programming interface
 * @export
 */
var FilesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.FilesApiAxiosParamCreator(configuration);
    return {
        /**
         * Get an exported file. The `url` field in the response will contain a URL to download the exported file.
         * @summary Get an exported file.
         * @param {string} exportedFileId file export id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportedFile: function (exportedFileId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExportedFile(exportedFileId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.FilesApiFp = FilesApiFp;
/**
 * FilesApi - factory interface
 * @export
 */
var FilesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.FilesApiFp(configuration);
    return {
        /**
         * Get an exported file. The `url` field in the response will contain a URL to download the exported file.
         * @summary Get an exported file.
         * @param {string} exportedFileId file export id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportedFile: function (exportedFileId, options) {
            return localVarFp.getExportedFile(exportedFileId, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.FilesApiFactory = FilesApiFactory;
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
var FilesApi = /** @class */ (function (_super) {
    __extends(FilesApi, _super);
    function FilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get an exported file. The `url` field in the response will contain a URL to download the exported file.
     * @summary Get an exported file.
     * @param {string} exportedFileId file export id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    FilesApi.prototype.getExportedFile = function (exportedFileId, options) {
        var _this = this;
        return exports.FilesApiFp(this.configuration).getExportedFile(exportedFileId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FilesApi;
}(base_1.BaseAPI));
exports.FilesApi = FilesApi;
/**
 * GadgetApi - axios parameter creator
 * @export
 */
var GadgetApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes a tag from the specified gadget.
         * @summary Delete gadget Tag.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGadgetTag: function (productId, serialNumber, tagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'productId' is not null or undefined
                            common_1.assertParamExists('deleteGadgetTag', 'productId', productId);
                            // verify required parameter 'serialNumber' is not null or undefined
                            common_1.assertParamExists('deleteGadgetTag', 'serialNumber', serialNumber);
                            // verify required parameter 'tagName' is not null or undefined
                            common_1.assertParamExists('deleteGadgetTag', 'tagName', tagName);
                            localVarPath = "/gadgets/{product_id}/{serial_number}/tags/{tag_name}"
                                .replace("{" + "product_id" + "}", encodeURIComponent(String(productId)))
                                .replace("{" + "serial_number" + "}", encodeURIComponent(String(serialNumber)))
                                .replace("{" + "tag_name" + "}", encodeURIComponent(String(tagName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Disables termination of specified gadget.
         * @summary Disable Termination of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnGadget: function (productId, serialNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'productId' is not null or undefined
                            common_1.assertParamExists('disableTerminationOnGadget', 'productId', productId);
                            // verify required parameter 'serialNumber' is not null or undefined
                            common_1.assertParamExists('disableTerminationOnGadget', 'serialNumber', serialNumber);
                            localVarPath = "/gadgets/{product_id}/{serial_number}/disable_termination"
                                .replace("{" + "product_id" + "}", encodeURIComponent(String(productId)))
                                .replace("{" + "serial_number" + "}", encodeURIComponent(String(serialNumber)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Enables termination of specified gadget.
         * @summary Enable Termination of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnGadget: function (productId, serialNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'productId' is not null or undefined
                            common_1.assertParamExists('enableTerminationOnGadget', 'productId', productId);
                            // verify required parameter 'serialNumber' is not null or undefined
                            common_1.assertParamExists('enableTerminationOnGadget', 'serialNumber', serialNumber);
                            localVarPath = "/gadgets/{product_id}/{serial_number}/enable_termination"
                                .replace("{" + "product_id" + "}", encodeURIComponent(String(productId)))
                                .replace("{" + "serial_number" + "}", encodeURIComponent(String(serialNumber)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns information about the specified gadget.
         * @summary Get gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGadget: function (productId, serialNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'productId' is not null or undefined
                            common_1.assertParamExists('getGadget', 'productId', productId);
                            // verify required parameter 'serialNumber' is not null or undefined
                            common_1.assertParamExists('getGadget', 'serialNumber', serialNumber);
                            localVarPath = "/gadgets/{product_id}/{serial_number}"
                                .replace("{" + "product_id" + "}", encodeURIComponent(String(productId)))
                                .replace("{" + "serial_number" + "}", encodeURIComponent(String(serialNumber)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of gadgets that match certain criteria. If the total number of gadgets does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List gadgets.
         * @param {string} [productId] Product ID for filtering the search.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of gadgets to retrieve.
         * @param {string} [lastEvaluatedKey] The ID ({product_id}/{serial_number}) of the last gadget retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGadgets: function (productId, tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/gadgets";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (productId !== undefined) {
                                localVarQueryParameter['product_id'] = productId;
                            }
                            if (tagName !== undefined) {
                                localVarQueryParameter['tag_name'] = tagName;
                            }
                            if (tagValue !== undefined) {
                                localVarQueryParameter['tag_value'] = tagValue;
                            }
                            if (tagValueMatchMode !== undefined) {
                                localVarQueryParameter['tag_value_match_mode'] = tagValueMatchMode;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified gadget.
         * @summary Bulk Insert or Update gadget Tags.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGadgetTags: function (productId, serialNumber, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'productId' is not null or undefined
                            common_1.assertParamExists('putGadgetTags', 'productId', productId);
                            // verify required parameter 'serialNumber' is not null or undefined
                            common_1.assertParamExists('putGadgetTags', 'serialNumber', serialNumber);
                            // verify required parameter 'tags' is not null or undefined
                            common_1.assertParamExists('putGadgetTags', 'tags', tags);
                            localVarPath = "/gadgets/{product_id}/{serial_number}/tags"
                                .replace("{" + "product_id" + "}", encodeURIComponent(String(productId)))
                                .replace("{" + "serial_number" + "}", encodeURIComponent(String(serialNumber)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Registers a gadget
         * @summary Register a gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {GadgetRegistrationRequest} registrationRequest Gadget registration request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerGadget: function (productId, serialNumber, registrationRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'productId' is not null or undefined
                            common_1.assertParamExists('registerGadget', 'productId', productId);
                            // verify required parameter 'serialNumber' is not null or undefined
                            common_1.assertParamExists('registerGadget', 'serialNumber', serialNumber);
                            // verify required parameter 'registrationRequest' is not null or undefined
                            common_1.assertParamExists('registerGadget', 'registrationRequest', registrationRequest);
                            localVarPath = "/gadgets/{product_id}/{serial_number}/register"
                                .replace("{" + "product_id" + "}", encodeURIComponent(String(productId)))
                                .replace("{" + "serial_number" + "}", encodeURIComponent(String(serialNumber)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(registrationRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified gadget.
         * @summary Set Group of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {Group} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGadgetGroup: function (productId, serialNumber, group, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'productId' is not null or undefined
                            common_1.assertParamExists('setGadgetGroup', 'productId', productId);
                            // verify required parameter 'serialNumber' is not null or undefined
                            common_1.assertParamExists('setGadgetGroup', 'serialNumber', serialNumber);
                            // verify required parameter 'group' is not null or undefined
                            common_1.assertParamExists('setGadgetGroup', 'group', group);
                            localVarPath = "/gadgets/{product_id}/{serial_number}/set_group"
                                .replace("{" + "product_id" + "}", encodeURIComponent(String(productId)))
                                .replace("{" + "serial_number" + "}", encodeURIComponent(String(serialNumber)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(group, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Terminates the specified gadget
         * @summary Terminate gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateGadget: function (productId, serialNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'productId' is not null or undefined
                            common_1.assertParamExists('terminateGadget', 'productId', productId);
                            // verify required parameter 'serialNumber' is not null or undefined
                            common_1.assertParamExists('terminateGadget', 'serialNumber', serialNumber);
                            localVarPath = "/gadgets/{product_id}/{serial_number}/terminate"
                                .replace("{" + "product_id" + "}", encodeURIComponent(String(productId)))
                                .replace("{" + "serial_number" + "}", encodeURIComponent(String(serialNumber)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified gadget.
         * @summary Unset Group of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetGadgetGroup: function (productId, serialNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'productId' is not null or undefined
                            common_1.assertParamExists('unsetGadgetGroup', 'productId', productId);
                            // verify required parameter 'serialNumber' is not null or undefined
                            common_1.assertParamExists('unsetGadgetGroup', 'serialNumber', serialNumber);
                            localVarPath = "/gadgets/{product_id}/{serial_number}/unset_group"
                                .replace("{" + "product_id" + "}", encodeURIComponent(String(productId)))
                                .replace("{" + "serial_number" + "}", encodeURIComponent(String(serialNumber)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.GadgetApiAxiosParamCreator = GadgetApiAxiosParamCreator;
/**
 * GadgetApi - functional programming interface
 * @export
 */
var GadgetApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.GadgetApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes a tag from the specified gadget.
         * @summary Delete gadget Tag.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGadgetTag: function (productId, serialNumber, tagName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteGadgetTag(productId, serialNumber, tagName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Disables termination of specified gadget.
         * @summary Disable Termination of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnGadget: function (productId, serialNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disableTerminationOnGadget(productId, serialNumber, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Enables termination of specified gadget.
         * @summary Enable Termination of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnGadget: function (productId, serialNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableTerminationOnGadget(productId, serialNumber, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns information about the specified gadget.
         * @summary Get gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGadget: function (productId, serialNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGadget(productId, serialNumber, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of gadgets that match certain criteria. If the total number of gadgets does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List gadgets.
         * @param {string} [productId] Product ID for filtering the search.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of gadgets to retrieve.
         * @param {string} [lastEvaluatedKey] The ID ({product_id}/{serial_number}) of the last gadget retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGadgets: function (productId, tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listGadgets(productId, tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified gadget.
         * @summary Bulk Insert or Update gadget Tags.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGadgetTags: function (productId, serialNumber, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putGadgetTags(productId, serialNumber, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Registers a gadget
         * @summary Register a gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {GadgetRegistrationRequest} registrationRequest Gadget registration request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerGadget: function (productId, serialNumber, registrationRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerGadget(productId, serialNumber, registrationRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified gadget.
         * @summary Set Group of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {Group} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGadgetGroup: function (productId, serialNumber, group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setGadgetGroup(productId, serialNumber, group, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Terminates the specified gadget
         * @summary Terminate gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateGadget: function (productId, serialNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.terminateGadget(productId, serialNumber, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified gadget.
         * @summary Unset Group of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetGadgetGroup: function (productId, serialNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetGadgetGroup(productId, serialNumber, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.GadgetApiFp = GadgetApiFp;
/**
 * GadgetApi - factory interface
 * @export
 */
var GadgetApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.GadgetApiFp(configuration);
    return {
        /**
         * Deletes a tag from the specified gadget.
         * @summary Delete gadget Tag.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGadgetTag: function (productId, serialNumber, tagName, options) {
            return localVarFp.deleteGadgetTag(productId, serialNumber, tagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Disables termination of specified gadget.
         * @summary Disable Termination of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnGadget: function (productId, serialNumber, options) {
            return localVarFp.disableTerminationOnGadget(productId, serialNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Enables termination of specified gadget.
         * @summary Enable Termination of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnGadget: function (productId, serialNumber, options) {
            return localVarFp.enableTerminationOnGadget(productId, serialNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns information about the specified gadget.
         * @summary Get gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGadget: function (productId, serialNumber, options) {
            return localVarFp.getGadget(productId, serialNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of gadgets that match certain criteria. If the total number of gadgets does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List gadgets.
         * @param {string} [productId] Product ID for filtering the search.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of gadgets to retrieve.
         * @param {string} [lastEvaluatedKey] The ID ({product_id}/{serial_number}) of the last gadget retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGadgets: function (productId, tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return localVarFp.listGadgets(productId, tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Inserts/updates tags for the specified gadget.
         * @summary Bulk Insert or Update gadget Tags.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGadgetTags: function (productId, serialNumber, tags, options) {
            return localVarFp.putGadgetTags(productId, serialNumber, tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Registers a gadget
         * @summary Register a gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {GadgetRegistrationRequest} registrationRequest Gadget registration request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerGadget: function (productId, serialNumber, registrationRequest, options) {
            return localVarFp.registerGadget(productId, serialNumber, registrationRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets or overwrites a group for the specified gadget.
         * @summary Set Group of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {Group} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGadgetGroup: function (productId, serialNumber, group, options) {
            return localVarFp.setGadgetGroup(productId, serialNumber, group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Terminates the specified gadget
         * @summary Terminate gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateGadget: function (productId, serialNumber, options) {
            return localVarFp.terminateGadget(productId, serialNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes the group configuration from the specified gadget.
         * @summary Unset Group of gadget.
         * @param {string} productId Product ID of the target gadget.
         * @param {string} serialNumber Serial Number of the target gadget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetGadgetGroup: function (productId, serialNumber, options) {
            return localVarFp.unsetGadgetGroup(productId, serialNumber, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.GadgetApiFactory = GadgetApiFactory;
/**
 * GadgetApi - object-oriented interface
 * @export
 * @class GadgetApi
 * @extends {BaseAPI}
 */
var GadgetApi = /** @class */ (function (_super) {
    __extends(GadgetApi, _super);
    function GadgetApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a tag from the specified gadget.
     * @summary Delete gadget Tag.
     * @param {string} productId Product ID of the target gadget.
     * @param {string} serialNumber Serial Number of the target gadget.
     * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.deleteGadgetTag = function (productId, serialNumber, tagName, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).deleteGadgetTag(productId, serialNumber, tagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Disables termination of specified gadget.
     * @summary Disable Termination of gadget.
     * @param {string} productId Product ID of the target gadget.
     * @param {string} serialNumber Serial Number of the target gadget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.disableTerminationOnGadget = function (productId, serialNumber, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).disableTerminationOnGadget(productId, serialNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Enables termination of specified gadget.
     * @summary Enable Termination of gadget.
     * @param {string} productId Product ID of the target gadget.
     * @param {string} serialNumber Serial Number of the target gadget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.enableTerminationOnGadget = function (productId, serialNumber, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).enableTerminationOnGadget(productId, serialNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns information about the specified gadget.
     * @summary Get gadget.
     * @param {string} productId Product ID of the target gadget.
     * @param {string} serialNumber Serial Number of the target gadget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.getGadget = function (productId, serialNumber, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).getGadget(productId, serialNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of gadgets that match certain criteria. If the total number of gadgets does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary List gadgets.
     * @param {string} [productId] Product ID for filtering the search.
     * @param {string} [tagName] Tag name for filtering the search (exact match).
     * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
     * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
     * @param {number} [limit] Maximum number of gadgets to retrieve.
     * @param {string} [lastEvaluatedKey] The ID ({product_id}/{serial_number}) of the last gadget retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.listGadgets = function (productId, tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).listGadgets(productId, tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Inserts/updates tags for the specified gadget.
     * @summary Bulk Insert or Update gadget Tags.
     * @param {string} productId Product ID of the target gadget.
     * @param {string} serialNumber Serial Number of the target gadget.
     * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.putGadgetTags = function (productId, serialNumber, tags, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).putGadgetTags(productId, serialNumber, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Registers a gadget
     * @summary Register a gadget.
     * @param {string} productId Product ID of the target gadget.
     * @param {string} serialNumber Serial Number of the target gadget.
     * @param {GadgetRegistrationRequest} registrationRequest Gadget registration request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.registerGadget = function (productId, serialNumber, registrationRequest, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).registerGadget(productId, serialNumber, registrationRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets or overwrites a group for the specified gadget.
     * @summary Set Group of gadget.
     * @param {string} productId Product ID of the target gadget.
     * @param {string} serialNumber Serial Number of the target gadget.
     * @param {Group} group Group (may include ID only).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.setGadgetGroup = function (productId, serialNumber, group, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).setGadgetGroup(productId, serialNumber, group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Terminates the specified gadget
     * @summary Terminate gadget.
     * @param {string} productId Product ID of the target gadget.
     * @param {string} serialNumber Serial Number of the target gadget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.terminateGadget = function (productId, serialNumber, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).terminateGadget(productId, serialNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes the group configuration from the specified gadget.
     * @summary Unset Group of gadget.
     * @param {string} productId Product ID of the target gadget.
     * @param {string} serialNumber Serial Number of the target gadget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GadgetApi
     */
    GadgetApi.prototype.unsetGadgetGroup = function (productId, serialNumber, options) {
        var _this = this;
        return exports.GadgetApiFp(this.configuration).unsetGadgetGroup(productId, serialNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GadgetApi;
}(base_1.BaseAPI));
exports.GadgetApi = GadgetApi;
/**
 * GroupApi - axios parameter creator
 * @export
 */
var GroupApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a new group.
         * @summary Create Group.
         * @param {CreateGroupRequest} tags Tags for group to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: function (tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'tags' is not null or undefined
                            common_1.assertParamExists('createGroup', 'tags', tags);
                            localVarPath = "/groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Delete a namespace for the specified group.
         * @summary Delete Group Configuration Namespace.
         * @param {string} groupId Target group.
         * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Namespace to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfigurationNamespace: function (groupId, namespace, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            common_1.assertParamExists('deleteConfigurationNamespace', 'groupId', groupId);
                            // verify required parameter 'namespace' is not null or undefined
                            common_1.assertParamExists('deleteConfigurationNamespace', 'namespace', namespace);
                            localVarPath = "/groups/{group_id}/configuration/{namespace}"
                                .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)))
                                .replace("{" + "namespace" + "}", encodeURIComponent(String(namespace)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Delete parameters for the specified group.
         * @summary Delete Group Configuration Parameters.
         * @param {string} groupId Target group.
         * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Namespace of target parameters.
         * @param {string} name Parameter name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfigurationParameter: function (groupId, namespace, name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            common_1.assertParamExists('deleteConfigurationParameter', 'groupId', groupId);
                            // verify required parameter 'namespace' is not null or undefined
                            common_1.assertParamExists('deleteConfigurationParameter', 'namespace', namespace);
                            // verify required parameter 'name' is not null or undefined
                            common_1.assertParamExists('deleteConfigurationParameter', 'name', name);
                            localVarPath = "/groups/{group_id}/configuration/{namespace}/{name}"
                                .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)))
                                .replace("{" + "namespace" + "}", encodeURIComponent(String(namespace)))
                                .replace("{" + "name" + "}", encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the specified group by group ID
         * @summary Delete Group.
         * @param {string} groupId Target group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (groupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            common_1.assertParamExists('deleteGroup', 'groupId', groupId);
                            localVarPath = "/groups/{group_id}"
                                .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes tag from the specified group.
         * @summary Delete Group Tag.
         * @param {string} groupId Target group ID.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupTag: function (groupId, tagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            common_1.assertParamExists('deleteGroupTag', 'groupId', groupId);
                            // verify required parameter 'tagName' is not null or undefined
                            common_1.assertParamExists('deleteGroupTag', 'tagName', tagName);
                            localVarPath = "/groups/{group_id}/tags/{tag_name}"
                                .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)))
                                .replace("{" + "tag_name" + "}", encodeURIComponent(String(tagName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns the group specified by the group ID.
         * @summary Get Group.
         * @param {string} groupId Target group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (groupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            common_1.assertParamExists('getGroup', 'groupId', groupId);
                            localVarPath = "/groups/{group_id}"
                                .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of groups.
         * @summary List Groups.
         * @param {string} [tagName] Tag name of the group. Filters through all groups that exactly match the tag name. When tag_name is specified, tag_value is required.
         * @param {string} [tagValue] Tag value of the groups.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The last Group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (tagName !== undefined) {
                                localVarQueryParameter['tag_name'] = tagName;
                            }
                            if (tagValue !== undefined) {
                                localVarQueryParameter['tag_value'] = tagValue;
                            }
                            if (tagValueMatchMode !== undefined) {
                                localVarQueryParameter['tag_value_match_mode'] = tagValueMatchMode;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of subscribers that belong to the specified group by group ID.
         * @summary List Subscribers in a group.
         * @param {string} groupId Target group ID.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscribersInGroup: function (groupId, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            common_1.assertParamExists('listSubscribersInGroup', 'groupId', groupId);
                            localVarPath = "/groups/{group_id}/subscribers"
                                .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Adds/updates parameters for the specified group.
         * @summary Update Group Configuration Parameters.
         * @param {string} groupId Target group.
         * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Target configuration.
         * @param {Array<GroupConfigurationUpdateRequest>} parameters Array of values for target object to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putConfigurationParameters: function (groupId, namespace, parameters, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            common_1.assertParamExists('putConfigurationParameters', 'groupId', groupId);
                            // verify required parameter 'namespace' is not null or undefined
                            common_1.assertParamExists('putConfigurationParameters', 'namespace', namespace);
                            // verify required parameter 'parameters' is not null or undefined
                            common_1.assertParamExists('putConfigurationParameters', 'parameters', parameters);
                            localVarPath = "/groups/{group_id}/configuration/{namespace}"
                                .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)))
                                .replace("{" + "namespace" + "}", encodeURIComponent(String(namespace)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(parameters, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Adds/updates tags of specified configuration group.
         * @summary Update Group Tags.
         * @param {string} groupId Target group ID.
         * @param {Array<TagUpdateRequest>} tags Array of values for tags to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGroupTags: function (groupId, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            common_1.assertParamExists('putGroupTags', 'groupId', groupId);
                            // verify required parameter 'tags' is not null or undefined
                            common_1.assertParamExists('putGroupTags', 'tags', tags);
                            localVarPath = "/groups/{group_id}/tags"
                                .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.GroupApiAxiosParamCreator = GroupApiAxiosParamCreator;
/**
 * GroupApi - functional programming interface
 * @export
 */
var GroupApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.GroupApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new group.
         * @summary Create Group.
         * @param {CreateGroupRequest} tags Tags for group to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: function (tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createGroup(tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete a namespace for the specified group.
         * @summary Delete Group Configuration Namespace.
         * @param {string} groupId Target group.
         * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Namespace to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfigurationNamespace: function (groupId, namespace, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteConfigurationNamespace(groupId, namespace, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete parameters for the specified group.
         * @summary Delete Group Configuration Parameters.
         * @param {string} groupId Target group.
         * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Namespace of target parameters.
         * @param {string} name Parameter name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfigurationParameter: function (groupId, namespace, name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteConfigurationParameter(groupId, namespace, name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the specified group by group ID
         * @summary Delete Group.
         * @param {string} groupId Target group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteGroup(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes tag from the specified group.
         * @summary Delete Group Tag.
         * @param {string} groupId Target group ID.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupTag: function (groupId, tagName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteGroupTag(groupId, tagName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the group specified by the group ID.
         * @summary Get Group.
         * @param {string} groupId Target group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGroup(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of groups.
         * @summary List Groups.
         * @param {string} [tagName] Tag name of the group. Filters through all groups that exactly match the tag name. When tag_name is specified, tag_value is required.
         * @param {string} [tagValue] Tag value of the groups.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The last Group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listGroups(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of subscribers that belong to the specified group by group ID.
         * @summary List Subscribers in a group.
         * @param {string} groupId Target group ID.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscribersInGroup: function (groupId, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSubscribersInGroup(groupId, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Adds/updates parameters for the specified group.
         * @summary Update Group Configuration Parameters.
         * @param {string} groupId Target group.
         * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Target configuration.
         * @param {Array<GroupConfigurationUpdateRequest>} parameters Array of values for target object to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putConfigurationParameters: function (groupId, namespace, parameters, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putConfigurationParameters(groupId, namespace, parameters, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Adds/updates tags of specified configuration group.
         * @summary Update Group Tags.
         * @param {string} groupId Target group ID.
         * @param {Array<TagUpdateRequest>} tags Array of values for tags to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGroupTags: function (groupId, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putGroupTags(groupId, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.GroupApiFp = GroupApiFp;
/**
 * GroupApi - factory interface
 * @export
 */
var GroupApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.GroupApiFp(configuration);
    return {
        /**
         * Create a new group.
         * @summary Create Group.
         * @param {CreateGroupRequest} tags Tags for group to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: function (tags, options) {
            return localVarFp.createGroup(tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a namespace for the specified group.
         * @summary Delete Group Configuration Namespace.
         * @param {string} groupId Target group.
         * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Namespace to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfigurationNamespace: function (groupId, namespace, options) {
            return localVarFp.deleteConfigurationNamespace(groupId, namespace, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete parameters for the specified group.
         * @summary Delete Group Configuration Parameters.
         * @param {string} groupId Target group.
         * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Namespace of target parameters.
         * @param {string} name Parameter name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfigurationParameter: function (groupId, namespace, name, options) {
            return localVarFp.deleteConfigurationParameter(groupId, namespace, name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the specified group by group ID
         * @summary Delete Group.
         * @param {string} groupId Target group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (groupId, options) {
            return localVarFp.deleteGroup(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes tag from the specified group.
         * @summary Delete Group Tag.
         * @param {string} groupId Target group ID.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupTag: function (groupId, tagName, options) {
            return localVarFp.deleteGroupTag(groupId, tagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the group specified by the group ID.
         * @summary Get Group.
         * @param {string} groupId Target group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (groupId, options) {
            return localVarFp.getGroup(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of groups.
         * @summary List Groups.
         * @param {string} [tagName] Tag name of the group. Filters through all groups that exactly match the tag name. When tag_name is specified, tag_value is required.
         * @param {string} [tagValue] Tag value of the groups.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The last Group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return localVarFp.listGroups(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of subscribers that belong to the specified group by group ID.
         * @summary List Subscribers in a group.
         * @param {string} groupId Target group ID.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscribersInGroup: function (groupId, limit, lastEvaluatedKey, options) {
            return localVarFp.listSubscribersInGroup(groupId, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Adds/updates parameters for the specified group.
         * @summary Update Group Configuration Parameters.
         * @param {string} groupId Target group.
         * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Target configuration.
         * @param {Array<GroupConfigurationUpdateRequest>} parameters Array of values for target object to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putConfigurationParameters: function (groupId, namespace, parameters, options) {
            return localVarFp.putConfigurationParameters(groupId, namespace, parameters, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Adds/updates tags of specified configuration group.
         * @summary Update Group Tags.
         * @param {string} groupId Target group ID.
         * @param {Array<TagUpdateRequest>} tags Array of values for tags to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGroupTags: function (groupId, tags, options) {
            return localVarFp.putGroupTags(groupId, tags, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.GroupApiFactory = GroupApiFactory;
/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
var GroupApi = /** @class */ (function (_super) {
    __extends(GroupApi, _super);
    function GroupApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new group.
     * @summary Create Group.
     * @param {CreateGroupRequest} tags Tags for group to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.createGroup = function (tags, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).createGroup(tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a namespace for the specified group.
     * @summary Delete Group Configuration Namespace.
     * @param {string} groupId Target group.
     * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Namespace to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.deleteConfigurationNamespace = function (groupId, namespace, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).deleteConfigurationNamespace(groupId, namespace, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete parameters for the specified group.
     * @summary Delete Group Configuration Parameters.
     * @param {string} groupId Target group.
     * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Namespace of target parameters.
     * @param {string} name Parameter name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.deleteConfigurationParameter = function (groupId, namespace, name, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).deleteConfigurationParameter(groupId, namespace, name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the specified group by group ID
     * @summary Delete Group.
     * @param {string} groupId Target group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.deleteGroup = function (groupId, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).deleteGroup(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes tag from the specified group.
     * @summary Delete Group Tag.
     * @param {string} groupId Target group ID.
     * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.deleteGroupTag = function (groupId, tagName, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).deleteGroupTag(groupId, tagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the group specified by the group ID.
     * @summary Get Group.
     * @param {string} groupId Target group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.getGroup = function (groupId, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).getGroup(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of groups.
     * @summary List Groups.
     * @param {string} [tagName] Tag name of the group. Filters through all groups that exactly match the tag name. When tag_name is specified, tag_value is required.
     * @param {string} [tagValue] Tag value of the groups.
     * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
     * @param {number} [limit] Maximum number of results per response page.
     * @param {string} [lastEvaluatedKey] The last Group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.listGroups = function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).listGroups(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of subscribers that belong to the specified group by group ID.
     * @summary List Subscribers in a group.
     * @param {string} groupId Target group ID.
     * @param {number} [limit] Maximum number of results per response page.
     * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.listSubscribersInGroup = function (groupId, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).listSubscribersInGroup(groupId, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Adds/updates parameters for the specified group.
     * @summary Update Group Configuration Parameters.
     * @param {string} groupId Target group.
     * @param {'SoracomAir' | 'SoracomBeam' | 'SoracomEndorse' | 'SoracomFunk' | 'SoracomFunnel' | 'SoracomHarvest' | 'SoracomHarvestFiles' | 'SoracomKrypton' | 'UnifiedEndpoint'} namespace Target configuration.
     * @param {Array<GroupConfigurationUpdateRequest>} parameters Array of values for target object to be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.putConfigurationParameters = function (groupId, namespace, parameters, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).putConfigurationParameters(groupId, namespace, parameters, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Adds/updates tags of specified configuration group.
     * @summary Update Group Tags.
     * @param {string} groupId Target group ID.
     * @param {Array<TagUpdateRequest>} tags Array of values for tags to be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    GroupApi.prototype.putGroupTags = function (groupId, tags, options) {
        var _this = this;
        return exports.GroupApiFp(this.configuration).putGroupTags(groupId, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GroupApi;
}(base_1.BaseAPI));
exports.GroupApi = GroupApi;
/**
 * LagoonApi - axios parameter creator
 * @export
 */
var LagoonApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a SORACOM Lagoon user.
         * @summary Create a SORACOM Lagoon user
         * @param {LagoonUserCreationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLagoonUser: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createLagoonUser', 'request', request);
                            localVarPath = "/lagoon/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Delete a SORACOM Lagoon user.
         * @summary Delete a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLagoonUser: function (lagoonUserId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lagoonUserId' is not null or undefined
                            common_1.assertParamExists('deleteLagoonUser', 'lagoonUserId', lagoonUserId);
                            localVarPath = "/lagoon/users/{lagoon_user_id}"
                                .replace("{" + "lagoon_user_id" + "}", encodeURIComponent(String(lagoonUserId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Get a custom icon image link of SORACOM Lagoon
         * @summary Get a custom icon image link of SORACOM Lagoon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageLink: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/lagoon/image/link";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * Update permissions to the initial state for a dashboard of SORACOM Lagoon
         * @summary Update permissions to the initial state for a dashboard of SORACOM Lagoon
         * @param {number} dashboardId dashboard_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeLagoonDashboardPermissions: function (dashboardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dashboardId' is not null or undefined
                    common_1.assertParamExists('initializeLagoonDashboardPermissions', 'dashboardId', dashboardId);
                    localVarPath = "/lagoon/dashboards/{dashboard_id}/permissions/init"
                        .replace("{" + "dashboard_id" + "}", encodeURIComponent(String(dashboardId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * List permissions for all SORACOM Lagoon dashboards
         * @summary List permissions for all SORACOM Lagoon dashboards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLagoonDashboardsPermissions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/lagoon/dashboards/permission";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Get the status of active SORACOM Lagoon license packs
         * @summary Get the status of active SORACOM Lagoon license packs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLagoonLicensePackStatus: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/lagoon/license_packs";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * List SORACOM Lagoon users that belong to operator.
         * @summary List SORACOM Lagoon users that belong to operator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLagoonUsers: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/lagoon/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Register (activate) SORACOM Lagoon. This API is only allowed to operate by root account.
         * @summary Register (activate) SORACOM Lagoon
         * @param {LagoonRegistrationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerLagoon: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('registerLagoon', 'request', request);
                            localVarPath = "/lagoon/register";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Terminate (deactivate) SORACOM Lagoon.
         * @summary Terminate (deactivate) SORACOM Lagoon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateLagoon: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/lagoon/terminate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Update permissions for a dashboard of SORACOM Lagoon
         * @summary Update permissions for a dashboard of SORACOM Lagoon
         * @param {number} dashboardId dashboard_id
         * @param {LagoonDashboardPermissionsUpdatingRequest} req req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonDashboardPermissions: function (dashboardId, req, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dashboardId' is not null or undefined
                    common_1.assertParamExists('updateLagoonDashboardPermissions', 'dashboardId', dashboardId);
                    // verify required parameter 'req' is not null or undefined
                    common_1.assertParamExists('updateLagoonDashboardPermissions', 'req', req);
                    localVarPath = "/lagoon/dashboards/{dashboard_id}/permissions"
                        .replace("{" + "dashboard_id" + "}", encodeURIComponent(String(dashboardId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(req, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * Update the quantities for license packs of SORACOM Lagoon. This API is only allowed to operate by root account.
         * @summary Update the quantities for license packs of SORACOM Lagoon
         * @param {LagoonLicensePacksUpdatingRequest} req req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonLicensePack: function (req, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'req' is not null or undefined
                    common_1.assertParamExists('updateLagoonLicensePack', 'req', req);
                    localVarPath = "/lagoon/license_packs";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(req, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * Update the plan of SORACOM Lagoon. This API is only allowed to operate by root account.
         * @summary Update the plan of SORACOM Lagoon
         * @param {LagoonPlanChangingRequest} req req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonPlan: function (req, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'req' is not null or undefined
                    common_1.assertParamExists('updateLagoonPlan', 'req', req);
                    localVarPath = "/lagoon/plan";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(req, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * Update email address of a SORACOM Lagoon user.
         * @summary Update email address of a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {LagoonUserEmailUpdatingRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonUserEmail: function (lagoonUserId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lagoonUserId' is not null or undefined
                            common_1.assertParamExists('updateLagoonUserEmail', 'lagoonUserId', lagoonUserId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateLagoonUserEmail', 'request', request);
                            localVarPath = "/lagoon/users/{lagoon_user_id}/email"
                                .replace("{" + "lagoon_user_id" + "}", encodeURIComponent(String(lagoonUserId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Update password of a SORACOM Lagoon user.
         * @summary Update password of a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {LagoonUserPasswordUpdatingRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonUserPassword: function (lagoonUserId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lagoonUserId' is not null or undefined
                            common_1.assertParamExists('updateLagoonUserPassword', 'lagoonUserId', lagoonUserId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateLagoonUserPassword', 'request', request);
                            localVarPath = "/lagoon/users/{lagoon_user_id}/password"
                                .replace("{" + "lagoon_user_id" + "}", encodeURIComponent(String(lagoonUserId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Update permission of a SORACOM Lagoon user.
         * @summary Update permission of a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {LagoonUserPermissionUpdatingRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonUserPermission: function (lagoonUserId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lagoonUserId' is not null or undefined
                            common_1.assertParamExists('updateLagoonUserPermission', 'lagoonUserId', lagoonUserId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateLagoonUserPermission', 'request', request);
                            localVarPath = "/lagoon/users/{lagoon_user_id}/permission"
                                .replace("{" + "lagoon_user_id" + "}", encodeURIComponent(String(lagoonUserId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.LagoonApiAxiosParamCreator = LagoonApiAxiosParamCreator;
/**
 * LagoonApi - functional programming interface
 * @export
 */
var LagoonApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.LagoonApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a SORACOM Lagoon user.
         * @summary Create a SORACOM Lagoon user
         * @param {LagoonUserCreationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLagoonUser: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createLagoonUser(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete a SORACOM Lagoon user.
         * @summary Delete a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLagoonUser: function (lagoonUserId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteLagoonUser(lagoonUserId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a custom icon image link of SORACOM Lagoon
         * @summary Get a custom icon image link of SORACOM Lagoon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageLink: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getImageLink(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update permissions to the initial state for a dashboard of SORACOM Lagoon
         * @summary Update permissions to the initial state for a dashboard of SORACOM Lagoon
         * @param {number} dashboardId dashboard_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeLagoonDashboardPermissions: function (dashboardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.initializeLagoonDashboardPermissions(dashboardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List permissions for all SORACOM Lagoon dashboards
         * @summary List permissions for all SORACOM Lagoon dashboards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLagoonDashboardsPermissions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listLagoonDashboardsPermissions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the status of active SORACOM Lagoon license packs
         * @summary Get the status of active SORACOM Lagoon license packs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLagoonLicensePackStatus: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listLagoonLicensePackStatus(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List SORACOM Lagoon users that belong to operator.
         * @summary List SORACOM Lagoon users that belong to operator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLagoonUsers: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listLagoonUsers(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Register (activate) SORACOM Lagoon. This API is only allowed to operate by root account.
         * @summary Register (activate) SORACOM Lagoon
         * @param {LagoonRegistrationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerLagoon: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerLagoon(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Terminate (deactivate) SORACOM Lagoon.
         * @summary Terminate (deactivate) SORACOM Lagoon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateLagoon: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.terminateLagoon(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update permissions for a dashboard of SORACOM Lagoon
         * @summary Update permissions for a dashboard of SORACOM Lagoon
         * @param {number} dashboardId dashboard_id
         * @param {LagoonDashboardPermissionsUpdatingRequest} req req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonDashboardPermissions: function (dashboardId, req, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLagoonDashboardPermissions(dashboardId, req, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update the quantities for license packs of SORACOM Lagoon. This API is only allowed to operate by root account.
         * @summary Update the quantities for license packs of SORACOM Lagoon
         * @param {LagoonLicensePacksUpdatingRequest} req req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonLicensePack: function (req, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLagoonLicensePack(req, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update the plan of SORACOM Lagoon. This API is only allowed to operate by root account.
         * @summary Update the plan of SORACOM Lagoon
         * @param {LagoonPlanChangingRequest} req req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonPlan: function (req, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLagoonPlan(req, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update email address of a SORACOM Lagoon user.
         * @summary Update email address of a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {LagoonUserEmailUpdatingRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonUserEmail: function (lagoonUserId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLagoonUserEmail(lagoonUserId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update password of a SORACOM Lagoon user.
         * @summary Update password of a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {LagoonUserPasswordUpdatingRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonUserPassword: function (lagoonUserId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLagoonUserPassword(lagoonUserId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update permission of a SORACOM Lagoon user.
         * @summary Update permission of a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {LagoonUserPermissionUpdatingRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonUserPermission: function (lagoonUserId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLagoonUserPermission(lagoonUserId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.LagoonApiFp = LagoonApiFp;
/**
 * LagoonApi - factory interface
 * @export
 */
var LagoonApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.LagoonApiFp(configuration);
    return {
        /**
         * Create a SORACOM Lagoon user.
         * @summary Create a SORACOM Lagoon user
         * @param {LagoonUserCreationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLagoonUser: function (request, options) {
            return localVarFp.createLagoonUser(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a SORACOM Lagoon user.
         * @summary Delete a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLagoonUser: function (lagoonUserId, options) {
            return localVarFp.deleteLagoonUser(lagoonUserId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a custom icon image link of SORACOM Lagoon
         * @summary Get a custom icon image link of SORACOM Lagoon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageLink: function (options) {
            return localVarFp.getImageLink(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update permissions to the initial state for a dashboard of SORACOM Lagoon
         * @summary Update permissions to the initial state for a dashboard of SORACOM Lagoon
         * @param {number} dashboardId dashboard_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeLagoonDashboardPermissions: function (dashboardId, options) {
            return localVarFp.initializeLagoonDashboardPermissions(dashboardId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List permissions for all SORACOM Lagoon dashboards
         * @summary List permissions for all SORACOM Lagoon dashboards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLagoonDashboardsPermissions: function (options) {
            return localVarFp.listLagoonDashboardsPermissions(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the status of active SORACOM Lagoon license packs
         * @summary Get the status of active SORACOM Lagoon license packs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLagoonLicensePackStatus: function (options) {
            return localVarFp.listLagoonLicensePackStatus(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List SORACOM Lagoon users that belong to operator.
         * @summary List SORACOM Lagoon users that belong to operator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLagoonUsers: function (options) {
            return localVarFp.listLagoonUsers(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Register (activate) SORACOM Lagoon. This API is only allowed to operate by root account.
         * @summary Register (activate) SORACOM Lagoon
         * @param {LagoonRegistrationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerLagoon: function (request, options) {
            return localVarFp.registerLagoon(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Terminate (deactivate) SORACOM Lagoon.
         * @summary Terminate (deactivate) SORACOM Lagoon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateLagoon: function (options) {
            return localVarFp.terminateLagoon(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update permissions for a dashboard of SORACOM Lagoon
         * @summary Update permissions for a dashboard of SORACOM Lagoon
         * @param {number} dashboardId dashboard_id
         * @param {LagoonDashboardPermissionsUpdatingRequest} req req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonDashboardPermissions: function (dashboardId, req, options) {
            return localVarFp.updateLagoonDashboardPermissions(dashboardId, req, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update the quantities for license packs of SORACOM Lagoon. This API is only allowed to operate by root account.
         * @summary Update the quantities for license packs of SORACOM Lagoon
         * @param {LagoonLicensePacksUpdatingRequest} req req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonLicensePack: function (req, options) {
            return localVarFp.updateLagoonLicensePack(req, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update the plan of SORACOM Lagoon. This API is only allowed to operate by root account.
         * @summary Update the plan of SORACOM Lagoon
         * @param {LagoonPlanChangingRequest} req req
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonPlan: function (req, options) {
            return localVarFp.updateLagoonPlan(req, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update email address of a SORACOM Lagoon user.
         * @summary Update email address of a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {LagoonUserEmailUpdatingRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonUserEmail: function (lagoonUserId, request, options) {
            return localVarFp.updateLagoonUserEmail(lagoonUserId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update password of a SORACOM Lagoon user.
         * @summary Update password of a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {LagoonUserPasswordUpdatingRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonUserPassword: function (lagoonUserId, request, options) {
            return localVarFp.updateLagoonUserPassword(lagoonUserId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update permission of a SORACOM Lagoon user.
         * @summary Update permission of a SORACOM Lagoon user
         * @param {number} lagoonUserId Target ID of the lagoon user
         * @param {LagoonUserPermissionUpdatingRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLagoonUserPermission: function (lagoonUserId, request, options) {
            return localVarFp.updateLagoonUserPermission(lagoonUserId, request, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.LagoonApiFactory = LagoonApiFactory;
/**
 * LagoonApi - object-oriented interface
 * @export
 * @class LagoonApi
 * @extends {BaseAPI}
 */
var LagoonApi = /** @class */ (function (_super) {
    __extends(LagoonApi, _super);
    function LagoonApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a SORACOM Lagoon user.
     * @summary Create a SORACOM Lagoon user
     * @param {LagoonUserCreationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.createLagoonUser = function (request, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).createLagoonUser(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a SORACOM Lagoon user.
     * @summary Delete a SORACOM Lagoon user
     * @param {number} lagoonUserId Target ID of the lagoon user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.deleteLagoonUser = function (lagoonUserId, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).deleteLagoonUser(lagoonUserId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a custom icon image link of SORACOM Lagoon
     * @summary Get a custom icon image link of SORACOM Lagoon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.getImageLink = function (options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).getImageLink(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update permissions to the initial state for a dashboard of SORACOM Lagoon
     * @summary Update permissions to the initial state for a dashboard of SORACOM Lagoon
     * @param {number} dashboardId dashboard_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.initializeLagoonDashboardPermissions = function (dashboardId, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).initializeLagoonDashboardPermissions(dashboardId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List permissions for all SORACOM Lagoon dashboards
     * @summary List permissions for all SORACOM Lagoon dashboards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.listLagoonDashboardsPermissions = function (options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).listLagoonDashboardsPermissions(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the status of active SORACOM Lagoon license packs
     * @summary Get the status of active SORACOM Lagoon license packs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.listLagoonLicensePackStatus = function (options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).listLagoonLicensePackStatus(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List SORACOM Lagoon users that belong to operator.
     * @summary List SORACOM Lagoon users that belong to operator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.listLagoonUsers = function (options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).listLagoonUsers(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Register (activate) SORACOM Lagoon. This API is only allowed to operate by root account.
     * @summary Register (activate) SORACOM Lagoon
     * @param {LagoonRegistrationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.registerLagoon = function (request, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).registerLagoon(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Terminate (deactivate) SORACOM Lagoon.
     * @summary Terminate (deactivate) SORACOM Lagoon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.terminateLagoon = function (options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).terminateLagoon(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update permissions for a dashboard of SORACOM Lagoon
     * @summary Update permissions for a dashboard of SORACOM Lagoon
     * @param {number} dashboardId dashboard_id
     * @param {LagoonDashboardPermissionsUpdatingRequest} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.updateLagoonDashboardPermissions = function (dashboardId, req, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).updateLagoonDashboardPermissions(dashboardId, req, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update the quantities for license packs of SORACOM Lagoon. This API is only allowed to operate by root account.
     * @summary Update the quantities for license packs of SORACOM Lagoon
     * @param {LagoonLicensePacksUpdatingRequest} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.updateLagoonLicensePack = function (req, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).updateLagoonLicensePack(req, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update the plan of SORACOM Lagoon. This API is only allowed to operate by root account.
     * @summary Update the plan of SORACOM Lagoon
     * @param {LagoonPlanChangingRequest} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.updateLagoonPlan = function (req, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).updateLagoonPlan(req, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update email address of a SORACOM Lagoon user.
     * @summary Update email address of a SORACOM Lagoon user
     * @param {number} lagoonUserId Target ID of the lagoon user
     * @param {LagoonUserEmailUpdatingRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.updateLagoonUserEmail = function (lagoonUserId, request, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).updateLagoonUserEmail(lagoonUserId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update password of a SORACOM Lagoon user.
     * @summary Update password of a SORACOM Lagoon user
     * @param {number} lagoonUserId Target ID of the lagoon user
     * @param {LagoonUserPasswordUpdatingRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.updateLagoonUserPassword = function (lagoonUserId, request, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).updateLagoonUserPassword(lagoonUserId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update permission of a SORACOM Lagoon user.
     * @summary Update permission of a SORACOM Lagoon user
     * @param {number} lagoonUserId Target ID of the lagoon user
     * @param {LagoonUserPermissionUpdatingRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LagoonApi
     */
    LagoonApi.prototype.updateLagoonUserPermission = function (lagoonUserId, request, options) {
        var _this = this;
        return exports.LagoonApiFp(this.configuration).updateLagoonUserPermission(lagoonUserId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LagoonApi;
}(base_1.BaseAPI));
exports.LagoonApi = LagoonApi;
/**
 * LogApi - axios parameter creator
 * @export
 */
var LogApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns a list of log entries that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get Logs.
         * @param {'Subscriber' | 'EventHandler' | 'VirtualPrivateGateway'} [resourceType] Type of the target resource to query log entries.
         * @param {string} [resourceId] Identity of the target resource to query log entries.
         * @param {'Air' | 'Beam' | 'Canal' | 'Direct' | 'Door' | 'Endorse' | 'Funnel' | 'Gate'} [service] Service name to filter log entries.
         * @param {number} [from] Start time for the log search range (unixtime).
         * @param {number} [to] End time for the log search range (unixtime).
         * @param {number} [limit] Maximum number of log entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogs: function (resourceType, resourceId, service, from, to, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/logs";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (resourceType !== undefined) {
                                localVarQueryParameter['resource_type'] = resourceType;
                            }
                            if (resourceId !== undefined) {
                                localVarQueryParameter['resource_id'] = resourceId;
                            }
                            if (service !== undefined) {
                                localVarQueryParameter['service'] = service;
                            }
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.LogApiAxiosParamCreator = LogApiAxiosParamCreator;
/**
 * LogApi - functional programming interface
 * @export
 */
var LogApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.LogApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns a list of log entries that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get Logs.
         * @param {'Subscriber' | 'EventHandler' | 'VirtualPrivateGateway'} [resourceType] Type of the target resource to query log entries.
         * @param {string} [resourceId] Identity of the target resource to query log entries.
         * @param {'Air' | 'Beam' | 'Canal' | 'Direct' | 'Door' | 'Endorse' | 'Funnel' | 'Gate'} [service] Service name to filter log entries.
         * @param {number} [from] Start time for the log search range (unixtime).
         * @param {number} [to] End time for the log search range (unixtime).
         * @param {number} [limit] Maximum number of log entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogs: function (resourceType, resourceId, service, from, to, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLogs(resourceType, resourceId, service, from, to, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.LogApiFp = LogApiFp;
/**
 * LogApi - factory interface
 * @export
 */
var LogApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.LogApiFp(configuration);
    return {
        /**
         * Returns a list of log entries that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get Logs.
         * @param {'Subscriber' | 'EventHandler' | 'VirtualPrivateGateway'} [resourceType] Type of the target resource to query log entries.
         * @param {string} [resourceId] Identity of the target resource to query log entries.
         * @param {'Air' | 'Beam' | 'Canal' | 'Direct' | 'Door' | 'Endorse' | 'Funnel' | 'Gate'} [service] Service name to filter log entries.
         * @param {number} [from] Start time for the log search range (unixtime).
         * @param {number} [to] End time for the log search range (unixtime).
         * @param {number} [limit] Maximum number of log entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogs: function (resourceType, resourceId, service, from, to, limit, lastEvaluatedKey, options) {
            return localVarFp.getLogs(resourceType, resourceId, service, from, to, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.LogApiFactory = LogApiFactory;
/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
var LogApi = /** @class */ (function (_super) {
    __extends(LogApi, _super);
    function LogApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns a list of log entries that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary Get Logs.
     * @param {'Subscriber' | 'EventHandler' | 'VirtualPrivateGateway'} [resourceType] Type of the target resource to query log entries.
     * @param {string} [resourceId] Identity of the target resource to query log entries.
     * @param {'Air' | 'Beam' | 'Canal' | 'Direct' | 'Door' | 'Endorse' | 'Funnel' | 'Gate'} [service] Service name to filter log entries.
     * @param {number} [from] Start time for the log search range (unixtime).
     * @param {number} [to] End time for the log search range (unixtime).
     * @param {number} [limit] Maximum number of log entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.getLogs = function (resourceType, resourceId, service, from, to, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.LogApiFp(this.configuration).getLogs(resourceType, resourceId, service, from, to, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LogApi;
}(base_1.BaseAPI));
exports.LogApi = LogApi;
/**
 * LoraDeviceApi - axios parameter creator
 * @export
 */
var LoraDeviceApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes a tag from the specified LoRa device.
         * @summary Delete LoRa device Tag.
         * @param {string} deviceId device ID of the target LoRa device.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraDeviceTag: function (deviceId, tagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('deleteLoraDeviceTag', 'deviceId', deviceId);
                            // verify required parameter 'tagName' is not null or undefined
                            common_1.assertParamExists('deleteLoraDeviceTag', 'tagName', tagName);
                            localVarPath = "/lora_devices/{device_id}/tags/{tag_name}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "tag_name" + "}", encodeURIComponent(String(tagName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Disables termination of specified LoRa device.
         * @summary Disable Termination of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnLoraDevice: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('disableTerminationOnLoraDevice', 'deviceId', deviceId);
                            localVarPath = "/lora_devices/{device_id}/disable_termination"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Enables termination of specified LoRa device.
         * @summary Enable Termination of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnLoraDevice: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('enableTerminationOnLoraDevice', 'deviceId', deviceId);
                            localVarPath = "/lora_devices/{device_id}/enable_termination"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a LoRa device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a LoRa device.
         * @param {string} deviceId Device ID of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromLoraDevice: function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('getDataFromLoraDevice', 'deviceId', deviceId);
                            localVarPath = "/lora_devices/{device_id}/data"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (sort !== undefined) {
                                localVarQueryParameter['sort'] = sort;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns information about the specified LoRa device.
         * @summary Get LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoraDevice: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('getLoraDevice', 'deviceId', deviceId);
                            localVarPath = "/lora_devices/{device_id}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of LoRa devices that match certain criteria. If the total number of LoRa devices does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa devices.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of LoRa devices to retrieve.
         * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoraDevices: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/lora_devices";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (tagName !== undefined) {
                                localVarQueryParameter['tag_name'] = tagName;
                            }
                            if (tagValue !== undefined) {
                                localVarQueryParameter['tag_value'] = tagValue;
                            }
                            if (tagValueMatchMode !== undefined) {
                                localVarQueryParameter['tag_value_match_mode'] = tagValueMatchMode;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified LoRa device.
         * @summary Bulk Insert or Update LoRa device Tags.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoraDeviceTags: function (deviceId, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('putLoraDeviceTags', 'deviceId', deviceId);
                            // verify required parameter 'tags' is not null or undefined
                            common_1.assertParamExists('putLoraDeviceTags', 'tags', tags);
                            localVarPath = "/lora_devices/{device_id}/tags"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Registers a LoRa device.
         * @summary Register LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {RegisterLoraDeviceRequest} loraDevice LoRa device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerLoraDevice: function (deviceId, loraDevice, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('registerLoraDevice', 'deviceId', deviceId);
                            // verify required parameter 'loraDevice' is not null or undefined
                            common_1.assertParamExists('registerLoraDevice', 'loraDevice', loraDevice);
                            localVarPath = "/lora_devices/{device_id}/register"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(loraDevice, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sends data to the specified LoRa device. The data is sent to the LoRa network server, to be sent out to the device using the next available slot. If another message destined for the same LoRa device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
         * @summary Send data to a LoRa device.
         * @param {string} deviceId ID of the recipient device.
         * @param {LoraData} data Binary data encoded as a hexadecimal string. Maximum length of original binary data is 11 octets (22 characters when encoded as a hexadecimal string). The number of characters must be even. fPort MUST be equal to or greater than 0. 0 is used for the control plane and 1 or greater values should be used in general. It defaults to 2 to avoid the issues of some devices from some vendors and all invalid values that can not be parsed fallback to 2.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDataToLoraDevice: function (deviceId, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('sendDataToLoraDevice', 'deviceId', deviceId);
                            // verify required parameter 'data' is not null or undefined
                            common_1.assertParamExists('sendDataToLoraDevice', 'data', data);
                            localVarPath = "/lora_devices/{device_id}/data"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(data, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified LoRa device.
         * @summary Set Group of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {Group} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLoraDeviceGroup: function (deviceId, group, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('setLoraDeviceGroup', 'deviceId', deviceId);
                            // verify required parameter 'group' is not null or undefined
                            common_1.assertParamExists('setLoraDeviceGroup', 'group', group);
                            localVarPath = "/lora_devices/{device_id}/set_group"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(group, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Terminates the specified LoRa device
         * @summary Terminate LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateLoraDevice: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('terminateLoraDevice', 'deviceId', deviceId);
                            localVarPath = "/lora_devices/{device_id}/terminate"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified LoRa device.
         * @summary Unset Group of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetLoraDeviceGroup: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('unsetLoraDeviceGroup', 'deviceId', deviceId);
                            localVarPath = "/lora_devices/{device_id}/unset_group"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.LoraDeviceApiAxiosParamCreator = LoraDeviceApiAxiosParamCreator;
/**
 * LoraDeviceApi - functional programming interface
 * @export
 */
var LoraDeviceApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.LoraDeviceApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes a tag from the specified LoRa device.
         * @summary Delete LoRa device Tag.
         * @param {string} deviceId device ID of the target LoRa device.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraDeviceTag: function (deviceId, tagName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteLoraDeviceTag(deviceId, tagName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Disables termination of specified LoRa device.
         * @summary Disable Termination of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnLoraDevice: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disableTerminationOnLoraDevice(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Enables termination of specified LoRa device.
         * @summary Enable Termination of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnLoraDevice: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableTerminationOnLoraDevice(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a LoRa device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a LoRa device.
         * @param {string} deviceId Device ID of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromLoraDevice: function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDataFromLoraDevice(deviceId, from, to, sort, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns information about the specified LoRa device.
         * @summary Get LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoraDevice: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLoraDevice(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of LoRa devices that match certain criteria. If the total number of LoRa devices does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa devices.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of LoRa devices to retrieve.
         * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoraDevices: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listLoraDevices(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified LoRa device.
         * @summary Bulk Insert or Update LoRa device Tags.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoraDeviceTags: function (deviceId, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putLoraDeviceTags(deviceId, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Registers a LoRa device.
         * @summary Register LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {RegisterLoraDeviceRequest} loraDevice LoRa device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerLoraDevice: function (deviceId, loraDevice, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerLoraDevice(deviceId, loraDevice, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sends data to the specified LoRa device. The data is sent to the LoRa network server, to be sent out to the device using the next available slot. If another message destined for the same LoRa device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
         * @summary Send data to a LoRa device.
         * @param {string} deviceId ID of the recipient device.
         * @param {LoraData} data Binary data encoded as a hexadecimal string. Maximum length of original binary data is 11 octets (22 characters when encoded as a hexadecimal string). The number of characters must be even. fPort MUST be equal to or greater than 0. 0 is used for the control plane and 1 or greater values should be used in general. It defaults to 2 to avoid the issues of some devices from some vendors and all invalid values that can not be parsed fallback to 2.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDataToLoraDevice: function (deviceId, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendDataToLoraDevice(deviceId, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified LoRa device.
         * @summary Set Group of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {Group} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLoraDeviceGroup: function (deviceId, group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setLoraDeviceGroup(deviceId, group, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Terminates the specified LoRa device
         * @summary Terminate LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateLoraDevice: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.terminateLoraDevice(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified LoRa device.
         * @summary Unset Group of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetLoraDeviceGroup: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetLoraDeviceGroup(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.LoraDeviceApiFp = LoraDeviceApiFp;
/**
 * LoraDeviceApi - factory interface
 * @export
 */
var LoraDeviceApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.LoraDeviceApiFp(configuration);
    return {
        /**
         * Deletes a tag from the specified LoRa device.
         * @summary Delete LoRa device Tag.
         * @param {string} deviceId device ID of the target LoRa device.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraDeviceTag: function (deviceId, tagName, options) {
            return localVarFp.deleteLoraDeviceTag(deviceId, tagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Disables termination of specified LoRa device.
         * @summary Disable Termination of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnLoraDevice: function (deviceId, options) {
            return localVarFp.disableTerminationOnLoraDevice(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Enables termination of specified LoRa device.
         * @summary Enable Termination of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnLoraDevice: function (deviceId, options) {
            return localVarFp.enableTerminationOnLoraDevice(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of data entries sent from a LoRa device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a LoRa device.
         * @param {string} deviceId Device ID of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromLoraDevice: function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
            return localVarFp.getDataFromLoraDevice(deviceId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns information about the specified LoRa device.
         * @summary Get LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoraDevice: function (deviceId, options) {
            return localVarFp.getLoraDevice(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of LoRa devices that match certain criteria. If the total number of LoRa devices does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa devices.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of LoRa devices to retrieve.
         * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoraDevices: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return localVarFp.listLoraDevices(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Inserts/updates tags for the specified LoRa device.
         * @summary Bulk Insert or Update LoRa device Tags.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoraDeviceTags: function (deviceId, tags, options) {
            return localVarFp.putLoraDeviceTags(deviceId, tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Registers a LoRa device.
         * @summary Register LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {RegisterLoraDeviceRequest} loraDevice LoRa device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerLoraDevice: function (deviceId, loraDevice, options) {
            return localVarFp.registerLoraDevice(deviceId, loraDevice, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sends data to the specified LoRa device. The data is sent to the LoRa network server, to be sent out to the device using the next available slot. If another message destined for the same LoRa device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
         * @summary Send data to a LoRa device.
         * @param {string} deviceId ID of the recipient device.
         * @param {LoraData} data Binary data encoded as a hexadecimal string. Maximum length of original binary data is 11 octets (22 characters when encoded as a hexadecimal string). The number of characters must be even. fPort MUST be equal to or greater than 0. 0 is used for the control plane and 1 or greater values should be used in general. It defaults to 2 to avoid the issues of some devices from some vendors and all invalid values that can not be parsed fallback to 2.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDataToLoraDevice: function (deviceId, data, options) {
            return localVarFp.sendDataToLoraDevice(deviceId, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets or overwrites a group for the specified LoRa device.
         * @summary Set Group of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {Group} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLoraDeviceGroup: function (deviceId, group, options) {
            return localVarFp.setLoraDeviceGroup(deviceId, group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Terminates the specified LoRa device
         * @summary Terminate LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateLoraDevice: function (deviceId, options) {
            return localVarFp.terminateLoraDevice(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes the group configuration from the specified LoRa device.
         * @summary Unset Group of LoRa device.
         * @param {string} deviceId Device ID of the target LoRa device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetLoraDeviceGroup: function (deviceId, options) {
            return localVarFp.unsetLoraDeviceGroup(deviceId, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.LoraDeviceApiFactory = LoraDeviceApiFactory;
/**
 * LoraDeviceApi - object-oriented interface
 * @export
 * @class LoraDeviceApi
 * @extends {BaseAPI}
 */
var LoraDeviceApi = /** @class */ (function (_super) {
    __extends(LoraDeviceApi, _super);
    function LoraDeviceApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a tag from the specified LoRa device.
     * @summary Delete LoRa device Tag.
     * @param {string} deviceId device ID of the target LoRa device.
     * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.deleteLoraDeviceTag = function (deviceId, tagName, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).deleteLoraDeviceTag(deviceId, tagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Disables termination of specified LoRa device.
     * @summary Disable Termination of LoRa device.
     * @param {string} deviceId Device ID of the target LoRa device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.disableTerminationOnLoraDevice = function (deviceId, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).disableTerminationOnLoraDevice(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Enables termination of specified LoRa device.
     * @summary Enable Termination of LoRa device.
     * @param {string} deviceId Device ID of the target LoRa device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.enableTerminationOnLoraDevice = function (deviceId, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).enableTerminationOnLoraDevice(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of data entries sent from a LoRa device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary Get data sent from a LoRa device.
     * @param {string} deviceId Device ID of the target subscriber that generated data entries.
     * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
     * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
     * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
     * @param {number} [limit] Maximum number of data entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.getDataFromLoraDevice = function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).getDataFromLoraDevice(deviceId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns information about the specified LoRa device.
     * @summary Get LoRa device.
     * @param {string} deviceId Device ID of the target LoRa device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.getLoraDevice = function (deviceId, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).getLoraDevice(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of LoRa devices that match certain criteria. If the total number of LoRa devices does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary List LoRa devices.
     * @param {string} [tagName] Tag name for filtering the search (exact match).
     * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
     * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
     * @param {number} [limit] Maximum number of LoRa devices to retrieve.
     * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.listLoraDevices = function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).listLoraDevices(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Inserts/updates tags for the specified LoRa device.
     * @summary Bulk Insert or Update LoRa device Tags.
     * @param {string} deviceId Device ID of the target LoRa device.
     * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.putLoraDeviceTags = function (deviceId, tags, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).putLoraDeviceTags(deviceId, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Registers a LoRa device.
     * @summary Register LoRa device.
     * @param {string} deviceId Device ID of the target LoRa device.
     * @param {RegisterLoraDeviceRequest} loraDevice LoRa device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.registerLoraDevice = function (deviceId, loraDevice, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).registerLoraDevice(deviceId, loraDevice, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sends data to the specified LoRa device. The data is sent to the LoRa network server, to be sent out to the device using the next available slot. If another message destined for the same LoRa device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
     * @summary Send data to a LoRa device.
     * @param {string} deviceId ID of the recipient device.
     * @param {LoraData} data Binary data encoded as a hexadecimal string. Maximum length of original binary data is 11 octets (22 characters when encoded as a hexadecimal string). The number of characters must be even. fPort MUST be equal to or greater than 0. 0 is used for the control plane and 1 or greater values should be used in general. It defaults to 2 to avoid the issues of some devices from some vendors and all invalid values that can not be parsed fallback to 2.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.sendDataToLoraDevice = function (deviceId, data, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).sendDataToLoraDevice(deviceId, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets or overwrites a group for the specified LoRa device.
     * @summary Set Group of LoRa device.
     * @param {string} deviceId Device ID of the target LoRa device.
     * @param {Group} group Group (may include ID only).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.setLoraDeviceGroup = function (deviceId, group, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).setLoraDeviceGroup(deviceId, group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Terminates the specified LoRa device
     * @summary Terminate LoRa device.
     * @param {string} deviceId Device ID of the target LoRa device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.terminateLoraDevice = function (deviceId, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).terminateLoraDevice(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes the group configuration from the specified LoRa device.
     * @summary Unset Group of LoRa device.
     * @param {string} deviceId Device ID of the target LoRa device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraDeviceApi
     */
    LoraDeviceApi.prototype.unsetLoraDeviceGroup = function (deviceId, options) {
        var _this = this;
        return exports.LoraDeviceApiFp(this.configuration).unsetLoraDeviceGroup(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LoraDeviceApi;
}(base_1.BaseAPI));
exports.LoraDeviceApi = LoraDeviceApi;
/**
 * LoraGatewayApi - axios parameter creator
 * @export
 */
var LoraGatewayApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes a tag from the specified LoRa gateway.
         * @summary Delete LoRa gateway tag.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {string} tagName Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraGatewayTag: function (gatewayId, tagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'gatewayId' is not null or undefined
                            common_1.assertParamExists('deleteLoraGatewayTag', 'gatewayId', gatewayId);
                            // verify required parameter 'tagName' is not null or undefined
                            common_1.assertParamExists('deleteLoraGatewayTag', 'tagName', tagName);
                            localVarPath = "/lora_gateways/{gateway_id}/tags/{tag_name}"
                                .replace("{" + "gateway_id" + "}", encodeURIComponent(String(gatewayId)))
                                .replace("{" + "tag_name" + "}", encodeURIComponent(String(tagName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Disables termination of specified LoRa gateway.
         * @summary Disable Termination of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnLoraGateway: function (gatewayId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'gatewayId' is not null or undefined
                            common_1.assertParamExists('disableTerminationOnLoraGateway', 'gatewayId', gatewayId);
                            localVarPath = "/lora_gateways/{gateway_id}/disable_termination"
                                .replace("{" + "gateway_id" + "}", encodeURIComponent(String(gatewayId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Enables termination of specified LoRa gateway.
         * @summary Enable Termination of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnLoraGateway: function (gatewayId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'gatewayId' is not null or undefined
                            common_1.assertParamExists('enableTerminationOnLoraGateway', 'gatewayId', gatewayId);
                            localVarPath = "/lora_gateways/{gateway_id}/enable_termination"
                                .replace("{" + "gateway_id" + "}", encodeURIComponent(String(gatewayId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns information about the specified LoRa gateway.
         * @summary Get LoRa gateway.
         * @param {string} gatewayId Gateway ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoraGateway: function (gatewayId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'gatewayId' is not null or undefined
                            common_1.assertParamExists('getLoraGateway', 'gatewayId', gatewayId);
                            localVarPath = "/lora_gateways/{gateway_id}"
                                .replace("{" + "gateway_id" + "}", encodeURIComponent(String(gatewayId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of LoRa gateways that match certain criteria. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa Gateways.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of LoRa devices to retrieve.
         * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoraGateways: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/lora_gateways";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (tagName !== undefined) {
                                localVarQueryParameter['tag_name'] = tagName;
                            }
                            if (tagValue !== undefined) {
                                localVarQueryParameter['tag_value'] = tagValue;
                            }
                            if (tagValueMatchMode !== undefined) {
                                localVarQueryParameter['tag_value_match_mode'] = tagValueMatchMode;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified LoRa gateway.
         * @summary Bulk Insert or Update LoRa gateway Tags.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoraGatewayTags: function (gatewayId, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'gatewayId' is not null or undefined
                            common_1.assertParamExists('putLoraGatewayTags', 'gatewayId', gatewayId);
                            // verify required parameter 'tags' is not null or undefined
                            common_1.assertParamExists('putLoraGatewayTags', 'tags', tags);
                            localVarPath = "/lora_gateways/{gateway_id}/tags"
                                .replace("{" + "gateway_id" + "}", encodeURIComponent(String(gatewayId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets or overwrites network set ID for the specified LoRa gateway.
         * @summary Set Network Set ID of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {SetNetworkSetRequest} [nsId] LoRa Network Set ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLoraNetworkSet: function (gatewayId, nsId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'gatewayId' is not null or undefined
                            common_1.assertParamExists('setLoraNetworkSet', 'gatewayId', gatewayId);
                            localVarPath = "/lora_gateways/{gateway_id}/set_network_set"
                                .replace("{" + "gateway_id" + "}", encodeURIComponent(String(gatewayId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'text/plain';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(nsId, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Terminates the specified LoRa gateway
         * @summary Terminate LoRa gateway.
         * @param {string} gatewayId Device ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateLoraGateway: function (gatewayId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'gatewayId' is not null or undefined
                            common_1.assertParamExists('terminateLoraGateway', 'gatewayId', gatewayId);
                            localVarPath = "/lora_gateways/{gateway_id}/terminate"
                                .replace("{" + "gateway_id" + "}", encodeURIComponent(String(gatewayId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Unset network set ID of the specified LoRa gateway.
         * @summary Unset Network Set ID of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetLoraNetworkSet: function (gatewayId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'gatewayId' is not null or undefined
                            common_1.assertParamExists('unsetLoraNetworkSet', 'gatewayId', gatewayId);
                            localVarPath = "/lora_gateways/{gateway_id}/unset_network_set"
                                .replace("{" + "gateway_id" + "}", encodeURIComponent(String(gatewayId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.LoraGatewayApiAxiosParamCreator = LoraGatewayApiAxiosParamCreator;
/**
 * LoraGatewayApi - functional programming interface
 * @export
 */
var LoraGatewayApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.LoraGatewayApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes a tag from the specified LoRa gateway.
         * @summary Delete LoRa gateway tag.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {string} tagName Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraGatewayTag: function (gatewayId, tagName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteLoraGatewayTag(gatewayId, tagName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Disables termination of specified LoRa gateway.
         * @summary Disable Termination of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnLoraGateway: function (gatewayId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disableTerminationOnLoraGateway(gatewayId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Enables termination of specified LoRa gateway.
         * @summary Enable Termination of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnLoraGateway: function (gatewayId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableTerminationOnLoraGateway(gatewayId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns information about the specified LoRa gateway.
         * @summary Get LoRa gateway.
         * @param {string} gatewayId Gateway ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoraGateway: function (gatewayId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLoraGateway(gatewayId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of LoRa gateways that match certain criteria. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa Gateways.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of LoRa devices to retrieve.
         * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoraGateways: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listLoraGateways(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified LoRa gateway.
         * @summary Bulk Insert or Update LoRa gateway Tags.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoraGatewayTags: function (gatewayId, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putLoraGatewayTags(gatewayId, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets or overwrites network set ID for the specified LoRa gateway.
         * @summary Set Network Set ID of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {SetNetworkSetRequest} [nsId] LoRa Network Set ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLoraNetworkSet: function (gatewayId, nsId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setLoraNetworkSet(gatewayId, nsId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Terminates the specified LoRa gateway
         * @summary Terminate LoRa gateway.
         * @param {string} gatewayId Device ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateLoraGateway: function (gatewayId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.terminateLoraGateway(gatewayId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Unset network set ID of the specified LoRa gateway.
         * @summary Unset Network Set ID of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetLoraNetworkSet: function (gatewayId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetLoraNetworkSet(gatewayId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.LoraGatewayApiFp = LoraGatewayApiFp;
/**
 * LoraGatewayApi - factory interface
 * @export
 */
var LoraGatewayApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.LoraGatewayApiFp(configuration);
    return {
        /**
         * Deletes a tag from the specified LoRa gateway.
         * @summary Delete LoRa gateway tag.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {string} tagName Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraGatewayTag: function (gatewayId, tagName, options) {
            return localVarFp.deleteLoraGatewayTag(gatewayId, tagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Disables termination of specified LoRa gateway.
         * @summary Disable Termination of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnLoraGateway: function (gatewayId, options) {
            return localVarFp.disableTerminationOnLoraGateway(gatewayId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Enables termination of specified LoRa gateway.
         * @summary Enable Termination of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnLoraGateway: function (gatewayId, options) {
            return localVarFp.enableTerminationOnLoraGateway(gatewayId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns information about the specified LoRa gateway.
         * @summary Get LoRa gateway.
         * @param {string} gatewayId Gateway ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoraGateway: function (gatewayId, options) {
            return localVarFp.getLoraGateway(gatewayId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of LoRa gateways that match certain criteria. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa Gateways.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of LoRa devices to retrieve.
         * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoraGateways: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return localVarFp.listLoraGateways(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Inserts/updates tags for the specified LoRa gateway.
         * @summary Bulk Insert or Update LoRa gateway Tags.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoraGatewayTags: function (gatewayId, tags, options) {
            return localVarFp.putLoraGatewayTags(gatewayId, tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets or overwrites network set ID for the specified LoRa gateway.
         * @summary Set Network Set ID of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {SetNetworkSetRequest} [nsId] LoRa Network Set ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLoraNetworkSet: function (gatewayId, nsId, options) {
            return localVarFp.setLoraNetworkSet(gatewayId, nsId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Terminates the specified LoRa gateway
         * @summary Terminate LoRa gateway.
         * @param {string} gatewayId Device ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateLoraGateway: function (gatewayId, options) {
            return localVarFp.terminateLoraGateway(gatewayId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Unset network set ID of the specified LoRa gateway.
         * @summary Unset Network Set ID of LoRa gateway.
         * @param {string} gatewayId ID of the target LoRa gateway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetLoraNetworkSet: function (gatewayId, options) {
            return localVarFp.unsetLoraNetworkSet(gatewayId, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.LoraGatewayApiFactory = LoraGatewayApiFactory;
/**
 * LoraGatewayApi - object-oriented interface
 * @export
 * @class LoraGatewayApi
 * @extends {BaseAPI}
 */
var LoraGatewayApi = /** @class */ (function (_super) {
    __extends(LoraGatewayApi, _super);
    function LoraGatewayApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a tag from the specified LoRa gateway.
     * @summary Delete LoRa gateway tag.
     * @param {string} gatewayId ID of the target LoRa gateway.
     * @param {string} tagName Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraGatewayApi
     */
    LoraGatewayApi.prototype.deleteLoraGatewayTag = function (gatewayId, tagName, options) {
        var _this = this;
        return exports.LoraGatewayApiFp(this.configuration).deleteLoraGatewayTag(gatewayId, tagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Disables termination of specified LoRa gateway.
     * @summary Disable Termination of LoRa gateway.
     * @param {string} gatewayId ID of the target LoRa gateway.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraGatewayApi
     */
    LoraGatewayApi.prototype.disableTerminationOnLoraGateway = function (gatewayId, options) {
        var _this = this;
        return exports.LoraGatewayApiFp(this.configuration).disableTerminationOnLoraGateway(gatewayId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Enables termination of specified LoRa gateway.
     * @summary Enable Termination of LoRa gateway.
     * @param {string} gatewayId ID of the target LoRa gateway.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraGatewayApi
     */
    LoraGatewayApi.prototype.enableTerminationOnLoraGateway = function (gatewayId, options) {
        var _this = this;
        return exports.LoraGatewayApiFp(this.configuration).enableTerminationOnLoraGateway(gatewayId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns information about the specified LoRa gateway.
     * @summary Get LoRa gateway.
     * @param {string} gatewayId Gateway ID of the target LoRa gateway.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraGatewayApi
     */
    LoraGatewayApi.prototype.getLoraGateway = function (gatewayId, options) {
        var _this = this;
        return exports.LoraGatewayApiFp(this.configuration).getLoraGateway(gatewayId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of LoRa gateways that match certain criteria. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary List LoRa Gateways.
     * @param {string} [tagName] Tag name for filtering the search (exact match).
     * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
     * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
     * @param {number} [limit] Maximum number of LoRa devices to retrieve.
     * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraGatewayApi
     */
    LoraGatewayApi.prototype.listLoraGateways = function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.LoraGatewayApiFp(this.configuration).listLoraGateways(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Inserts/updates tags for the specified LoRa gateway.
     * @summary Bulk Insert or Update LoRa gateway Tags.
     * @param {string} gatewayId ID of the target LoRa gateway.
     * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraGatewayApi
     */
    LoraGatewayApi.prototype.putLoraGatewayTags = function (gatewayId, tags, options) {
        var _this = this;
        return exports.LoraGatewayApiFp(this.configuration).putLoraGatewayTags(gatewayId, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets or overwrites network set ID for the specified LoRa gateway.
     * @summary Set Network Set ID of LoRa gateway.
     * @param {string} gatewayId ID of the target LoRa gateway.
     * @param {SetNetworkSetRequest} [nsId] LoRa Network Set ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraGatewayApi
     */
    LoraGatewayApi.prototype.setLoraNetworkSet = function (gatewayId, nsId, options) {
        var _this = this;
        return exports.LoraGatewayApiFp(this.configuration).setLoraNetworkSet(gatewayId, nsId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Terminates the specified LoRa gateway
     * @summary Terminate LoRa gateway.
     * @param {string} gatewayId Device ID of the target LoRa gateway.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraGatewayApi
     */
    LoraGatewayApi.prototype.terminateLoraGateway = function (gatewayId, options) {
        var _this = this;
        return exports.LoraGatewayApiFp(this.configuration).terminateLoraGateway(gatewayId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Unset network set ID of the specified LoRa gateway.
     * @summary Unset Network Set ID of LoRa gateway.
     * @param {string} gatewayId ID of the target LoRa gateway.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraGatewayApi
     */
    LoraGatewayApi.prototype.unsetLoraNetworkSet = function (gatewayId, options) {
        var _this = this;
        return exports.LoraGatewayApiFp(this.configuration).unsetLoraNetworkSet(gatewayId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LoraGatewayApi;
}(base_1.BaseAPI));
exports.LoraGatewayApi = LoraGatewayApi;
/**
 * LoraNetworkSetApi - axios parameter creator
 * @export
 */
var LoraNetworkSetApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds permission to allow another operator to use the network set.
         * @summary Adds permission to a LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {UpdatePermissionRequest} operatorId ID of the operator to be added to the list of allowed operators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPermissionToLoraNetworkSet: function (nsId, operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nsId' is not null or undefined
                            common_1.assertParamExists('addPermissionToLoraNetworkSet', 'nsId', nsId);
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('addPermissionToLoraNetworkSet', 'operatorId', operatorId);
                            localVarPath = "/lora_network_sets/{ns_id}/add_permission"
                                .replace("{" + "ns_id" + "}", encodeURIComponent(String(nsId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(operatorId, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Creates a specified LoRa network set
         * @summary Create a LoRa network set.
         * @param {LoraNetworkSet} loraNetworkSet Additional metadata such as tags for a LoRa network set to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoraNetworkSet: function (loraNetworkSet, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'loraNetworkSet' is not null or undefined
                            common_1.assertParamExists('createLoraNetworkSet', 'loraNetworkSet', loraNetworkSet);
                            localVarPath = "/lora_network_sets";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(loraNetworkSet, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the specified LoRa network set
         * @summary Delete LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraNetworkSet: function (nsId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nsId' is not null or undefined
                            common_1.assertParamExists('deleteLoraNetworkSet', 'nsId', nsId);
                            localVarPath = "/lora_network_sets/{ns_id}"
                                .replace("{" + "ns_id" + "}", encodeURIComponent(String(nsId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a tag from the specified LoRa network set.
         * @summary Delete LoRa network set tag.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {string} tagName Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraNetworkSetTag: function (nsId, tagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nsId' is not null or undefined
                            common_1.assertParamExists('deleteLoraNetworkSetTag', 'nsId', nsId);
                            // verify required parameter 'tagName' is not null or undefined
                            common_1.assertParamExists('deleteLoraNetworkSetTag', 'tagName', tagName);
                            localVarPath = "/lora_network_sets/{ns_id}/tags/{tag_name}"
                                .replace("{" + "ns_id" + "}", encodeURIComponent(String(nsId)))
                                .replace("{" + "tag_name" + "}", encodeURIComponent(String(tagName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns information about the specified LoRa network set.
         * @summary Get LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoraNetworkSet: function (nsId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nsId' is not null or undefined
                            common_1.assertParamExists('getLoraNetworkSet', 'nsId', nsId);
                            localVarPath = "/lora_network_sets/{ns_id}"
                                .replace("{" + "ns_id" + "}", encodeURIComponent(String(nsId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of LoRa gateways that belong to the specified network set. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa Gateways in a Network Set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {number} [limit] Maximum number of LoRa gateways to retrieve.
         * @param {string} [lastEvaluatedKey] The ID of the last gateway retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGatewaysInLoraNetworkSet: function (nsId, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nsId' is not null or undefined
                            common_1.assertParamExists('listGatewaysInLoraNetworkSet', 'nsId', nsId);
                            localVarPath = "/lora_network_sets/{ns_id}/gateways"
                                .replace("{" + "ns_id" + "}", encodeURIComponent(String(nsId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of LoRa network sets that match certain criteria. If the total number of LoRa network sets does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa Network Sets.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of LoRa devices to retrieve.
         * @param {string} [lastEvaluatedKey] The ID of the last network set retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoraNetworkSets: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/lora_network_sets";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (tagName !== undefined) {
                                localVarQueryParameter['tag_name'] = tagName;
                            }
                            if (tagValue !== undefined) {
                                localVarQueryParameter['tag_value'] = tagValue;
                            }
                            if (tagValueMatchMode !== undefined) {
                                localVarQueryParameter['tag_value_match_mode'] = tagValueMatchMode;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified LoRa network set.
         * @summary Bulk Insert or Update LoRa network set tags.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoraNetworkSetTags: function (nsId, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'nsId' is not null or undefined
                    common_1.assertParamExists('putLoraNetworkSetTags', 'nsId', nsId);
                    // verify required parameter 'tags' is not null or undefined
                    common_1.assertParamExists('putLoraNetworkSetTags', 'tags', tags);
                    localVarPath = "/lora_network_sets/{ns_id}/tags"
                        .replace("{" + "ns_id" + "}", encodeURIComponent(String(nsId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * Revokes a permission and removes an operator from the list of allowed operators in the network set.
         * @summary Revokes a permission from a LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {UpdatePermissionRequest} operatorId ID of the operator to be added to the list of allowed operators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokePermissionFromLoraNetworkSet: function (nsId, operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nsId' is not null or undefined
                            common_1.assertParamExists('revokePermissionFromLoraNetworkSet', 'nsId', nsId);
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('revokePermissionFromLoraNetworkSet', 'operatorId', operatorId);
                            localVarPath = "/lora_network_sets/{ns_id}/revoke_permission"
                                .replace("{" + "ns_id" + "}", encodeURIComponent(String(nsId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(operatorId, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.LoraNetworkSetApiAxiosParamCreator = LoraNetworkSetApiAxiosParamCreator;
/**
 * LoraNetworkSetApi - functional programming interface
 * @export
 */
var LoraNetworkSetApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.LoraNetworkSetApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds permission to allow another operator to use the network set.
         * @summary Adds permission to a LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {UpdatePermissionRequest} operatorId ID of the operator to be added to the list of allowed operators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPermissionToLoraNetworkSet: function (nsId, operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addPermissionToLoraNetworkSet(nsId, operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Creates a specified LoRa network set
         * @summary Create a LoRa network set.
         * @param {LoraNetworkSet} loraNetworkSet Additional metadata such as tags for a LoRa network set to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoraNetworkSet: function (loraNetworkSet, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createLoraNetworkSet(loraNetworkSet, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the specified LoRa network set
         * @summary Delete LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraNetworkSet: function (nsId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteLoraNetworkSet(nsId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a tag from the specified LoRa network set.
         * @summary Delete LoRa network set tag.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {string} tagName Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraNetworkSetTag: function (nsId, tagName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteLoraNetworkSetTag(nsId, tagName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns information about the specified LoRa network set.
         * @summary Get LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoraNetworkSet: function (nsId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLoraNetworkSet(nsId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of LoRa gateways that belong to the specified network set. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa Gateways in a Network Set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {number} [limit] Maximum number of LoRa gateways to retrieve.
         * @param {string} [lastEvaluatedKey] The ID of the last gateway retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGatewaysInLoraNetworkSet: function (nsId, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listGatewaysInLoraNetworkSet(nsId, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of LoRa network sets that match certain criteria. If the total number of LoRa network sets does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa Network Sets.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of LoRa devices to retrieve.
         * @param {string} [lastEvaluatedKey] The ID of the last network set retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoraNetworkSets: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listLoraNetworkSets(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified LoRa network set.
         * @summary Bulk Insert or Update LoRa network set tags.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoraNetworkSetTags: function (nsId, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putLoraNetworkSetTags(nsId, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Revokes a permission and removes an operator from the list of allowed operators in the network set.
         * @summary Revokes a permission from a LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {UpdatePermissionRequest} operatorId ID of the operator to be added to the list of allowed operators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokePermissionFromLoraNetworkSet: function (nsId, operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.revokePermissionFromLoraNetworkSet(nsId, operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.LoraNetworkSetApiFp = LoraNetworkSetApiFp;
/**
 * LoraNetworkSetApi - factory interface
 * @export
 */
var LoraNetworkSetApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.LoraNetworkSetApiFp(configuration);
    return {
        /**
         * Adds permission to allow another operator to use the network set.
         * @summary Adds permission to a LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {UpdatePermissionRequest} operatorId ID of the operator to be added to the list of allowed operators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPermissionToLoraNetworkSet: function (nsId, operatorId, options) {
            return localVarFp.addPermissionToLoraNetworkSet(nsId, operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a specified LoRa network set
         * @summary Create a LoRa network set.
         * @param {LoraNetworkSet} loraNetworkSet Additional metadata such as tags for a LoRa network set to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoraNetworkSet: function (loraNetworkSet, options) {
            return localVarFp.createLoraNetworkSet(loraNetworkSet, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the specified LoRa network set
         * @summary Delete LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraNetworkSet: function (nsId, options) {
            return localVarFp.deleteLoraNetworkSet(nsId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a tag from the specified LoRa network set.
         * @summary Delete LoRa network set tag.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {string} tagName Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoraNetworkSetTag: function (nsId, tagName, options) {
            return localVarFp.deleteLoraNetworkSetTag(nsId, tagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns information about the specified LoRa network set.
         * @summary Get LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoraNetworkSet: function (nsId, options) {
            return localVarFp.getLoraNetworkSet(nsId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of LoRa gateways that belong to the specified network set. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa Gateways in a Network Set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {number} [limit] Maximum number of LoRa gateways to retrieve.
         * @param {string} [lastEvaluatedKey] The ID of the last gateway retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGatewaysInLoraNetworkSet: function (nsId, limit, lastEvaluatedKey, options) {
            return localVarFp.listGatewaysInLoraNetworkSet(nsId, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of LoRa network sets that match certain criteria. If the total number of LoRa network sets does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List LoRa Network Sets.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of LoRa devices to retrieve.
         * @param {string} [lastEvaluatedKey] The ID of the last network set retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoraNetworkSets: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return localVarFp.listLoraNetworkSets(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Inserts/updates tags for the specified LoRa network set.
         * @summary Bulk Insert or Update LoRa network set tags.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoraNetworkSetTags: function (nsId, tags, options) {
            return localVarFp.putLoraNetworkSetTags(nsId, tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revokes a permission and removes an operator from the list of allowed operators in the network set.
         * @summary Revokes a permission from a LoRa network set.
         * @param {string} nsId ID of the target LoRa network set.
         * @param {UpdatePermissionRequest} operatorId ID of the operator to be added to the list of allowed operators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokePermissionFromLoraNetworkSet: function (nsId, operatorId, options) {
            return localVarFp.revokePermissionFromLoraNetworkSet(nsId, operatorId, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.LoraNetworkSetApiFactory = LoraNetworkSetApiFactory;
/**
 * LoraNetworkSetApi - object-oriented interface
 * @export
 * @class LoraNetworkSetApi
 * @extends {BaseAPI}
 */
var LoraNetworkSetApi = /** @class */ (function (_super) {
    __extends(LoraNetworkSetApi, _super);
    function LoraNetworkSetApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds permission to allow another operator to use the network set.
     * @summary Adds permission to a LoRa network set.
     * @param {string} nsId ID of the target LoRa network set.
     * @param {UpdatePermissionRequest} operatorId ID of the operator to be added to the list of allowed operators.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraNetworkSetApi
     */
    LoraNetworkSetApi.prototype.addPermissionToLoraNetworkSet = function (nsId, operatorId, options) {
        var _this = this;
        return exports.LoraNetworkSetApiFp(this.configuration).addPermissionToLoraNetworkSet(nsId, operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a specified LoRa network set
     * @summary Create a LoRa network set.
     * @param {LoraNetworkSet} loraNetworkSet Additional metadata such as tags for a LoRa network set to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraNetworkSetApi
     */
    LoraNetworkSetApi.prototype.createLoraNetworkSet = function (loraNetworkSet, options) {
        var _this = this;
        return exports.LoraNetworkSetApiFp(this.configuration).createLoraNetworkSet(loraNetworkSet, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the specified LoRa network set
     * @summary Delete LoRa network set.
     * @param {string} nsId ID of the target LoRa network set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraNetworkSetApi
     */
    LoraNetworkSetApi.prototype.deleteLoraNetworkSet = function (nsId, options) {
        var _this = this;
        return exports.LoraNetworkSetApiFp(this.configuration).deleteLoraNetworkSet(nsId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a tag from the specified LoRa network set.
     * @summary Delete LoRa network set tag.
     * @param {string} nsId ID of the target LoRa network set.
     * @param {string} tagName Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraNetworkSetApi
     */
    LoraNetworkSetApi.prototype.deleteLoraNetworkSetTag = function (nsId, tagName, options) {
        var _this = this;
        return exports.LoraNetworkSetApiFp(this.configuration).deleteLoraNetworkSetTag(nsId, tagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns information about the specified LoRa network set.
     * @summary Get LoRa network set.
     * @param {string} nsId ID of the target LoRa network set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraNetworkSetApi
     */
    LoraNetworkSetApi.prototype.getLoraNetworkSet = function (nsId, options) {
        var _this = this;
        return exports.LoraNetworkSetApiFp(this.configuration).getLoraNetworkSet(nsId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of LoRa gateways that belong to the specified network set. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary List LoRa Gateways in a Network Set.
     * @param {string} nsId ID of the target LoRa network set.
     * @param {number} [limit] Maximum number of LoRa gateways to retrieve.
     * @param {string} [lastEvaluatedKey] The ID of the last gateway retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraNetworkSetApi
     */
    LoraNetworkSetApi.prototype.listGatewaysInLoraNetworkSet = function (nsId, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.LoraNetworkSetApiFp(this.configuration).listGatewaysInLoraNetworkSet(nsId, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of LoRa network sets that match certain criteria. If the total number of LoRa network sets does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary List LoRa Network Sets.
     * @param {string} [tagName] Tag name for filtering the search (exact match).
     * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
     * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
     * @param {number} [limit] Maximum number of LoRa devices to retrieve.
     * @param {string} [lastEvaluatedKey] The ID of the last network set retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraNetworkSetApi
     */
    LoraNetworkSetApi.prototype.listLoraNetworkSets = function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.LoraNetworkSetApiFp(this.configuration).listLoraNetworkSets(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Inserts/updates tags for the specified LoRa network set.
     * @summary Bulk Insert or Update LoRa network set tags.
     * @param {string} nsId ID of the target LoRa network set.
     * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraNetworkSetApi
     */
    LoraNetworkSetApi.prototype.putLoraNetworkSetTags = function (nsId, tags, options) {
        var _this = this;
        return exports.LoraNetworkSetApiFp(this.configuration).putLoraNetworkSetTags(nsId, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revokes a permission and removes an operator from the list of allowed operators in the network set.
     * @summary Revokes a permission from a LoRa network set.
     * @param {string} nsId ID of the target LoRa network set.
     * @param {UpdatePermissionRequest} operatorId ID of the operator to be added to the list of allowed operators.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoraNetworkSetApi
     */
    LoraNetworkSetApi.prototype.revokePermissionFromLoraNetworkSet = function (nsId, operatorId, options) {
        var _this = this;
        return exports.LoraNetworkSetApiFp(this.configuration).revokePermissionFromLoraNetworkSet(nsId, operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LoraNetworkSetApi;
}(base_1.BaseAPI));
exports.LoraNetworkSetApi = LoraNetworkSetApi;
/**
 * OperatorApi - axios parameter creator
 * @export
 */
var OperatorApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds the operator\'s coverage type.
         * @summary Add coverage type.
         * @param {string} operatorId operator_id
         * @param {string} coverageType coverage_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCoverageType: function (operatorId, coverageType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('addCoverageType', 'operatorId', operatorId);
                            // verify required parameter 'coverageType' is not null or undefined
                            common_1.assertParamExists('addCoverageType', 'coverageType', coverageType);
                            localVarPath = "/operators/{operator_id}/coverage_type/{coverage_type}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "coverage_type" + "}", encodeURIComponent(String(coverageType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Adds the operator\'s contract.
         * @summary Add Operator Contract.
         * @param {string} operatorId operator_id
         * @param {ContractUpdatingRequest} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOperatorContract: function (operatorId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('addOperatorContract', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('addOperatorContract', 'request', request);
                            localVarPath = "/operators/{operator_id}/contracts"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Creates the operator\'s company information.
         * @summary Create company information.
         * @param {string} operatorId operator_id
         * @param {CompanyInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyInformation: function (operatorId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('createCompanyInformation', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createCompanyInformation', 'request', request);
                            localVarPath = "/operators/{operator_id}/company_information"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Creates the operator\'s individual information.
         * @summary Create individual information.
         * @param {string} operatorId operator_id
         * @param {IndividualInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndividualInformation: function (operatorId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('createIndividualInformation', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createIndividualInformation', 'request', request);
                            localVarPath = "/operators/{operator_id}/individual_information"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Makes a request to create a new operator. An e-mail is sent to the e-mail address specified in the parameters, containing a one-time token for verifying the operator’s registration.
         * @summary Create Operator.
         * @param {RegisterOperatorsRequest} request email, password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperator: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createOperator', 'request', request);
                            localVarPath = "/operators";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an AuthKey from the operator.
         * @summary Delete Operator AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} authKeyId auth_key_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorAuthKey: function (operatorId, authKeyId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('deleteOperatorAuthKey', 'operatorId', operatorId);
                            // verify required parameter 'authKeyId' is not null or undefined
                            common_1.assertParamExists('deleteOperatorAuthKey', 'authKeyId', authKeyId);
                            localVarPath = "/operators/{operator_id}/auth_keys/{auth_key_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "auth_key_id" + "}", encodeURIComponent(String(authKeyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the operator\'s contract.
         * @summary Delete Operator Contract.
         * @param {string} operatorId operator_id
         * @param {string} contractName contract_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorContract: function (operatorId, contractName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('deleteOperatorContract', 'operatorId', operatorId);
                            // verify required parameter 'contractName' is not null or undefined
                            common_1.assertParamExists('deleteOperatorContract', 'contractName', contractName);
                            localVarPath = "/operators/{operator_id}/contracts/{contract_name}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "contract_name" + "}", encodeURIComponent(String(contractName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Enables operator\'s MFA. After calling this APIg, it should be verified by calling `Operator:verifyMFA` API.
         * @summary Enable Operator\'s MFA.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableMFA: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('enableMFA', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/mfa"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Generates a new API token. If you insert the current API token into the header and make a request, a response is returned containing the new API token. You can then use the new API token in future requests.
         * @summary Generate Authentication Token.
         * @param {string} operatorId operator_id
         * @param {GenerateTokenRequest} request token timeout seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAuthToken: function (operatorId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('generateAuthToken', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('generateAuthToken', 'request', request);
                            localVarPath = "/operators/{operator_id}/token"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Generates an AuthKey for the operator.
         * @summary Generate Operator AuthKey.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOperatorAuthKey: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('generateOperatorAuthKey', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/auth_keys"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a token for accessing the support console.
         * @summary Generate Token for Support Console.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSupportToken: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('generateSupportToken', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/support/token"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Gets the operator\'s company information.
         * @summary Get company information.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyInformation: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getCompanyInformation', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/company_information"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Gets the operator\'s individual information.
         * @summary Get individual information.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualInformation: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getIndividualInformation', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/individual_information"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Gets operator\'s MFA status. The MFA status is one of `ACTIVE`, `INACTIVE` or `UNCONFIRMED`.
         * @summary Get Operator\'s MFA Status.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMFAStatus: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getMFAStatus', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/mfa"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns information about the operator.
         * @summary Get Operator.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperator: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getOperator', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sends an e-mail with a one-time token for executing the e-mail address change.
         * @summary Issue Email Change Token.
         * @param {IssueEmailChangeTokenRequest} request email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueEmailChangeToken: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('issueEmailChangeToken', 'request', request);
                            localVarPath = "/operators/email_change_token/issue";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Issues a token to revoke operator\'s MFA. The issued token will be sent to the operator via email.
         * @summary Issue Operator\'s MFA Revoke Token.
         * @param {MFAIssueRevokingTokenRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueMFARevokingToken: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    common_1.assertParamExists('issueMFARevokingToken', 'request', request);
                    localVarPath = "/operators/mfa_revoke_token/issue";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * Returns the operator\'s AuthKey list.
         * @summary List Operator AuthKeys.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOperatorAuthKeys: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('listOperatorAuthKeys', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/auth_keys"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Revokes operator\'s MFA without backup codes.
         * @summary Revoke Operator\'s MFA.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeMFA: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('revokeMFA', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/mfa"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates the operator\'s company information.
         * @summary Update company information.
         * @param {string} operatorId operator_id
         * @param {CompanyInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyInformation: function (operatorId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('updateCompanyInformation', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateCompanyInformation', 'request', request);
                            localVarPath = "/operators/{operator_id}/company_information"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates the operator\'s individual information.
         * @summary Update individual information.
         * @param {string} operatorId operator_id
         * @param {IndividualInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIndividualInformation: function (operatorId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('updateIndividualInformation', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateIndividualInformation', 'request', request);
                            localVarPath = "/operators/{operator_id}/individual_information"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates the operator\'s password.
         * @summary Update Operator Password.
         * @param {string} operatorId operator_id
         * @param {UpdatePasswordRequest} request current password, new password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOperatorPassword: function (operatorId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('updateOperatorPassword', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateOperatorPassword', 'request', request);
                            localVarPath = "/operators/{operator_id}/password"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Verifies the token for the e-mail address change, and then changes the e-mail address.
         * @summary Verify Email Change Token.
         * @param {VerifyEmailChangeTokenRequest} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailChangeToken: function (token, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'token' is not null or undefined
                            common_1.assertParamExists('verifyEmailChangeToken', 'token', token);
                            localVarPath = "/operators/email_change_token/verify";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(token, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Verifies operator\'s MFA with OTP code after calling `Operator:enableMFA` API. MFA will not be activated unless the MFA OTP is verified with this API. Backup codes are going to be returned in the response. These codes must be securely stored.
         * @summary Verify Operator\'s MFA OTP Code.
         * @param {string} operatorId operator_id
         * @param {MFAAuthenticationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMFA: function (operatorId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('verifyMFA', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('verifyMFA', 'request', request);
                            localVarPath = "/operators/{operator_id}/mfa/verify"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Verifies the one-time token which is previously issued by calling `/operators/mfa_revoke_token/issue` API, operator\'s email address, password, and one of the backup codes. If verified, operator\'s MFA is going to be revoked.
         * @summary Verify Operator\'s MFA revoke token.
         * @param {MFARevokingTokenVerifyRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMFARevokingToken: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    common_1.assertParamExists('verifyMFARevokingToken', 'request', request);
                    localVarPath = "/operators/mfa_revoke_token/verify";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * Verifies the operator\'s registration. Called by setting as parameter the one-time verification token received via e-mail.
         * @summary Verify Operator.
         * @param {VerifyOperatorsRequest} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOperator: function (token, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'token' is not null or undefined
                    common_1.assertParamExists('verifyOperator', 'token', token);
                    localVarPath = "/operators/verify";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(token, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        }
    };
};
exports.OperatorApiAxiosParamCreator = OperatorApiAxiosParamCreator;
/**
 * OperatorApi - functional programming interface
 * @export
 */
var OperatorApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.OperatorApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds the operator\'s coverage type.
         * @summary Add coverage type.
         * @param {string} operatorId operator_id
         * @param {string} coverageType coverage_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCoverageType: function (operatorId, coverageType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addCoverageType(operatorId, coverageType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Adds the operator\'s contract.
         * @summary Add Operator Contract.
         * @param {string} operatorId operator_id
         * @param {ContractUpdatingRequest} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOperatorContract: function (operatorId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addOperatorContract(operatorId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Creates the operator\'s company information.
         * @summary Create company information.
         * @param {string} operatorId operator_id
         * @param {CompanyInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyInformation: function (operatorId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCompanyInformation(operatorId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Creates the operator\'s individual information.
         * @summary Create individual information.
         * @param {string} operatorId operator_id
         * @param {IndividualInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndividualInformation: function (operatorId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createIndividualInformation(operatorId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Makes a request to create a new operator. An e-mail is sent to the e-mail address specified in the parameters, containing a one-time token for verifying the operator’s registration.
         * @summary Create Operator.
         * @param {RegisterOperatorsRequest} request email, password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperator: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOperator(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes an AuthKey from the operator.
         * @summary Delete Operator AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} authKeyId auth_key_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorAuthKey: function (operatorId, authKeyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteOperatorAuthKey(operatorId, authKeyId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the operator\'s contract.
         * @summary Delete Operator Contract.
         * @param {string} operatorId operator_id
         * @param {string} contractName contract_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorContract: function (operatorId, contractName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteOperatorContract(operatorId, contractName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Enables operator\'s MFA. After calling this APIg, it should be verified by calling `Operator:verifyMFA` API.
         * @summary Enable Operator\'s MFA.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableMFA: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableMFA(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Generates a new API token. If you insert the current API token into the header and make a request, a response is returned containing the new API token. You can then use the new API token in future requests.
         * @summary Generate Authentication Token.
         * @param {string} operatorId operator_id
         * @param {GenerateTokenRequest} request token timeout seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAuthToken: function (operatorId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.generateAuthToken(operatorId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Generates an AuthKey for the operator.
         * @summary Generate Operator AuthKey.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOperatorAuthKey: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.generateOperatorAuthKey(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a token for accessing the support console.
         * @summary Generate Token for Support Console.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSupportToken: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.generateSupportToken(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets the operator\'s company information.
         * @summary Get company information.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyInformation: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCompanyInformation(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets the operator\'s individual information.
         * @summary Get individual information.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualInformation: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIndividualInformation(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets operator\'s MFA status. The MFA status is one of `ACTIVE`, `INACTIVE` or `UNCONFIRMED`.
         * @summary Get Operator\'s MFA Status.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMFAStatus: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMFAStatus(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns information about the operator.
         * @summary Get Operator.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperator: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOperator(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sends an e-mail with a one-time token for executing the e-mail address change.
         * @summary Issue Email Change Token.
         * @param {IssueEmailChangeTokenRequest} request email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueEmailChangeToken: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.issueEmailChangeToken(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Issues a token to revoke operator\'s MFA. The issued token will be sent to the operator via email.
         * @summary Issue Operator\'s MFA Revoke Token.
         * @param {MFAIssueRevokingTokenRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueMFARevokingToken: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.issueMFARevokingToken(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the operator\'s AuthKey list.
         * @summary List Operator AuthKeys.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOperatorAuthKeys: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listOperatorAuthKeys(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Revokes operator\'s MFA without backup codes.
         * @summary Revoke Operator\'s MFA.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeMFA: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.revokeMFA(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the operator\'s company information.
         * @summary Update company information.
         * @param {string} operatorId operator_id
         * @param {CompanyInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyInformation: function (operatorId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCompanyInformation(operatorId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the operator\'s individual information.
         * @summary Update individual information.
         * @param {string} operatorId operator_id
         * @param {IndividualInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIndividualInformation: function (operatorId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateIndividualInformation(operatorId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the operator\'s password.
         * @summary Update Operator Password.
         * @param {string} operatorId operator_id
         * @param {UpdatePasswordRequest} request current password, new password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOperatorPassword: function (operatorId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateOperatorPassword(operatorId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Verifies the token for the e-mail address change, and then changes the e-mail address.
         * @summary Verify Email Change Token.
         * @param {VerifyEmailChangeTokenRequest} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailChangeToken: function (token, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.verifyEmailChangeToken(token, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Verifies operator\'s MFA with OTP code after calling `Operator:enableMFA` API. MFA will not be activated unless the MFA OTP is verified with this API. Backup codes are going to be returned in the response. These codes must be securely stored.
         * @summary Verify Operator\'s MFA OTP Code.
         * @param {string} operatorId operator_id
         * @param {MFAAuthenticationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMFA: function (operatorId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.verifyMFA(operatorId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Verifies the one-time token which is previously issued by calling `/operators/mfa_revoke_token/issue` API, operator\'s email address, password, and one of the backup codes. If verified, operator\'s MFA is going to be revoked.
         * @summary Verify Operator\'s MFA revoke token.
         * @param {MFARevokingTokenVerifyRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMFARevokingToken: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.verifyMFARevokingToken(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Verifies the operator\'s registration. Called by setting as parameter the one-time verification token received via e-mail.
         * @summary Verify Operator.
         * @param {VerifyOperatorsRequest} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOperator: function (token, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.verifyOperator(token, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.OperatorApiFp = OperatorApiFp;
/**
 * OperatorApi - factory interface
 * @export
 */
var OperatorApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.OperatorApiFp(configuration);
    return {
        /**
         * Adds the operator\'s coverage type.
         * @summary Add coverage type.
         * @param {string} operatorId operator_id
         * @param {string} coverageType coverage_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCoverageType: function (operatorId, coverageType, options) {
            return localVarFp.addCoverageType(operatorId, coverageType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Adds the operator\'s contract.
         * @summary Add Operator Contract.
         * @param {string} operatorId operator_id
         * @param {ContractUpdatingRequest} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOperatorContract: function (operatorId, request, options) {
            return localVarFp.addOperatorContract(operatorId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates the operator\'s company information.
         * @summary Create company information.
         * @param {string} operatorId operator_id
         * @param {CompanyInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyInformation: function (operatorId, request, options) {
            return localVarFp.createCompanyInformation(operatorId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates the operator\'s individual information.
         * @summary Create individual information.
         * @param {string} operatorId operator_id
         * @param {IndividualInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndividualInformation: function (operatorId, request, options) {
            return localVarFp.createIndividualInformation(operatorId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Makes a request to create a new operator. An e-mail is sent to the e-mail address specified in the parameters, containing a one-time token for verifying the operator’s registration.
         * @summary Create Operator.
         * @param {RegisterOperatorsRequest} request email, password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperator: function (request, options) {
            return localVarFp.createOperator(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an AuthKey from the operator.
         * @summary Delete Operator AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} authKeyId auth_key_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorAuthKey: function (operatorId, authKeyId, options) {
            return localVarFp.deleteOperatorAuthKey(operatorId, authKeyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the operator\'s contract.
         * @summary Delete Operator Contract.
         * @param {string} operatorId operator_id
         * @param {string} contractName contract_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorContract: function (operatorId, contractName, options) {
            return localVarFp.deleteOperatorContract(operatorId, contractName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Enables operator\'s MFA. After calling this APIg, it should be verified by calling `Operator:verifyMFA` API.
         * @summary Enable Operator\'s MFA.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableMFA: function (operatorId, options) {
            return localVarFp.enableMFA(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Generates a new API token. If you insert the current API token into the header and make a request, a response is returned containing the new API token. You can then use the new API token in future requests.
         * @summary Generate Authentication Token.
         * @param {string} operatorId operator_id
         * @param {GenerateTokenRequest} request token timeout seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAuthToken: function (operatorId, request, options) {
            return localVarFp.generateAuthToken(operatorId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Generates an AuthKey for the operator.
         * @summary Generate Operator AuthKey.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOperatorAuthKey: function (operatorId, options) {
            return localVarFp.generateOperatorAuthKey(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a token for accessing the support console.
         * @summary Generate Token for Support Console.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSupportToken: function (operatorId, options) {
            return localVarFp.generateSupportToken(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets the operator\'s company information.
         * @summary Get company information.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyInformation: function (operatorId, options) {
            return localVarFp.getCompanyInformation(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets the operator\'s individual information.
         * @summary Get individual information.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualInformation: function (operatorId, options) {
            return localVarFp.getIndividualInformation(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets operator\'s MFA status. The MFA status is one of `ACTIVE`, `INACTIVE` or `UNCONFIRMED`.
         * @summary Get Operator\'s MFA Status.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMFAStatus: function (operatorId, options) {
            return localVarFp.getMFAStatus(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns information about the operator.
         * @summary Get Operator.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperator: function (operatorId, options) {
            return localVarFp.getOperator(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sends an e-mail with a one-time token for executing the e-mail address change.
         * @summary Issue Email Change Token.
         * @param {IssueEmailChangeTokenRequest} request email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueEmailChangeToken: function (request, options) {
            return localVarFp.issueEmailChangeToken(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Issues a token to revoke operator\'s MFA. The issued token will be sent to the operator via email.
         * @summary Issue Operator\'s MFA Revoke Token.
         * @param {MFAIssueRevokingTokenRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueMFARevokingToken: function (request, options) {
            return localVarFp.issueMFARevokingToken(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the operator\'s AuthKey list.
         * @summary List Operator AuthKeys.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOperatorAuthKeys: function (operatorId, options) {
            return localVarFp.listOperatorAuthKeys(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revokes operator\'s MFA without backup codes.
         * @summary Revoke Operator\'s MFA.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeMFA: function (operatorId, options) {
            return localVarFp.revokeMFA(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the operator\'s company information.
         * @summary Update company information.
         * @param {string} operatorId operator_id
         * @param {CompanyInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyInformation: function (operatorId, request, options) {
            return localVarFp.updateCompanyInformation(operatorId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the operator\'s individual information.
         * @summary Update individual information.
         * @param {string} operatorId operator_id
         * @param {IndividualInformationModel} request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIndividualInformation: function (operatorId, request, options) {
            return localVarFp.updateIndividualInformation(operatorId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the operator\'s password.
         * @summary Update Operator Password.
         * @param {string} operatorId operator_id
         * @param {UpdatePasswordRequest} request current password, new password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOperatorPassword: function (operatorId, request, options) {
            return localVarFp.updateOperatorPassword(operatorId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Verifies the token for the e-mail address change, and then changes the e-mail address.
         * @summary Verify Email Change Token.
         * @param {VerifyEmailChangeTokenRequest} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailChangeToken: function (token, options) {
            return localVarFp.verifyEmailChangeToken(token, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Verifies operator\'s MFA with OTP code after calling `Operator:enableMFA` API. MFA will not be activated unless the MFA OTP is verified with this API. Backup codes are going to be returned in the response. These codes must be securely stored.
         * @summary Verify Operator\'s MFA OTP Code.
         * @param {string} operatorId operator_id
         * @param {MFAAuthenticationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMFA: function (operatorId, request, options) {
            return localVarFp.verifyMFA(operatorId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Verifies the one-time token which is previously issued by calling `/operators/mfa_revoke_token/issue` API, operator\'s email address, password, and one of the backup codes. If verified, operator\'s MFA is going to be revoked.
         * @summary Verify Operator\'s MFA revoke token.
         * @param {MFARevokingTokenVerifyRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMFARevokingToken: function (request, options) {
            return localVarFp.verifyMFARevokingToken(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Verifies the operator\'s registration. Called by setting as parameter the one-time verification token received via e-mail.
         * @summary Verify Operator.
         * @param {VerifyOperatorsRequest} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOperator: function (token, options) {
            return localVarFp.verifyOperator(token, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.OperatorApiFactory = OperatorApiFactory;
/**
 * OperatorApi - object-oriented interface
 * @export
 * @class OperatorApi
 * @extends {BaseAPI}
 */
var OperatorApi = /** @class */ (function (_super) {
    __extends(OperatorApi, _super);
    function OperatorApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds the operator\'s coverage type.
     * @summary Add coverage type.
     * @param {string} operatorId operator_id
     * @param {string} coverageType coverage_type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.addCoverageType = function (operatorId, coverageType, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).addCoverageType(operatorId, coverageType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Adds the operator\'s contract.
     * @summary Add Operator Contract.
     * @param {string} operatorId operator_id
     * @param {ContractUpdatingRequest} request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.addOperatorContract = function (operatorId, request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).addOperatorContract(operatorId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates the operator\'s company information.
     * @summary Create company information.
     * @param {string} operatorId operator_id
     * @param {CompanyInformationModel} request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.createCompanyInformation = function (operatorId, request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).createCompanyInformation(operatorId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates the operator\'s individual information.
     * @summary Create individual information.
     * @param {string} operatorId operator_id
     * @param {IndividualInformationModel} request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.createIndividualInformation = function (operatorId, request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).createIndividualInformation(operatorId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Makes a request to create a new operator. An e-mail is sent to the e-mail address specified in the parameters, containing a one-time token for verifying the operator’s registration.
     * @summary Create Operator.
     * @param {RegisterOperatorsRequest} request email, password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.createOperator = function (request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).createOperator(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an AuthKey from the operator.
     * @summary Delete Operator AuthKey.
     * @param {string} operatorId operator_id
     * @param {string} authKeyId auth_key_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.deleteOperatorAuthKey = function (operatorId, authKeyId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).deleteOperatorAuthKey(operatorId, authKeyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the operator\'s contract.
     * @summary Delete Operator Contract.
     * @param {string} operatorId operator_id
     * @param {string} contractName contract_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.deleteOperatorContract = function (operatorId, contractName, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).deleteOperatorContract(operatorId, contractName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Enables operator\'s MFA. After calling this APIg, it should be verified by calling `Operator:verifyMFA` API.
     * @summary Enable Operator\'s MFA.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.enableMFA = function (operatorId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).enableMFA(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Generates a new API token. If you insert the current API token into the header and make a request, a response is returned containing the new API token. You can then use the new API token in future requests.
     * @summary Generate Authentication Token.
     * @param {string} operatorId operator_id
     * @param {GenerateTokenRequest} request token timeout seconds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.generateAuthToken = function (operatorId, request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).generateAuthToken(operatorId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Generates an AuthKey for the operator.
     * @summary Generate Operator AuthKey.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.generateOperatorAuthKey = function (operatorId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).generateOperatorAuthKey(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a token for accessing the support console.
     * @summary Generate Token for Support Console.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.generateSupportToken = function (operatorId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).generateSupportToken(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets the operator\'s company information.
     * @summary Get company information.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.getCompanyInformation = function (operatorId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).getCompanyInformation(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets the operator\'s individual information.
     * @summary Get individual information.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.getIndividualInformation = function (operatorId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).getIndividualInformation(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets operator\'s MFA status. The MFA status is one of `ACTIVE`, `INACTIVE` or `UNCONFIRMED`.
     * @summary Get Operator\'s MFA Status.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.getMFAStatus = function (operatorId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).getMFAStatus(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns information about the operator.
     * @summary Get Operator.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.getOperator = function (operatorId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).getOperator(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sends an e-mail with a one-time token for executing the e-mail address change.
     * @summary Issue Email Change Token.
     * @param {IssueEmailChangeTokenRequest} request email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.issueEmailChangeToken = function (request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).issueEmailChangeToken(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Issues a token to revoke operator\'s MFA. The issued token will be sent to the operator via email.
     * @summary Issue Operator\'s MFA Revoke Token.
     * @param {MFAIssueRevokingTokenRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.issueMFARevokingToken = function (request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).issueMFARevokingToken(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the operator\'s AuthKey list.
     * @summary List Operator AuthKeys.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.listOperatorAuthKeys = function (operatorId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).listOperatorAuthKeys(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revokes operator\'s MFA without backup codes.
     * @summary Revoke Operator\'s MFA.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.revokeMFA = function (operatorId, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).revokeMFA(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the operator\'s company information.
     * @summary Update company information.
     * @param {string} operatorId operator_id
     * @param {CompanyInformationModel} request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.updateCompanyInformation = function (operatorId, request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).updateCompanyInformation(operatorId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the operator\'s individual information.
     * @summary Update individual information.
     * @param {string} operatorId operator_id
     * @param {IndividualInformationModel} request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.updateIndividualInformation = function (operatorId, request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).updateIndividualInformation(operatorId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the operator\'s password.
     * @summary Update Operator Password.
     * @param {string} operatorId operator_id
     * @param {UpdatePasswordRequest} request current password, new password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.updateOperatorPassword = function (operatorId, request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).updateOperatorPassword(operatorId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Verifies the token for the e-mail address change, and then changes the e-mail address.
     * @summary Verify Email Change Token.
     * @param {VerifyEmailChangeTokenRequest} token token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.verifyEmailChangeToken = function (token, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).verifyEmailChangeToken(token, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Verifies operator\'s MFA with OTP code after calling `Operator:enableMFA` API. MFA will not be activated unless the MFA OTP is verified with this API. Backup codes are going to be returned in the response. These codes must be securely stored.
     * @summary Verify Operator\'s MFA OTP Code.
     * @param {string} operatorId operator_id
     * @param {MFAAuthenticationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.verifyMFA = function (operatorId, request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).verifyMFA(operatorId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Verifies the one-time token which is previously issued by calling `/operators/mfa_revoke_token/issue` API, operator\'s email address, password, and one of the backup codes. If verified, operator\'s MFA is going to be revoked.
     * @summary Verify Operator\'s MFA revoke token.
     * @param {MFARevokingTokenVerifyRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.verifyMFARevokingToken = function (request, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).verifyMFARevokingToken(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Verifies the operator\'s registration. Called by setting as parameter the one-time verification token received via e-mail.
     * @summary Verify Operator.
     * @param {VerifyOperatorsRequest} token token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    OperatorApi.prototype.verifyOperator = function (token, options) {
        var _this = this;
        return exports.OperatorApiFp(this.configuration).verifyOperator(token, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OperatorApi;
}(base_1.BaseAPI));
exports.OperatorApi = OperatorApi;
/**
 * OrderApi - axios parameter creator
 * @export
 */
var OrderApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Cancels an order. If the order has already been dispatched, an error is returned.
         * @summary Cancel order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: function (orderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderId' is not null or undefined
                            common_1.assertParamExists('cancelOrder', 'orderId', orderId);
                            localVarPath = "/orders/{order_id}/cancel"
                                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Performs a credit limit and confirms the order if no problems are encountered.
         * @summary Confirm coupon order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCouponOrder: function (orderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderId' is not null or undefined
                            common_1.assertParamExists('confirmCouponOrder', 'orderId', orderId);
                            localVarPath = "/coupons/{order_id}/confirm"
                                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Performs a credit limit and confirms the order if no problems are encountered.
         * @summary Confirm order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmOrder: function (orderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderId' is not null or undefined
                            common_1.assertParamExists('confirmOrder', 'orderId', orderId);
                            localVarPath = "/orders/{order_id}/confirm"
                                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Performs a credit limit and confirms the order if no problems are encountered.
         * @summary Confirm long term discount order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmVolumeDiscountOrder: function (orderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderId' is not null or undefined
                            common_1.assertParamExists('confirmVolumeDiscountOrder', 'orderId', orderId);
                            localVarPath = "/volume_discounts/{order_id}/confirm"
                                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Creates a new coupon quotation. If the orderId is put in /confirm, the order is complete.
         * @summary Create coupon quotation.
         * @param {CreateEstimatedCouponRequest} request Coupon details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCouponQuotation: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createCouponQuotation', 'request', request);
                            localVarPath = "/coupons";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Creates a new order quotation. If the orderId is put in /confirm, the order is complete.
         * @summary Create Quotation.
         * @param {CreateEstimatedOrderRequest} request Order item list and shipping address ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuotation: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createQuotation', 'request', request);
                            localVarPath = "/orders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Creates a new long term discount quotation. If the orderId is put in /confirm, the order is complete. (Currently, long term discount is only applied to plan-D, plan-K)
         * @summary Create long term discount quotation.
         * @param {CreateEstimatedVolumeDiscountRequest} request Long term discount contract details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVolumeDiscountQuotation: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createVolumeDiscountQuotation', 'request', request);
                            localVarPath = "/volume_discounts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a confirmed order.
         * @summary Get confirmed order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (orderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderId' is not null or undefined
                            common_1.assertParamExists('getOrder', 'orderId', orderId);
                            localVarPath = "/orders/{order_id}"
                                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of available long term discounts.
         * @summary List available long term discounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableDiscounts: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/volume_discounts/available_discounts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * List ordered subscribers
         * @summary List ordered subscribers.
         * @param {string} orderId order_id
         * @param {string} [lastEvaluatedKey] Serial number of the last subscriber in the previous page that is set to response header with X-Soracom-Next-Key.
         * @param {number} [limit] Max number of subscribers in a response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrderedSubscribers: function (orderId, lastEvaluatedKey, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderId' is not null or undefined
                            common_1.assertParamExists('listOrderedSubscribers', 'orderId', orderId);
                            localVarPath = "/orders/{order_id}/subscribers"
                                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of confirmed orders.
         * @summary List confirmed orders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/orders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of products.
         * @summary List products.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/products";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Registers the ordered SIM with the operator.
         * @summary Register subscribers for operator.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrderedSim: function (orderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderId' is not null or undefined
                            common_1.assertParamExists('registerOrderedSim', 'orderId', orderId);
                            localVarPath = "/orders/{order_id}/subscribers/register"
                                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.OrderApiAxiosParamCreator = OrderApiAxiosParamCreator;
/**
 * OrderApi - functional programming interface
 * @export
 */
var OrderApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.OrderApiAxiosParamCreator(configuration);
    return {
        /**
         * Cancels an order. If the order has already been dispatched, an error is returned.
         * @summary Cancel order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: function (orderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.cancelOrder(orderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Performs a credit limit and confirms the order if no problems are encountered.
         * @summary Confirm coupon order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCouponOrder: function (orderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.confirmCouponOrder(orderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Performs a credit limit and confirms the order if no problems are encountered.
         * @summary Confirm order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmOrder: function (orderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.confirmOrder(orderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Performs a credit limit and confirms the order if no problems are encountered.
         * @summary Confirm long term discount order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmVolumeDiscountOrder: function (orderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.confirmVolumeDiscountOrder(orderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Creates a new coupon quotation. If the orderId is put in /confirm, the order is complete.
         * @summary Create coupon quotation.
         * @param {CreateEstimatedCouponRequest} request Coupon details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCouponQuotation: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCouponQuotation(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Creates a new order quotation. If the orderId is put in /confirm, the order is complete.
         * @summary Create Quotation.
         * @param {CreateEstimatedOrderRequest} request Order item list and shipping address ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuotation: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createQuotation(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Creates a new long term discount quotation. If the orderId is put in /confirm, the order is complete. (Currently, long term discount is only applied to plan-D, plan-K)
         * @summary Create long term discount quotation.
         * @param {CreateEstimatedVolumeDiscountRequest} request Long term discount contract details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVolumeDiscountQuotation: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createVolumeDiscountQuotation(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a confirmed order.
         * @summary Get confirmed order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (orderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOrder(orderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of available long term discounts.
         * @summary List available long term discounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableDiscounts: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listAvailableDiscounts(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List ordered subscribers
         * @summary List ordered subscribers.
         * @param {string} orderId order_id
         * @param {string} [lastEvaluatedKey] Serial number of the last subscriber in the previous page that is set to response header with X-Soracom-Next-Key.
         * @param {number} [limit] Max number of subscribers in a response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrderedSubscribers: function (orderId, lastEvaluatedKey, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listOrderedSubscribers(orderId, lastEvaluatedKey, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of confirmed orders.
         * @summary List confirmed orders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listOrders(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of products.
         * @summary List products.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listProducts(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Registers the ordered SIM with the operator.
         * @summary Register subscribers for operator.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrderedSim: function (orderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerOrderedSim(orderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.OrderApiFp = OrderApiFp;
/**
 * OrderApi - factory interface
 * @export
 */
var OrderApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.OrderApiFp(configuration);
    return {
        /**
         * Cancels an order. If the order has already been dispatched, an error is returned.
         * @summary Cancel order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: function (orderId, options) {
            return localVarFp.cancelOrder(orderId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Performs a credit limit and confirms the order if no problems are encountered.
         * @summary Confirm coupon order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCouponOrder: function (orderId, options) {
            return localVarFp.confirmCouponOrder(orderId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Performs a credit limit and confirms the order if no problems are encountered.
         * @summary Confirm order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmOrder: function (orderId, options) {
            return localVarFp.confirmOrder(orderId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Performs a credit limit and confirms the order if no problems are encountered.
         * @summary Confirm long term discount order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmVolumeDiscountOrder: function (orderId, options) {
            return localVarFp.confirmVolumeDiscountOrder(orderId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a new coupon quotation. If the orderId is put in /confirm, the order is complete.
         * @summary Create coupon quotation.
         * @param {CreateEstimatedCouponRequest} request Coupon details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCouponQuotation: function (request, options) {
            return localVarFp.createCouponQuotation(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a new order quotation. If the orderId is put in /confirm, the order is complete.
         * @summary Create Quotation.
         * @param {CreateEstimatedOrderRequest} request Order item list and shipping address ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuotation: function (request, options) {
            return localVarFp.createQuotation(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a new long term discount quotation. If the orderId is put in /confirm, the order is complete. (Currently, long term discount is only applied to plan-D, plan-K)
         * @summary Create long term discount quotation.
         * @param {CreateEstimatedVolumeDiscountRequest} request Long term discount contract details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVolumeDiscountQuotation: function (request, options) {
            return localVarFp.createVolumeDiscountQuotation(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a confirmed order.
         * @summary Get confirmed order.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (orderId, options) {
            return localVarFp.getOrder(orderId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of available long term discounts.
         * @summary List available long term discounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableDiscounts: function (options) {
            return localVarFp.listAvailableDiscounts(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List ordered subscribers
         * @summary List ordered subscribers.
         * @param {string} orderId order_id
         * @param {string} [lastEvaluatedKey] Serial number of the last subscriber in the previous page that is set to response header with X-Soracom-Next-Key.
         * @param {number} [limit] Max number of subscribers in a response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrderedSubscribers: function (orderId, lastEvaluatedKey, limit, options) {
            return localVarFp.listOrderedSubscribers(orderId, lastEvaluatedKey, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of confirmed orders.
         * @summary List confirmed orders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: function (options) {
            return localVarFp.listOrders(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of products.
         * @summary List products.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: function (options) {
            return localVarFp.listProducts(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Registers the ordered SIM with the operator.
         * @summary Register subscribers for operator.
         * @param {string} orderId order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrderedSim: function (orderId, options) {
            return localVarFp.registerOrderedSim(orderId, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.OrderApiFactory = OrderApiFactory;
/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
var OrderApi = /** @class */ (function (_super) {
    __extends(OrderApi, _super);
    function OrderApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Cancels an order. If the order has already been dispatched, an error is returned.
     * @summary Cancel order.
     * @param {string} orderId order_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.cancelOrder = function (orderId, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).cancelOrder(orderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Performs a credit limit and confirms the order if no problems are encountered.
     * @summary Confirm coupon order.
     * @param {string} orderId order_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.confirmCouponOrder = function (orderId, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).confirmCouponOrder(orderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Performs a credit limit and confirms the order if no problems are encountered.
     * @summary Confirm order.
     * @param {string} orderId order_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.confirmOrder = function (orderId, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).confirmOrder(orderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Performs a credit limit and confirms the order if no problems are encountered.
     * @summary Confirm long term discount order.
     * @param {string} orderId order_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.confirmVolumeDiscountOrder = function (orderId, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).confirmVolumeDiscountOrder(orderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a new coupon quotation. If the orderId is put in /confirm, the order is complete.
     * @summary Create coupon quotation.
     * @param {CreateEstimatedCouponRequest} request Coupon details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.createCouponQuotation = function (request, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).createCouponQuotation(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a new order quotation. If the orderId is put in /confirm, the order is complete.
     * @summary Create Quotation.
     * @param {CreateEstimatedOrderRequest} request Order item list and shipping address ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.createQuotation = function (request, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).createQuotation(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a new long term discount quotation. If the orderId is put in /confirm, the order is complete. (Currently, long term discount is only applied to plan-D, plan-K)
     * @summary Create long term discount quotation.
     * @param {CreateEstimatedVolumeDiscountRequest} request Long term discount contract details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.createVolumeDiscountQuotation = function (request, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).createVolumeDiscountQuotation(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a confirmed order.
     * @summary Get confirmed order.
     * @param {string} orderId order_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrder = function (orderId, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).getOrder(orderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of available long term discounts.
     * @summary List available long term discounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.listAvailableDiscounts = function (options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).listAvailableDiscounts(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List ordered subscribers
     * @summary List ordered subscribers.
     * @param {string} orderId order_id
     * @param {string} [lastEvaluatedKey] Serial number of the last subscriber in the previous page that is set to response header with X-Soracom-Next-Key.
     * @param {number} [limit] Max number of subscribers in a response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.listOrderedSubscribers = function (orderId, lastEvaluatedKey, limit, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).listOrderedSubscribers(orderId, lastEvaluatedKey, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of confirmed orders.
     * @summary List confirmed orders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.listOrders = function (options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).listOrders(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of products.
     * @summary List products.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.listProducts = function (options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).listProducts(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Registers the ordered SIM with the operator.
     * @summary Register subscribers for operator.
     * @param {string} orderId order_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.registerOrderedSim = function (orderId, options) {
        var _this = this;
        return exports.OrderApiFp(this.configuration).registerOrderedSim(orderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OrderApi;
}(base_1.BaseAPI));
exports.OrderApi = OrderApi;
/**
 * PaymentApi - axios parameter creator
 * @export
 */
var PaymentApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Activates a current payment method that has an error.
         * @summary Activate payment method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activatePaymentMethod: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/payment_methods/current/activate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Export payment statement.
         * @summary Export payment statement.
         * @param {string} paymentStatementId Payment statement ID
         * @param {'async' | 'sync'} [exportMode] Export mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPaymentStatement: function (paymentStatementId, exportMode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'paymentStatementId' is not null or undefined
                            common_1.assertParamExists('exportPaymentStatement', 'paymentStatementId', paymentStatementId);
                            localVarPath = "/payment_statements/{payment_statement_id}/export"
                                .replace("{" + "payment_statement_id" + "}", encodeURIComponent(String(paymentStatementId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (exportMode !== undefined) {
                                localVarQueryParameter['export_mode'] = exportMode;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Export payer information.
         * @summary Export payer information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayerInformation: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/payment_statements/payer_information";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns current payment methods. Detailed information is included in the properties.
         * @summary Get payment method information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/payment_methods/current";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns result of a payment transaction.
         * @summary Get payment transaction result.
         * @param {string} paymentTransactionId Payment transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentTransaction: function (paymentTransactionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'paymentTransactionId' is not null or undefined
                            common_1.assertParamExists('getPaymentTransaction', 'paymentTransactionId', paymentTransactionId);
                            localVarPath = "/payment_history/transactions/{payment_transaction_id}"
                                .replace("{" + "payment_transaction_id" + "}", encodeURIComponent(String(paymentTransactionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns contracted long term discount.
         * @summary Get long term discount.
         * @param {string} contractId contract_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVolumeDiscount: function (contractId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'contractId' is not null or undefined
                            common_1.assertParamExists('getVolumeDiscount', 'contractId', contractId);
                            localVarPath = "/volume_discounts/{contract_id}"
                                .replace("{" + "contract_id" + "}", encodeURIComponent(String(contractId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of currently registered coupons.
         * @summary List coupons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCoupons: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/coupons";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * List payment statements.
         * @summary List payment statements.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentStatements: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/payment_statements";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of contracted long term discounts.
         * @summary List long term discounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeDiscounts: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/volume_discounts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Registers a coupon.
         * @summary Register Coupon.
         * @param {string} couponCode Coupon code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCoupon: function (couponCode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'couponCode' is not null or undefined
                            common_1.assertParamExists('registerCoupon', 'couponCode', couponCode);
                            localVarPath = "/coupons/{coupon_code}/register"
                                .replace("{" + "coupon_code" + "}", encodeURIComponent(String(couponCode)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Register payer information.
         * @summary Register payer information.
         * @param {RegisterPayerInformationModel} req Payer information to be registered in the accounting specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPayerInformation: function (req, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'req' is not null or undefined
                            common_1.assertParamExists('registerPayerInformation', 'req', req);
                            localVarPath = "/payment_statements/payer_information";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(req, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.PaymentApiAxiosParamCreator = PaymentApiAxiosParamCreator;
/**
 * PaymentApi - functional programming interface
 * @export
 */
var PaymentApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PaymentApiAxiosParamCreator(configuration);
    return {
        /**
         * Activates a current payment method that has an error.
         * @summary Activate payment method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activatePaymentMethod: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.activatePaymentMethod(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Export payment statement.
         * @summary Export payment statement.
         * @param {string} paymentStatementId Payment statement ID
         * @param {'async' | 'sync'} [exportMode] Export mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPaymentStatement: function (paymentStatementId, exportMode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportPaymentStatement(paymentStatementId, exportMode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Export payer information.
         * @summary Export payer information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayerInformation: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPayerInformation(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns current payment methods. Detailed information is included in the properties.
         * @summary Get payment method information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPaymentMethod(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns result of a payment transaction.
         * @summary Get payment transaction result.
         * @param {string} paymentTransactionId Payment transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentTransaction: function (paymentTransactionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPaymentTransaction(paymentTransactionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns contracted long term discount.
         * @summary Get long term discount.
         * @param {string} contractId contract_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVolumeDiscount: function (contractId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVolumeDiscount(contractId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of currently registered coupons.
         * @summary List coupons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCoupons: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listCoupons(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List payment statements.
         * @summary List payment statements.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentStatements: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPaymentStatements(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of contracted long term discounts.
         * @summary List long term discounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeDiscounts: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listVolumeDiscounts(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Registers a coupon.
         * @summary Register Coupon.
         * @param {string} couponCode Coupon code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCoupon: function (couponCode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerCoupon(couponCode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Register payer information.
         * @summary Register payer information.
         * @param {RegisterPayerInformationModel} req Payer information to be registered in the accounting specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPayerInformation: function (req, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerPayerInformation(req, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.PaymentApiFp = PaymentApiFp;
/**
 * PaymentApi - factory interface
 * @export
 */
var PaymentApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PaymentApiFp(configuration);
    return {
        /**
         * Activates a current payment method that has an error.
         * @summary Activate payment method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activatePaymentMethod: function (options) {
            return localVarFp.activatePaymentMethod(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Export payment statement.
         * @summary Export payment statement.
         * @param {string} paymentStatementId Payment statement ID
         * @param {'async' | 'sync'} [exportMode] Export mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPaymentStatement: function (paymentStatementId, exportMode, options) {
            return localVarFp.exportPaymentStatement(paymentStatementId, exportMode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Export payer information.
         * @summary Export payer information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayerInformation: function (options) {
            return localVarFp.getPayerInformation(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns current payment methods. Detailed information is included in the properties.
         * @summary Get payment method information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod: function (options) {
            return localVarFp.getPaymentMethod(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns result of a payment transaction.
         * @summary Get payment transaction result.
         * @param {string} paymentTransactionId Payment transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentTransaction: function (paymentTransactionId, options) {
            return localVarFp.getPaymentTransaction(paymentTransactionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns contracted long term discount.
         * @summary Get long term discount.
         * @param {string} contractId contract_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVolumeDiscount: function (contractId, options) {
            return localVarFp.getVolumeDiscount(contractId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of currently registered coupons.
         * @summary List coupons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCoupons: function (options) {
            return localVarFp.listCoupons(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List payment statements.
         * @summary List payment statements.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentStatements: function (options) {
            return localVarFp.listPaymentStatements(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of contracted long term discounts.
         * @summary List long term discounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeDiscounts: function (options) {
            return localVarFp.listVolumeDiscounts(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Registers a coupon.
         * @summary Register Coupon.
         * @param {string} couponCode Coupon code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCoupon: function (couponCode, options) {
            return localVarFp.registerCoupon(couponCode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Register payer information.
         * @summary Register payer information.
         * @param {RegisterPayerInformationModel} req Payer information to be registered in the accounting specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPayerInformation: function (req, options) {
            return localVarFp.registerPayerInformation(req, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.PaymentApiFactory = PaymentApiFactory;
/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
var PaymentApi = /** @class */ (function (_super) {
    __extends(PaymentApi, _super);
    function PaymentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Activates a current payment method that has an error.
     * @summary Activate payment method.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.activatePaymentMethod = function (options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).activatePaymentMethod(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Export payment statement.
     * @summary Export payment statement.
     * @param {string} paymentStatementId Payment statement ID
     * @param {'async' | 'sync'} [exportMode] Export mode (async, sync)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.exportPaymentStatement = function (paymentStatementId, exportMode, options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).exportPaymentStatement(paymentStatementId, exportMode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Export payer information.
     * @summary Export payer information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.getPayerInformation = function (options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).getPayerInformation(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns current payment methods. Detailed information is included in the properties.
     * @summary Get payment method information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.getPaymentMethod = function (options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).getPaymentMethod(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns result of a payment transaction.
     * @summary Get payment transaction result.
     * @param {string} paymentTransactionId Payment transaction ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.getPaymentTransaction = function (paymentTransactionId, options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).getPaymentTransaction(paymentTransactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns contracted long term discount.
     * @summary Get long term discount.
     * @param {string} contractId contract_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.getVolumeDiscount = function (contractId, options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).getVolumeDiscount(contractId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of currently registered coupons.
     * @summary List coupons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.listCoupons = function (options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).listCoupons(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List payment statements.
     * @summary List payment statements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.listPaymentStatements = function (options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).listPaymentStatements(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of contracted long term discounts.
     * @summary List long term discounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.listVolumeDiscounts = function (options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).listVolumeDiscounts(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Registers a coupon.
     * @summary Register Coupon.
     * @param {string} couponCode Coupon code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.registerCoupon = function (couponCode, options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).registerCoupon(couponCode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Register payer information.
     * @summary Register payer information.
     * @param {RegisterPayerInformationModel} req Payer information to be registered in the accounting specification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    PaymentApi.prototype.registerPayerInformation = function (req, options) {
        var _this = this;
        return exports.PaymentApiFp(this.configuration).registerPayerInformation(req, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PaymentApi;
}(base_1.BaseAPI));
exports.PaymentApi = PaymentApi;
/**
 * PortMappingApi - axios parameter creator
 * @export
 */
var PortMappingApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a new port mapping.
         * @summary Create Port Mapping.
         * @param {CreatePortMappingRequest} portMapping Port mapping to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortMapping: function (portMapping, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portMapping' is not null or undefined
                            common_1.assertParamExists('createPortMapping', 'portMapping', portMapping);
                            localVarPath = "/port_mappings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(portMapping, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the specified port mapping entry
         * @summary Delete PortMapping.
         * @param {string} ipAddress IP address of the target port mapping entry
         * @param {string} port Port of the target port mapping entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortMapping: function (ipAddress, port, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'ipAddress' is not null or undefined
                            common_1.assertParamExists('deletePortMapping', 'ipAddress', ipAddress);
                            // verify required parameter 'port' is not null or undefined
                            common_1.assertParamExists('deletePortMapping', 'port', port);
                            localVarPath = "/port_mappings/{ip_address}/{port}"
                                .replace("{" + "ip_address" + "}", encodeURIComponent(String(ipAddress)))
                                .replace("{" + "port" + "}", encodeURIComponent(String(port)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of port mappings.
         * @summary List Port Mapping Entries.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The last Port Mapping ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortMappings: function (limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/port_mappings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns the port mapping entries for a subscriber.
         * @summary Get Port Mapping entries for a subscriber.
         * @param {string} imsi Target subscriber IMSI.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortMappingsForSubscriber: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('listPortMappingsForSubscriber', 'imsi', imsi);
                            localVarPath = "/port_mappings/subscribers/{imsi}"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.PortMappingApiAxiosParamCreator = PortMappingApiAxiosParamCreator;
/**
 * PortMappingApi - functional programming interface
 * @export
 */
var PortMappingApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PortMappingApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new port mapping.
         * @summary Create Port Mapping.
         * @param {CreatePortMappingRequest} portMapping Port mapping to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortMapping: function (portMapping, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPortMapping(portMapping, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the specified port mapping entry
         * @summary Delete PortMapping.
         * @param {string} ipAddress IP address of the target port mapping entry
         * @param {string} port Port of the target port mapping entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortMapping: function (ipAddress, port, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePortMapping(ipAddress, port, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of port mappings.
         * @summary List Port Mapping Entries.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The last Port Mapping ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortMappings: function (limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPortMappings(limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the port mapping entries for a subscriber.
         * @summary Get Port Mapping entries for a subscriber.
         * @param {string} imsi Target subscriber IMSI.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortMappingsForSubscriber: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPortMappingsForSubscriber(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.PortMappingApiFp = PortMappingApiFp;
/**
 * PortMappingApi - factory interface
 * @export
 */
var PortMappingApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PortMappingApiFp(configuration);
    return {
        /**
         * Create a new port mapping.
         * @summary Create Port Mapping.
         * @param {CreatePortMappingRequest} portMapping Port mapping to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortMapping: function (portMapping, options) {
            return localVarFp.createPortMapping(portMapping, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the specified port mapping entry
         * @summary Delete PortMapping.
         * @param {string} ipAddress IP address of the target port mapping entry
         * @param {string} port Port of the target port mapping entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortMapping: function (ipAddress, port, options) {
            return localVarFp.deletePortMapping(ipAddress, port, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of port mappings.
         * @summary List Port Mapping Entries.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The last Port Mapping ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortMappings: function (limit, lastEvaluatedKey, options) {
            return localVarFp.listPortMappings(limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the port mapping entries for a subscriber.
         * @summary Get Port Mapping entries for a subscriber.
         * @param {string} imsi Target subscriber IMSI.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortMappingsForSubscriber: function (imsi, options) {
            return localVarFp.listPortMappingsForSubscriber(imsi, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.PortMappingApiFactory = PortMappingApiFactory;
/**
 * PortMappingApi - object-oriented interface
 * @export
 * @class PortMappingApi
 * @extends {BaseAPI}
 */
var PortMappingApi = /** @class */ (function (_super) {
    __extends(PortMappingApi, _super);
    function PortMappingApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new port mapping.
     * @summary Create Port Mapping.
     * @param {CreatePortMappingRequest} portMapping Port mapping to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortMappingApi
     */
    PortMappingApi.prototype.createPortMapping = function (portMapping, options) {
        var _this = this;
        return exports.PortMappingApiFp(this.configuration).createPortMapping(portMapping, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the specified port mapping entry
     * @summary Delete PortMapping.
     * @param {string} ipAddress IP address of the target port mapping entry
     * @param {string} port Port of the target port mapping entry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortMappingApi
     */
    PortMappingApi.prototype.deletePortMapping = function (ipAddress, port, options) {
        var _this = this;
        return exports.PortMappingApiFp(this.configuration).deletePortMapping(ipAddress, port, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of port mappings.
     * @summary List Port Mapping Entries.
     * @param {number} [limit] Maximum number of results per response page.
     * @param {string} [lastEvaluatedKey] The last Port Mapping ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortMappingApi
     */
    PortMappingApi.prototype.listPortMappings = function (limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.PortMappingApiFp(this.configuration).listPortMappings(limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the port mapping entries for a subscriber.
     * @summary Get Port Mapping entries for a subscriber.
     * @param {string} imsi Target subscriber IMSI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortMappingApi
     */
    PortMappingApi.prototype.listPortMappingsForSubscriber = function (imsi, options) {
        var _this = this;
        return exports.PortMappingApiFp(this.configuration).listPortMappingsForSubscriber(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PortMappingApi;
}(base_1.BaseAPI));
exports.PortMappingApi = PortMappingApi;
/**
 * QueryApi - axios parameter creator
 * @export
 */
var QueryApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Search SORACOM Inventory devices by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all SORACOM Inventory devices that includes their group information.
         * @summary Search SORACOM Inventory devices by query
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [deviceId] SORACOM Inventory device ID to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {Array<string>} [imsi] IMSI of the device that was used on bootstrapping
         * @param {Array<string>} [imei] IMEI of the device that was used on bootstrapping
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The SORACOM Inventory device ID of the last Inventory device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Inventory device onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDevices: function (name, group, deviceId, tag, imsi, imei, limit, lastEvaluatedKey, searchType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/query/devices";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (name) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (group) {
                                localVarQueryParameter['group'] = group;
                            }
                            if (deviceId) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (tag) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (imsi) {
                                localVarQueryParameter['imsi'] = imsi;
                            }
                            if (imei) {
                                localVarQueryParameter['imei'] = imei;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            if (searchType !== undefined) {
                                localVarQueryParameter['search_type'] = searchType;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Search Sigfox devices by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all Sigfox devices that includes their group information.
         * @summary Search Sigfox devices by query
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [deviceId] Sigfox device ID to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {'active' | 'inactive' | 'suspended' | 'terminated' | 'shipped' | 'ready' | 'inStock' | 'banned' | 'standby'} [status] Status of sigfox devices
         * @param {'notStarted' | 'pending' | 'success' | 'failed'} [registration] Registration status of sigfox devices
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The Sigfox device ID of the last Sigfox device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Sigfox device onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSigfoxDevices: function (name, group, deviceId, tag, status, registration, limit, lastEvaluatedKey, searchType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/query/sigfox_devices";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (name) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (group) {
                                localVarQueryParameter['group'] = group;
                            }
                            if (deviceId) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (tag) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (registration !== undefined) {
                                localVarQueryParameter['registration'] = registration;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            if (searchType !== undefined) {
                                localVarQueryParameter['search_type'] = searchType;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Search SIMs by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all SIMs that includes their group information.
         * @summary Search SIMs by query terms
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [simId] Identifier of the SIM to search
         * @param {Array<string>} [imsi] IMSI to search
         * @param {Array<string>} [msisdn] MSISDN to search
         * @param {Array<string>} [iccid] ICCID to search
         * @param {Array<string>} [serialNumber] Serial number to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {Array<string>} [bundles] Bundles type to search
         * @param {'NA' | 'ONLINE' | 'OFFLINE'} [sessionStatus] Status of the session to search (ONLINE or OFFLINE)
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The SIM ID of the last SIM retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSims: function (name, group, simId, imsi, msisdn, iccid, serialNumber, tag, bundles, sessionStatus, limit, lastEvaluatedKey, searchType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/query/sims";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (name) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (group) {
                                localVarQueryParameter['group'] = group;
                            }
                            if (simId) {
                                localVarQueryParameter['sim_id'] = simId;
                            }
                            if (imsi) {
                                localVarQueryParameter['imsi'] = imsi;
                            }
                            if (msisdn) {
                                localVarQueryParameter['msisdn'] = msisdn;
                            }
                            if (iccid) {
                                localVarQueryParameter['iccid'] = iccid;
                            }
                            if (serialNumber) {
                                localVarQueryParameter['serial_number'] = serialNumber;
                            }
                            if (tag) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (bundles) {
                                localVarQueryParameter['bundles'] = bundles;
                            }
                            if (sessionStatus !== undefined) {
                                localVarQueryParameter['session_status'] = sessionStatus;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            if (searchType !== undefined) {
                                localVarQueryParameter['search_type'] = searchType;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Search traffic volume ranking of subscribers
         * @summary Search traffic volume ranking of subscribers
         * @param {number} from The beginning point of searching range (unixtime: in milliseconds)
         * @param {number} to The end point of searching range (unixtime: in milliseconds)
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {'asc' | 'desc'} [order] The order of ranking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubscriberTrafficVolumeRanking: function (from, to, limit, order, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'from' is not null or undefined
                            common_1.assertParamExists('searchSubscriberTrafficVolumeRanking', 'from', from);
                            // verify required parameter 'to' is not null or undefined
                            common_1.assertParamExists('searchSubscriberTrafficVolumeRanking', 'to', to);
                            localVarPath = "/query/subscribers/traffic_volume/ranking";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (order !== undefined) {
                                localVarQueryParameter['order'] = order;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * (DEPRECATED: please consider to use `/query/sims` API instead) Search subscribers by query terms. It returns partial match results.  When this API permission is allowed, it grants the authority to search and retrieve all SIMs that includes their group information.
         * @summary (DEPRECATED) Search subscribers by query terms
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [imsi] IMSI to search
         * @param {Array<string>} [msisdn] MSISDN to search
         * @param {Array<string>} [iccid] ICCID to search
         * @param {Array<string>} [serialNumber] Serial number to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubscribers: function (name, group, imsi, msisdn, iccid, serialNumber, tag, limit, lastEvaluatedKey, searchType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/query/subscribers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (name) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (group) {
                                localVarQueryParameter['group'] = group;
                            }
                            if (imsi) {
                                localVarQueryParameter['imsi'] = imsi;
                            }
                            if (msisdn) {
                                localVarQueryParameter['msisdn'] = msisdn;
                            }
                            if (iccid) {
                                localVarQueryParameter['iccid'] = iccid;
                            }
                            if (serialNumber) {
                                localVarQueryParameter['serial_number'] = serialNumber;
                            }
                            if (tag) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            if (searchType !== undefined) {
                                localVarQueryParameter['search_type'] = searchType;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.QueryApiAxiosParamCreator = QueryApiAxiosParamCreator;
/**
 * QueryApi - functional programming interface
 * @export
 */
var QueryApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.QueryApiAxiosParamCreator(configuration);
    return {
        /**
         * Search SORACOM Inventory devices by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all SORACOM Inventory devices that includes their group information.
         * @summary Search SORACOM Inventory devices by query
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [deviceId] SORACOM Inventory device ID to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {Array<string>} [imsi] IMSI of the device that was used on bootstrapping
         * @param {Array<string>} [imei] IMEI of the device that was used on bootstrapping
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The SORACOM Inventory device ID of the last Inventory device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Inventory device onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDevices: function (name, group, deviceId, tag, imsi, imei, limit, lastEvaluatedKey, searchType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchDevices(name, group, deviceId, tag, imsi, imei, limit, lastEvaluatedKey, searchType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Search Sigfox devices by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all Sigfox devices that includes their group information.
         * @summary Search Sigfox devices by query
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [deviceId] Sigfox device ID to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {'active' | 'inactive' | 'suspended' | 'terminated' | 'shipped' | 'ready' | 'inStock' | 'banned' | 'standby'} [status] Status of sigfox devices
         * @param {'notStarted' | 'pending' | 'success' | 'failed'} [registration] Registration status of sigfox devices
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The Sigfox device ID of the last Sigfox device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Sigfox device onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSigfoxDevices: function (name, group, deviceId, tag, status, registration, limit, lastEvaluatedKey, searchType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchSigfoxDevices(name, group, deviceId, tag, status, registration, limit, lastEvaluatedKey, searchType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Search SIMs by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all SIMs that includes their group information.
         * @summary Search SIMs by query terms
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [simId] Identifier of the SIM to search
         * @param {Array<string>} [imsi] IMSI to search
         * @param {Array<string>} [msisdn] MSISDN to search
         * @param {Array<string>} [iccid] ICCID to search
         * @param {Array<string>} [serialNumber] Serial number to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {Array<string>} [bundles] Bundles type to search
         * @param {'NA' | 'ONLINE' | 'OFFLINE'} [sessionStatus] Status of the session to search (ONLINE or OFFLINE)
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The SIM ID of the last SIM retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSims: function (name, group, simId, imsi, msisdn, iccid, serialNumber, tag, bundles, sessionStatus, limit, lastEvaluatedKey, searchType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchSims(name, group, simId, imsi, msisdn, iccid, serialNumber, tag, bundles, sessionStatus, limit, lastEvaluatedKey, searchType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Search traffic volume ranking of subscribers
         * @summary Search traffic volume ranking of subscribers
         * @param {number} from The beginning point of searching range (unixtime: in milliseconds)
         * @param {number} to The end point of searching range (unixtime: in milliseconds)
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {'asc' | 'desc'} [order] The order of ranking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubscriberTrafficVolumeRanking: function (from, to, limit, order, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchSubscriberTrafficVolumeRanking(from, to, limit, order, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * (DEPRECATED: please consider to use `/query/sims` API instead) Search subscribers by query terms. It returns partial match results.  When this API permission is allowed, it grants the authority to search and retrieve all SIMs that includes their group information.
         * @summary (DEPRECATED) Search subscribers by query terms
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [imsi] IMSI to search
         * @param {Array<string>} [msisdn] MSISDN to search
         * @param {Array<string>} [iccid] ICCID to search
         * @param {Array<string>} [serialNumber] Serial number to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubscribers: function (name, group, imsi, msisdn, iccid, serialNumber, tag, limit, lastEvaluatedKey, searchType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchSubscribers(name, group, imsi, msisdn, iccid, serialNumber, tag, limit, lastEvaluatedKey, searchType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.QueryApiFp = QueryApiFp;
/**
 * QueryApi - factory interface
 * @export
 */
var QueryApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.QueryApiFp(configuration);
    return {
        /**
         * Search SORACOM Inventory devices by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all SORACOM Inventory devices that includes their group information.
         * @summary Search SORACOM Inventory devices by query
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [deviceId] SORACOM Inventory device ID to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {Array<string>} [imsi] IMSI of the device that was used on bootstrapping
         * @param {Array<string>} [imei] IMEI of the device that was used on bootstrapping
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The SORACOM Inventory device ID of the last Inventory device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Inventory device onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDevices: function (name, group, deviceId, tag, imsi, imei, limit, lastEvaluatedKey, searchType, options) {
            return localVarFp.searchDevices(name, group, deviceId, tag, imsi, imei, limit, lastEvaluatedKey, searchType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Search Sigfox devices by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all Sigfox devices that includes their group information.
         * @summary Search Sigfox devices by query
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [deviceId] Sigfox device ID to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {'active' | 'inactive' | 'suspended' | 'terminated' | 'shipped' | 'ready' | 'inStock' | 'banned' | 'standby'} [status] Status of sigfox devices
         * @param {'notStarted' | 'pending' | 'success' | 'failed'} [registration] Registration status of sigfox devices
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The Sigfox device ID of the last Sigfox device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Sigfox device onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSigfoxDevices: function (name, group, deviceId, tag, status, registration, limit, lastEvaluatedKey, searchType, options) {
            return localVarFp.searchSigfoxDevices(name, group, deviceId, tag, status, registration, limit, lastEvaluatedKey, searchType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Search SIMs by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all SIMs that includes their group information.
         * @summary Search SIMs by query terms
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [simId] Identifier of the SIM to search
         * @param {Array<string>} [imsi] IMSI to search
         * @param {Array<string>} [msisdn] MSISDN to search
         * @param {Array<string>} [iccid] ICCID to search
         * @param {Array<string>} [serialNumber] Serial number to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {Array<string>} [bundles] Bundles type to search
         * @param {'NA' | 'ONLINE' | 'OFFLINE'} [sessionStatus] Status of the session to search (ONLINE or OFFLINE)
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The SIM ID of the last SIM retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSims: function (name, group, simId, imsi, msisdn, iccid, serialNumber, tag, bundles, sessionStatus, limit, lastEvaluatedKey, searchType, options) {
            return localVarFp.searchSims(name, group, simId, imsi, msisdn, iccid, serialNumber, tag, bundles, sessionStatus, limit, lastEvaluatedKey, searchType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Search traffic volume ranking of subscribers
         * @summary Search traffic volume ranking of subscribers
         * @param {number} from The beginning point of searching range (unixtime: in milliseconds)
         * @param {number} to The end point of searching range (unixtime: in milliseconds)
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {'asc' | 'desc'} [order] The order of ranking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubscriberTrafficVolumeRanking: function (from, to, limit, order, options) {
            return localVarFp.searchSubscriberTrafficVolumeRanking(from, to, limit, order, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * (DEPRECATED: please consider to use `/query/sims` API instead) Search subscribers by query terms. It returns partial match results.  When this API permission is allowed, it grants the authority to search and retrieve all SIMs that includes their group information.
         * @summary (DEPRECATED) Search subscribers by query terms
         * @param {Array<string>} [name] Name to search
         * @param {Array<string>} [group] Group name to search
         * @param {Array<string>} [imsi] IMSI to search
         * @param {Array<string>} [msisdn] MSISDN to search
         * @param {Array<string>} [iccid] ICCID to search
         * @param {Array<string>} [serialNumber] Serial number to search
         * @param {Array<string>} [tag] String of tag values to search
         * @param {number} [limit] The maximum number of item to retrieve
         * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
         * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubscribers: function (name, group, imsi, msisdn, iccid, serialNumber, tag, limit, lastEvaluatedKey, searchType, options) {
            return localVarFp.searchSubscribers(name, group, imsi, msisdn, iccid, serialNumber, tag, limit, lastEvaluatedKey, searchType, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.QueryApiFactory = QueryApiFactory;
/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
var QueryApi = /** @class */ (function (_super) {
    __extends(QueryApi, _super);
    function QueryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Search SORACOM Inventory devices by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all SORACOM Inventory devices that includes their group information.
     * @summary Search SORACOM Inventory devices by query
     * @param {Array<string>} [name] Name to search
     * @param {Array<string>} [group] Group name to search
     * @param {Array<string>} [deviceId] SORACOM Inventory device ID to search
     * @param {Array<string>} [tag] String of tag values to search
     * @param {Array<string>} [imsi] IMSI of the device that was used on bootstrapping
     * @param {Array<string>} [imei] IMEI of the device that was used on bootstrapping
     * @param {number} [limit] The maximum number of item to retrieve
     * @param {string} [lastEvaluatedKey] The SORACOM Inventory device ID of the last Inventory device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Inventory device onward.
     * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.searchDevices = function (name, group, deviceId, tag, imsi, imei, limit, lastEvaluatedKey, searchType, options) {
        var _this = this;
        return exports.QueryApiFp(this.configuration).searchDevices(name, group, deviceId, tag, imsi, imei, limit, lastEvaluatedKey, searchType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Search Sigfox devices by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all Sigfox devices that includes their group information.
     * @summary Search Sigfox devices by query
     * @param {Array<string>} [name] Name to search
     * @param {Array<string>} [group] Group name to search
     * @param {Array<string>} [deviceId] Sigfox device ID to search
     * @param {Array<string>} [tag] String of tag values to search
     * @param {'active' | 'inactive' | 'suspended' | 'terminated' | 'shipped' | 'ready' | 'inStock' | 'banned' | 'standby'} [status] Status of sigfox devices
     * @param {'notStarted' | 'pending' | 'success' | 'failed'} [registration] Registration status of sigfox devices
     * @param {number} [limit] The maximum number of item to retrieve
     * @param {string} [lastEvaluatedKey] The Sigfox device ID of the last Sigfox device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Sigfox device onward.
     * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.searchSigfoxDevices = function (name, group, deviceId, tag, status, registration, limit, lastEvaluatedKey, searchType, options) {
        var _this = this;
        return exports.QueryApiFp(this.configuration).searchSigfoxDevices(name, group, deviceId, tag, status, registration, limit, lastEvaluatedKey, searchType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Search SIMs by query terms. It returns partial match results. When this API permission is allowed, it grants the authority to search and retrieve all SIMs that includes their group information.
     * @summary Search SIMs by query terms
     * @param {Array<string>} [name] Name to search
     * @param {Array<string>} [group] Group name to search
     * @param {Array<string>} [simId] Identifier of the SIM to search
     * @param {Array<string>} [imsi] IMSI to search
     * @param {Array<string>} [msisdn] MSISDN to search
     * @param {Array<string>} [iccid] ICCID to search
     * @param {Array<string>} [serialNumber] Serial number to search
     * @param {Array<string>} [tag] String of tag values to search
     * @param {Array<string>} [bundles] Bundles type to search
     * @param {'NA' | 'ONLINE' | 'OFFLINE'} [sessionStatus] Status of the session to search (ONLINE or OFFLINE)
     * @param {number} [limit] The maximum number of item to retrieve
     * @param {string} [lastEvaluatedKey] The SIM ID of the last SIM retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward.
     * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.searchSims = function (name, group, simId, imsi, msisdn, iccid, serialNumber, tag, bundles, sessionStatus, limit, lastEvaluatedKey, searchType, options) {
        var _this = this;
        return exports.QueryApiFp(this.configuration).searchSims(name, group, simId, imsi, msisdn, iccid, serialNumber, tag, bundles, sessionStatus, limit, lastEvaluatedKey, searchType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Search traffic volume ranking of subscribers
     * @summary Search traffic volume ranking of subscribers
     * @param {number} from The beginning point of searching range (unixtime: in milliseconds)
     * @param {number} to The end point of searching range (unixtime: in milliseconds)
     * @param {number} [limit] The maximum number of item to retrieve
     * @param {'asc' | 'desc'} [order] The order of ranking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.searchSubscriberTrafficVolumeRanking = function (from, to, limit, order, options) {
        var _this = this;
        return exports.QueryApiFp(this.configuration).searchSubscriberTrafficVolumeRanking(from, to, limit, order, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * (DEPRECATED: please consider to use `/query/sims` API instead) Search subscribers by query terms. It returns partial match results.  When this API permission is allowed, it grants the authority to search and retrieve all SIMs that includes their group information.
     * @summary (DEPRECATED) Search subscribers by query terms
     * @param {Array<string>} [name] Name to search
     * @param {Array<string>} [group] Group name to search
     * @param {Array<string>} [imsi] IMSI to search
     * @param {Array<string>} [msisdn] MSISDN to search
     * @param {Array<string>} [iccid] ICCID to search
     * @param {Array<string>} [serialNumber] Serial number to search
     * @param {Array<string>} [tag] String of tag values to search
     * @param {number} [limit] The maximum number of item to retrieve
     * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
     * @param {'and' | 'or'} [searchType] Type of the search (\&#39;AND searching\&#39; or \&#39;OR searching\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.searchSubscribers = function (name, group, imsi, msisdn, iccid, serialNumber, tag, limit, lastEvaluatedKey, searchType, options) {
        var _this = this;
        return exports.QueryApiFp(this.configuration).searchSubscribers(name, group, imsi, msisdn, iccid, serialNumber, tag, limit, lastEvaluatedKey, searchType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QueryApi;
}(base_1.BaseAPI));
exports.QueryApi = QueryApi;
/**
 * RoleApi - axios parameter creator
 * @export
 */
var RoleApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Attaches a role to a user.
         * @summary Attach Role to User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {AttachRoleRequest} request role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachRole: function (operatorId, userName, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('attachRole', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('attachRole', 'userName', userName);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('attachRole', 'request', request);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/roles"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Adds a new role.
         * @summary Create Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {CreateOrUpdateRoleRequest} request permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (operatorId, roleId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('createRole', 'operatorId', operatorId);
                            // verify required parameter 'roleId' is not null or undefined
                            common_1.assertParamExists('createRole', 'roleId', roleId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createRole', 'request', request);
                            localVarPath = "/operators/{operator_id}/roles/{role_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "role_id" + "}", encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a role.
         * @summary Delete Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (operatorId, roleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('deleteRole', 'operatorId', operatorId);
                            // verify required parameter 'roleId' is not null or undefined
                            common_1.assertParamExists('deleteRole', 'roleId', roleId);
                            localVarPath = "/operators/{operator_id}/roles/{role_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "role_id" + "}", encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Detaches a role from a user.
         * @summary Detach Role from User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachRole: function (operatorId, userName, roleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('detachRole', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('detachRole', 'userName', userName);
                            // verify required parameter 'roleId' is not null or undefined
                            common_1.assertParamExists('detachRole', 'roleId', roleId);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/roles/{role_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)))
                                .replace("{" + "role_id" + "}", encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a role.
         * @summary Get Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: function (operatorId, roleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getRole', 'operatorId', operatorId);
                            // verify required parameter 'roleId' is not null or undefined
                            common_1.assertParamExists('getRole', 'roleId', roleId);
                            localVarPath = "/operators/{operator_id}/roles/{role_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "role_id" + "}", encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a list of users attached to a role.
         * @summary List Role Attached Users.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAttachedUsers: function (operatorId, roleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('listRoleAttachedUsers', 'operatorId', operatorId);
                            // verify required parameter 'roleId' is not null or undefined
                            common_1.assertParamExists('listRoleAttachedUsers', 'roleId', roleId);
                            localVarPath = "/operators/{operator_id}/roles/{role_id}/users"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "role_id" + "}", encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of roles.
         * @summary List Roles.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('listRoles', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/roles"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a list of the user\'s roles.
         * @summary List User Roles.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRoles: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('listUserRoles', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('listUserRoles', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/roles"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Edits a role.
         * @summary Update Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {CreateOrUpdateRoleRequest} request permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: function (operatorId, roleId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('updateRole', 'operatorId', operatorId);
                            // verify required parameter 'roleId' is not null or undefined
                            common_1.assertParamExists('updateRole', 'roleId', roleId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateRole', 'request', request);
                            localVarPath = "/operators/{operator_id}/roles/{role_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "role_id" + "}", encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.RoleApiAxiosParamCreator = RoleApiAxiosParamCreator;
/**
 * RoleApi - functional programming interface
 * @export
 */
var RoleApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.RoleApiAxiosParamCreator(configuration);
    return {
        /**
         * Attaches a role to a user.
         * @summary Attach Role to User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {AttachRoleRequest} request role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachRole: function (operatorId, userName, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.attachRole(operatorId, userName, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Adds a new role.
         * @summary Create Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {CreateOrUpdateRoleRequest} request permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (operatorId, roleId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createRole(operatorId, roleId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a role.
         * @summary Delete Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (operatorId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteRole(operatorId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Detaches a role from a user.
         * @summary Detach Role from User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachRole: function (operatorId, userName, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.detachRole(operatorId, userName, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves a role.
         * @summary Get Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: function (operatorId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRole(operatorId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves a list of users attached to a role.
         * @summary List Role Attached Users.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAttachedUsers: function (operatorId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listRoleAttachedUsers(operatorId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of roles.
         * @summary List Roles.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listRoles(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves a list of the user\'s roles.
         * @summary List User Roles.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRoles: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listUserRoles(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Edits a role.
         * @summary Update Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {CreateOrUpdateRoleRequest} request permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: function (operatorId, roleId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateRole(operatorId, roleId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.RoleApiFp = RoleApiFp;
/**
 * RoleApi - factory interface
 * @export
 */
var RoleApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.RoleApiFp(configuration);
    return {
        /**
         * Attaches a role to a user.
         * @summary Attach Role to User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {AttachRoleRequest} request role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachRole: function (operatorId, userName, request, options) {
            return localVarFp.attachRole(operatorId, userName, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Adds a new role.
         * @summary Create Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {CreateOrUpdateRoleRequest} request permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (operatorId, roleId, request, options) {
            return localVarFp.createRole(operatorId, roleId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a role.
         * @summary Delete Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (operatorId, roleId, options) {
            return localVarFp.deleteRole(operatorId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Detaches a role from a user.
         * @summary Detach Role from User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachRole: function (operatorId, userName, roleId, options) {
            return localVarFp.detachRole(operatorId, userName, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a role.
         * @summary Get Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: function (operatorId, roleId, options) {
            return localVarFp.getRole(operatorId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a list of users attached to a role.
         * @summary List Role Attached Users.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAttachedUsers: function (operatorId, roleId, options) {
            return localVarFp.listRoleAttachedUsers(operatorId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of roles.
         * @summary List Roles.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (operatorId, options) {
            return localVarFp.listRoles(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a list of the user\'s roles.
         * @summary List User Roles.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRoles: function (operatorId, userName, options) {
            return localVarFp.listUserRoles(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Edits a role.
         * @summary Update Role.
         * @param {string} operatorId operator_id
         * @param {string} roleId role_id
         * @param {CreateOrUpdateRoleRequest} request permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: function (operatorId, roleId, request, options) {
            return localVarFp.updateRole(operatorId, roleId, request, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.RoleApiFactory = RoleApiFactory;
/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
var RoleApi = /** @class */ (function (_super) {
    __extends(RoleApi, _super);
    function RoleApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Attaches a role to a user.
     * @summary Attach Role to User.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {AttachRoleRequest} request role_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.attachRole = function (operatorId, userName, request, options) {
        var _this = this;
        return exports.RoleApiFp(this.configuration).attachRole(operatorId, userName, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Adds a new role.
     * @summary Create Role.
     * @param {string} operatorId operator_id
     * @param {string} roleId role_id
     * @param {CreateOrUpdateRoleRequest} request permission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.createRole = function (operatorId, roleId, request, options) {
        var _this = this;
        return exports.RoleApiFp(this.configuration).createRole(operatorId, roleId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a role.
     * @summary Delete Role.
     * @param {string} operatorId operator_id
     * @param {string} roleId role_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.deleteRole = function (operatorId, roleId, options) {
        var _this = this;
        return exports.RoleApiFp(this.configuration).deleteRole(operatorId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Detaches a role from a user.
     * @summary Detach Role from User.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {string} roleId role_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.detachRole = function (operatorId, userName, roleId, options) {
        var _this = this;
        return exports.RoleApiFp(this.configuration).detachRole(operatorId, userName, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a role.
     * @summary Get Role.
     * @param {string} operatorId operator_id
     * @param {string} roleId role_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.getRole = function (operatorId, roleId, options) {
        var _this = this;
        return exports.RoleApiFp(this.configuration).getRole(operatorId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a list of users attached to a role.
     * @summary List Role Attached Users.
     * @param {string} operatorId operator_id
     * @param {string} roleId role_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.listRoleAttachedUsers = function (operatorId, roleId, options) {
        var _this = this;
        return exports.RoleApiFp(this.configuration).listRoleAttachedUsers(operatorId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of roles.
     * @summary List Roles.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.listRoles = function (operatorId, options) {
        var _this = this;
        return exports.RoleApiFp(this.configuration).listRoles(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a list of the user\'s roles.
     * @summary List User Roles.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.listUserRoles = function (operatorId, userName, options) {
        var _this = this;
        return exports.RoleApiFp(this.configuration).listUserRoles(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Edits a role.
     * @summary Update Role.
     * @param {string} operatorId operator_id
     * @param {string} roleId role_id
     * @param {CreateOrUpdateRoleRequest} request permission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.updateRole = function (operatorId, roleId, request, options) {
        var _this = this;
        return exports.RoleApiFp(this.configuration).updateRole(operatorId, roleId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RoleApi;
}(base_1.BaseAPI));
exports.RoleApi = RoleApi;
/**
 * ShippingAddressApi - axios parameter creator
 * @export
 */
var ShippingAddressApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new shipping address.
         * @summary Create shipping address.
         * @param {string} operatorId operator_id
         * @param {ShippingAddressModel} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShippingAddress: function (operatorId, model, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('createShippingAddress', 'operatorId', operatorId);
                            // verify required parameter 'model' is not null or undefined
                            common_1.assertParamExists('createShippingAddress', 'model', model);
                            localVarPath = "/operators/{operator_id}/shipping_addresses"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(model, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a shipping address.
         * @summary Delete shipping address.
         * @param {string} operatorId operator_id
         * @param {string} shippingAddressId shipping_address_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShippingAddress: function (operatorId, shippingAddressId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('deleteShippingAddress', 'operatorId', operatorId);
                            // verify required parameter 'shippingAddressId' is not null or undefined
                            common_1.assertParamExists('deleteShippingAddress', 'shippingAddressId', shippingAddressId);
                            localVarPath = "/operators/{operator_id}/shipping_addresses/{shipping_address_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "shipping_address_id" + "}", encodeURIComponent(String(shippingAddressId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a shipping address.
         * @summary Get shipping address.
         * @param {string} operatorId operator_id
         * @param {string} shippingAddressId shipping_address_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingAddress: function (operatorId, shippingAddressId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getShippingAddress', 'operatorId', operatorId);
                            // verify required parameter 'shippingAddressId' is not null or undefined
                            common_1.assertParamExists('getShippingAddress', 'shippingAddressId', shippingAddressId);
                            localVarPath = "/operators/{operator_id}/shipping_addresses/{shipping_address_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "shipping_address_id" + "}", encodeURIComponent(String(shippingAddressId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of shipping addresses.
         * @summary List shipping addresses.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShippingAddresses: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('listShippingAddresses', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/shipping_addresses"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates a shipping address.
         * @summary Update shipping address.
         * @param {string} operatorId Operator ID
         * @param {string} shippingAddressId shipping_address_id
         * @param {ShippingAddressModel} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShippingAddress: function (operatorId, shippingAddressId, model, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('updateShippingAddress', 'operatorId', operatorId);
                            // verify required parameter 'shippingAddressId' is not null or undefined
                            common_1.assertParamExists('updateShippingAddress', 'shippingAddressId', shippingAddressId);
                            // verify required parameter 'model' is not null or undefined
                            common_1.assertParamExists('updateShippingAddress', 'model', model);
                            localVarPath = "/operators/{operator_id}/shipping_addresses/{shipping_address_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "shipping_address_id" + "}", encodeURIComponent(String(shippingAddressId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(model, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.ShippingAddressApiAxiosParamCreator = ShippingAddressApiAxiosParamCreator;
/**
 * ShippingAddressApi - functional programming interface
 * @export
 */
var ShippingAddressApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ShippingAddressApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new shipping address.
         * @summary Create shipping address.
         * @param {string} operatorId operator_id
         * @param {ShippingAddressModel} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShippingAddress: function (operatorId, model, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createShippingAddress(operatorId, model, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a shipping address.
         * @summary Delete shipping address.
         * @param {string} operatorId operator_id
         * @param {string} shippingAddressId shipping_address_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShippingAddress: function (operatorId, shippingAddressId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteShippingAddress(operatorId, shippingAddressId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a shipping address.
         * @summary Get shipping address.
         * @param {string} operatorId operator_id
         * @param {string} shippingAddressId shipping_address_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingAddress: function (operatorId, shippingAddressId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getShippingAddress(operatorId, shippingAddressId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of shipping addresses.
         * @summary List shipping addresses.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShippingAddresses: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listShippingAddresses(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates a shipping address.
         * @summary Update shipping address.
         * @param {string} operatorId Operator ID
         * @param {string} shippingAddressId shipping_address_id
         * @param {ShippingAddressModel} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShippingAddress: function (operatorId, shippingAddressId, model, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateShippingAddress(operatorId, shippingAddressId, model, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.ShippingAddressApiFp = ShippingAddressApiFp;
/**
 * ShippingAddressApi - factory interface
 * @export
 */
var ShippingAddressApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ShippingAddressApiFp(configuration);
    return {
        /**
         * Creates a new shipping address.
         * @summary Create shipping address.
         * @param {string} operatorId operator_id
         * @param {ShippingAddressModel} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShippingAddress: function (operatorId, model, options) {
            return localVarFp.createShippingAddress(operatorId, model, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a shipping address.
         * @summary Delete shipping address.
         * @param {string} operatorId operator_id
         * @param {string} shippingAddressId shipping_address_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShippingAddress: function (operatorId, shippingAddressId, options) {
            return localVarFp.deleteShippingAddress(operatorId, shippingAddressId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a shipping address.
         * @summary Get shipping address.
         * @param {string} operatorId operator_id
         * @param {string} shippingAddressId shipping_address_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingAddress: function (operatorId, shippingAddressId, options) {
            return localVarFp.getShippingAddress(operatorId, shippingAddressId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of shipping addresses.
         * @summary List shipping addresses.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShippingAddresses: function (operatorId, options) {
            return localVarFp.listShippingAddresses(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a shipping address.
         * @summary Update shipping address.
         * @param {string} operatorId Operator ID
         * @param {string} shippingAddressId shipping_address_id
         * @param {ShippingAddressModel} model model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShippingAddress: function (operatorId, shippingAddressId, model, options) {
            return localVarFp.updateShippingAddress(operatorId, shippingAddressId, model, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.ShippingAddressApiFactory = ShippingAddressApiFactory;
/**
 * ShippingAddressApi - object-oriented interface
 * @export
 * @class ShippingAddressApi
 * @extends {BaseAPI}
 */
var ShippingAddressApi = /** @class */ (function (_super) {
    __extends(ShippingAddressApi, _super);
    function ShippingAddressApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new shipping address.
     * @summary Create shipping address.
     * @param {string} operatorId operator_id
     * @param {ShippingAddressModel} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingAddressApi
     */
    ShippingAddressApi.prototype.createShippingAddress = function (operatorId, model, options) {
        var _this = this;
        return exports.ShippingAddressApiFp(this.configuration).createShippingAddress(operatorId, model, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a shipping address.
     * @summary Delete shipping address.
     * @param {string} operatorId operator_id
     * @param {string} shippingAddressId shipping_address_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingAddressApi
     */
    ShippingAddressApi.prototype.deleteShippingAddress = function (operatorId, shippingAddressId, options) {
        var _this = this;
        return exports.ShippingAddressApiFp(this.configuration).deleteShippingAddress(operatorId, shippingAddressId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a shipping address.
     * @summary Get shipping address.
     * @param {string} operatorId operator_id
     * @param {string} shippingAddressId shipping_address_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingAddressApi
     */
    ShippingAddressApi.prototype.getShippingAddress = function (operatorId, shippingAddressId, options) {
        var _this = this;
        return exports.ShippingAddressApiFp(this.configuration).getShippingAddress(operatorId, shippingAddressId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of shipping addresses.
     * @summary List shipping addresses.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingAddressApi
     */
    ShippingAddressApi.prototype.listShippingAddresses = function (operatorId, options) {
        var _this = this;
        return exports.ShippingAddressApiFp(this.configuration).listShippingAddresses(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a shipping address.
     * @summary Update shipping address.
     * @param {string} operatorId Operator ID
     * @param {string} shippingAddressId shipping_address_id
     * @param {ShippingAddressModel} model model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingAddressApi
     */
    ShippingAddressApi.prototype.updateShippingAddress = function (operatorId, shippingAddressId, model, options) {
        var _this = this;
        return exports.ShippingAddressApiFp(this.configuration).updateShippingAddress(operatorId, shippingAddressId, model, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ShippingAddressApi;
}(base_1.BaseAPI));
exports.ShippingAddressApi = ShippingAddressApi;
/**
 * SigfoxDeviceApi - axios parameter creator
 * @export
 */
var SigfoxDeviceApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes a tag from the specified Sigfox device.
         * @summary Delete Sigfox device Tag.
         * @param {string} deviceId device ID of the target Sigfox device.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSigfoxDeviceTag: function (deviceId, tagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('deleteSigfoxDeviceTag', 'deviceId', deviceId);
                            // verify required parameter 'tagName' is not null or undefined
                            common_1.assertParamExists('deleteSigfoxDeviceTag', 'tagName', tagName);
                            localVarPath = "/sigfox_devices/{device_id}/tags/{tag_name}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)))
                                .replace("{" + "tag_name" + "}", encodeURIComponent(String(tagName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Disables termination of specified Sigfox device.
         * @summary Disable Termination of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnSigfoxDevice: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('disableTerminationOnSigfoxDevice', 'deviceId', deviceId);
                            localVarPath = "/sigfox_devices/{device_id}/disable_termination"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Enables termination of specified Sigfox device.
         * @summary Enable Termination of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnSigfoxDevice: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('enableTerminationOnSigfoxDevice', 'deviceId', deviceId);
                            localVarPath = "/sigfox_devices/{device_id}/enable_termination"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a Sigfox device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a Sigfox device.
         * @param {string} deviceId Device ID of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromSigfoxDevice: function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('getDataFromSigfoxDevice', 'deviceId', deviceId);
                            localVarPath = "/sigfox_devices/{device_id}/data"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (sort !== undefined) {
                                localVarQueryParameter['sort'] = sort;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns information about the specified Sigfox device.
         * @summary Get Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigfoxDevice: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('getSigfoxDevice', 'deviceId', deviceId);
                            localVarPath = "/sigfox_devices/{device_id}"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of Sigfox devices that match certain criteria. If the total number of Sigfox devices does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List Sigfox devices.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of Sigfox devices to retrieve.
         * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSigfoxDevices: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/sigfox_devices";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (tagName !== undefined) {
                                localVarQueryParameter['tag_name'] = tagName;
                            }
                            if (tagValue !== undefined) {
                                localVarQueryParameter['tag_value'] = tagValue;
                            }
                            if (tagValueMatchMode !== undefined) {
                                localVarQueryParameter['tag_value_match_mode'] = tagValueMatchMode;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified Sigfox device.
         * @summary Bulk Insert or Update Sigfox device Tags.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSigfoxDeviceTags: function (deviceId, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('putSigfoxDeviceTags', 'deviceId', deviceId);
                            // verify required parameter 'tags' is not null or undefined
                            common_1.assertParamExists('putSigfoxDeviceTags', 'tags', tags);
                            localVarPath = "/sigfox_devices/{device_id}/tags"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Registers a Sigfox device
         * @summary Register a Sigfox device.
         * @param {string} deviceId Device ID of the target sigfox device to register
         * @param {SigfoxRegistrationRequest} registrationRequest Sigfox device registration request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSigfoxDevice: function (deviceId, registrationRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('registerSigfoxDevice', 'deviceId', deviceId);
                            // verify required parameter 'registrationRequest' is not null or undefined
                            common_1.assertParamExists('registerSigfoxDevice', 'registrationRequest', registrationRequest);
                            localVarPath = "/sigfox_devices/{device_id}/register"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(registrationRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sends data to the specified Sigfox device. The data will be stored until the device sends a next uplink message. If another message destined for the same Sigfox device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
         * @summary Send data to a Sigfox device.
         * @param {string} deviceId ID of the recipient device.
         * @param {SigfoxData} data Binary data encoded as a hexadecimal string. Length of original binary data must be 8 octets (16 characters when encoded as a hexadecimal string).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDataToSigfoxDevice: function (deviceId, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('sendDataToSigfoxDevice', 'deviceId', deviceId);
                            // verify required parameter 'data' is not null or undefined
                            common_1.assertParamExists('sendDataToSigfoxDevice', 'data', data);
                            localVarPath = "/sigfox_devices/{device_id}/data"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(data, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified Sigfox device.
         * @summary Set Group of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {Group} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSigfoxDeviceGroup: function (deviceId, group, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('setSigfoxDeviceGroup', 'deviceId', deviceId);
                            // verify required parameter 'group' is not null or undefined
                            common_1.assertParamExists('setSigfoxDeviceGroup', 'group', group);
                            localVarPath = "/sigfox_devices/{device_id}/set_group"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(group, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Terminates the specified Sigfox device
         * @summary Terminate Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateSigfoxDevice: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('terminateSigfoxDevice', 'deviceId', deviceId);
                            localVarPath = "/sigfox_devices/{device_id}/terminate"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified Sigfox device.
         * @summary Unset Group of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSigfoxDeviceGroup: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            common_1.assertParamExists('unsetSigfoxDeviceGroup', 'deviceId', deviceId);
                            localVarPath = "/sigfox_devices/{device_id}/unset_group"
                                .replace("{" + "device_id" + "}", encodeURIComponent(String(deviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.SigfoxDeviceApiAxiosParamCreator = SigfoxDeviceApiAxiosParamCreator;
/**
 * SigfoxDeviceApi - functional programming interface
 * @export
 */
var SigfoxDeviceApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SigfoxDeviceApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes a tag from the specified Sigfox device.
         * @summary Delete Sigfox device Tag.
         * @param {string} deviceId device ID of the target Sigfox device.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSigfoxDeviceTag: function (deviceId, tagName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSigfoxDeviceTag(deviceId, tagName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Disables termination of specified Sigfox device.
         * @summary Disable Termination of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnSigfoxDevice: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disableTerminationOnSigfoxDevice(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Enables termination of specified Sigfox device.
         * @summary Enable Termination of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnSigfoxDevice: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableTerminationOnSigfoxDevice(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a Sigfox device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a Sigfox device.
         * @param {string} deviceId Device ID of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromSigfoxDevice: function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDataFromSigfoxDevice(deviceId, from, to, sort, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns information about the specified Sigfox device.
         * @summary Get Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigfoxDevice: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSigfoxDevice(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of Sigfox devices that match certain criteria. If the total number of Sigfox devices does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List Sigfox devices.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of Sigfox devices to retrieve.
         * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSigfoxDevices: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSigfoxDevices(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified Sigfox device.
         * @summary Bulk Insert or Update Sigfox device Tags.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSigfoxDeviceTags: function (deviceId, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putSigfoxDeviceTags(deviceId, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Registers a Sigfox device
         * @summary Register a Sigfox device.
         * @param {string} deviceId Device ID of the target sigfox device to register
         * @param {SigfoxRegistrationRequest} registrationRequest Sigfox device registration request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSigfoxDevice: function (deviceId, registrationRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerSigfoxDevice(deviceId, registrationRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sends data to the specified Sigfox device. The data will be stored until the device sends a next uplink message. If another message destined for the same Sigfox device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
         * @summary Send data to a Sigfox device.
         * @param {string} deviceId ID of the recipient device.
         * @param {SigfoxData} data Binary data encoded as a hexadecimal string. Length of original binary data must be 8 octets (16 characters when encoded as a hexadecimal string).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDataToSigfoxDevice: function (deviceId, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendDataToSigfoxDevice(deviceId, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified Sigfox device.
         * @summary Set Group of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {Group} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSigfoxDeviceGroup: function (deviceId, group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setSigfoxDeviceGroup(deviceId, group, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Terminates the specified Sigfox device
         * @summary Terminate Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateSigfoxDevice: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.terminateSigfoxDevice(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified Sigfox device.
         * @summary Unset Group of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSigfoxDeviceGroup: function (deviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetSigfoxDeviceGroup(deviceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.SigfoxDeviceApiFp = SigfoxDeviceApiFp;
/**
 * SigfoxDeviceApi - factory interface
 * @export
 */
var SigfoxDeviceApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SigfoxDeviceApiFp(configuration);
    return {
        /**
         * Deletes a tag from the specified Sigfox device.
         * @summary Delete Sigfox device Tag.
         * @param {string} deviceId device ID of the target Sigfox device.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSigfoxDeviceTag: function (deviceId, tagName, options) {
            return localVarFp.deleteSigfoxDeviceTag(deviceId, tagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Disables termination of specified Sigfox device.
         * @summary Disable Termination of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTerminationOnSigfoxDevice: function (deviceId, options) {
            return localVarFp.disableTerminationOnSigfoxDevice(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Enables termination of specified Sigfox device.
         * @summary Enable Termination of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTerminationOnSigfoxDevice: function (deviceId, options) {
            return localVarFp.enableTerminationOnSigfoxDevice(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of data entries sent from a Sigfox device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a Sigfox device.
         * @param {string} deviceId Device ID of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromSigfoxDevice: function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
            return localVarFp.getDataFromSigfoxDevice(deviceId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns information about the specified Sigfox device.
         * @summary Get Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigfoxDevice: function (deviceId, options) {
            return localVarFp.getSigfoxDevice(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of Sigfox devices that match certain criteria. If the total number of Sigfox devices does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List Sigfox devices.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of Sigfox devices to retrieve.
         * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSigfoxDevices: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return localVarFp.listSigfoxDevices(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Inserts/updates tags for the specified Sigfox device.
         * @summary Bulk Insert or Update Sigfox device Tags.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSigfoxDeviceTags: function (deviceId, tags, options) {
            return localVarFp.putSigfoxDeviceTags(deviceId, tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Registers a Sigfox device
         * @summary Register a Sigfox device.
         * @param {string} deviceId Device ID of the target sigfox device to register
         * @param {SigfoxRegistrationRequest} registrationRequest Sigfox device registration request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSigfoxDevice: function (deviceId, registrationRequest, options) {
            return localVarFp.registerSigfoxDevice(deviceId, registrationRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sends data to the specified Sigfox device. The data will be stored until the device sends a next uplink message. If another message destined for the same Sigfox device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
         * @summary Send data to a Sigfox device.
         * @param {string} deviceId ID of the recipient device.
         * @param {SigfoxData} data Binary data encoded as a hexadecimal string. Length of original binary data must be 8 octets (16 characters when encoded as a hexadecimal string).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDataToSigfoxDevice: function (deviceId, data, options) {
            return localVarFp.sendDataToSigfoxDevice(deviceId, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets or overwrites a group for the specified Sigfox device.
         * @summary Set Group of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {Group} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSigfoxDeviceGroup: function (deviceId, group, options) {
            return localVarFp.setSigfoxDeviceGroup(deviceId, group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Terminates the specified Sigfox device
         * @summary Terminate Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateSigfoxDevice: function (deviceId, options) {
            return localVarFp.terminateSigfoxDevice(deviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes the group configuration from the specified Sigfox device.
         * @summary Unset Group of Sigfox device.
         * @param {string} deviceId Device ID of the target Sigfox device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSigfoxDeviceGroup: function (deviceId, options) {
            return localVarFp.unsetSigfoxDeviceGroup(deviceId, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.SigfoxDeviceApiFactory = SigfoxDeviceApiFactory;
/**
 * SigfoxDeviceApi - object-oriented interface
 * @export
 * @class SigfoxDeviceApi
 * @extends {BaseAPI}
 */
var SigfoxDeviceApi = /** @class */ (function (_super) {
    __extends(SigfoxDeviceApi, _super);
    function SigfoxDeviceApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a tag from the specified Sigfox device.
     * @summary Delete Sigfox device Tag.
     * @param {string} deviceId device ID of the target Sigfox device.
     * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.deleteSigfoxDeviceTag = function (deviceId, tagName, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).deleteSigfoxDeviceTag(deviceId, tagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Disables termination of specified Sigfox device.
     * @summary Disable Termination of Sigfox device.
     * @param {string} deviceId Device ID of the target Sigfox device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.disableTerminationOnSigfoxDevice = function (deviceId, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).disableTerminationOnSigfoxDevice(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Enables termination of specified Sigfox device.
     * @summary Enable Termination of Sigfox device.
     * @param {string} deviceId Device ID of the target Sigfox device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.enableTerminationOnSigfoxDevice = function (deviceId, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).enableTerminationOnSigfoxDevice(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of data entries sent from a Sigfox device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary Get data sent from a Sigfox device.
     * @param {string} deviceId Device ID of the target subscriber that generated data entries.
     * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
     * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
     * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
     * @param {number} [limit] Maximum number of data entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.getDataFromSigfoxDevice = function (deviceId, from, to, sort, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).getDataFromSigfoxDevice(deviceId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns information about the specified Sigfox device.
     * @summary Get Sigfox device.
     * @param {string} deviceId Device ID of the target Sigfox device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.getSigfoxDevice = function (deviceId, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).getSigfoxDevice(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of Sigfox devices that match certain criteria. If the total number of Sigfox devices does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary List Sigfox devices.
     * @param {string} [tagName] Tag name for filtering the search (exact match).
     * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
     * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
     * @param {number} [limit] Maximum number of Sigfox devices to retrieve.
     * @param {string} [lastEvaluatedKey] The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.listSigfoxDevices = function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).listSigfoxDevices(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Inserts/updates tags for the specified Sigfox device.
     * @summary Bulk Insert or Update Sigfox device Tags.
     * @param {string} deviceId Device ID of the target Sigfox device.
     * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.putSigfoxDeviceTags = function (deviceId, tags, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).putSigfoxDeviceTags(deviceId, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Registers a Sigfox device
     * @summary Register a Sigfox device.
     * @param {string} deviceId Device ID of the target sigfox device to register
     * @param {SigfoxRegistrationRequest} registrationRequest Sigfox device registration request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.registerSigfoxDevice = function (deviceId, registrationRequest, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).registerSigfoxDevice(deviceId, registrationRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sends data to the specified Sigfox device. The data will be stored until the device sends a next uplink message. If another message destined for the same Sigfox device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
     * @summary Send data to a Sigfox device.
     * @param {string} deviceId ID of the recipient device.
     * @param {SigfoxData} data Binary data encoded as a hexadecimal string. Length of original binary data must be 8 octets (16 characters when encoded as a hexadecimal string).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.sendDataToSigfoxDevice = function (deviceId, data, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).sendDataToSigfoxDevice(deviceId, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets or overwrites a group for the specified Sigfox device.
     * @summary Set Group of Sigfox device.
     * @param {string} deviceId Device ID of the target Sigfox device.
     * @param {Group} group Group (may include ID only).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.setSigfoxDeviceGroup = function (deviceId, group, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).setSigfoxDeviceGroup(deviceId, group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Terminates the specified Sigfox device
     * @summary Terminate Sigfox device.
     * @param {string} deviceId Device ID of the target Sigfox device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.terminateSigfoxDevice = function (deviceId, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).terminateSigfoxDevice(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes the group configuration from the specified Sigfox device.
     * @summary Unset Group of Sigfox device.
     * @param {string} deviceId Device ID of the target Sigfox device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigfoxDeviceApi
     */
    SigfoxDeviceApi.prototype.unsetSigfoxDeviceGroup = function (deviceId, options) {
        var _this = this;
        return exports.SigfoxDeviceApiFp(this.configuration).unsetSigfoxDeviceGroup(deviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SigfoxDeviceApi;
}(base_1.BaseAPI));
exports.SigfoxDeviceApi = SigfoxDeviceApi;
/**
 * SimApi - axios parameter creator
 * @export
 */
var SimApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Change status of specified SIM to active.
         * @summary Activate SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateSim: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('activateSim', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/activate"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * This API is used to trigger the OTA update of a new subscription container to a SIM profile.
         * @summary Adds a new subscription container to a SIM profile
         * @param {string} simId Id of the target SIM
         * @param {string} iccid Iccid of the target profile
         * @param {InlineObject2} [subscriptionParameters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscription: function (simId, iccid, subscriptionParameters, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('addSubscription', 'simId', simId);
                            // verify required parameter 'iccid' is not null or undefined
                            common_1.assertParamExists('addSubscription', 'iccid', iccid);
                            localVarPath = "/sims/{sim_id}/profiles/{iccid}/add_subscription"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)))
                                .replace("{" + "iccid" + "}", encodeURIComponent(String(iccid)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(subscriptionParameters, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Change status of specified SIM to inactive.
         * @summary Deactivate SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateSim: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('deactivateSim', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/deactivate"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes session for the specified SIM.
         * @summary Delete Session
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimSession: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('deleteSimSession', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/delete_session"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a tag from the specified SIM.
         * @summary Delete SIM tag.
         * @param {string} simId Sim Id of the target SIM.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimTag: function (simId, tagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('deleteSimTag', 'simId', simId);
                            // verify required parameter 'tagName' is not null or undefined
                            common_1.assertParamExists('deleteSimTag', 'tagName', tagName);
                            localVarPath = "/sims/{sim_id}/tags/{tag_name}"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)))
                                .replace("{" + "tag_name" + "}", encodeURIComponent(String(tagName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Delete subscription container country mapping entries
         * @summary Delete subscription container mapping entries
         * @param {string} simId SIM ID of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {string} mcc mobile country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionContainerCountryMappingEntry: function (simId, iccid, mcc, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('deleteSubscriptionContainerCountryMappingEntry', 'simId', simId);
                            // verify required parameter 'iccid' is not null or undefined
                            common_1.assertParamExists('deleteSubscriptionContainerCountryMappingEntry', 'iccid', iccid);
                            // verify required parameter 'mcc' is not null or undefined
                            common_1.assertParamExists('deleteSubscriptionContainerCountryMappingEntry', 'mcc', mcc);
                            localVarPath = "/sims/{sim_id}/profiles/{iccid}/subscription_containers/country_mapping/{mcc}"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)))
                                .replace("{" + "iccid" + "}", encodeURIComponent(String(iccid)))
                                .replace("{" + "mcc" + "}", encodeURIComponent(String(mcc)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Disables termination of the specified SIM.
         * @summary Disable termination of the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableSimTermination: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('disableSimTermination', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/disable_termination"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Enables termination of specified SIM.
         * @summary Enable termination of the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableSimTermination: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('enableSimTermination', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/enable_termination"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Causes the identified container to become the active one on the Sim.
         * @summary Enables a subscription container.
         * @param {string} simId SIM ID of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {string} containerId Identifier of the target container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableSubscriptionContainer: function (simId, iccid, containerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('enableSubscriptionContainer', 'simId', simId);
                            // verify required parameter 'iccid' is not null or undefined
                            common_1.assertParamExists('enableSubscriptionContainer', 'iccid', iccid);
                            // verify required parameter 'containerId' is not null or undefined
                            common_1.assertParamExists('enableSubscriptionContainer', 'containerId', containerId);
                            localVarPath = "/sims/{sim_id}/profiles/{iccid}/subscription_containers/{containerId}/enable"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)))
                                .replace("{" + "iccid" + "}", encodeURIComponent(String(iccid)))
                                .replace("{" + "containerId" + "}", encodeURIComponent(String(containerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a SIM that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a SIM.
         * @param {string} simId Sim Id of the target SIM.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromSim: function (simId, from, to, sort, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('getDataFromSim', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/data"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (sort !== undefined) {
                                localVarQueryParameter['sort'] = sort;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Obtain a SIM record identified by the sim_id
         * @summary Get a SIM identified by sim_id
         * @param {string} simId Id of the target SIM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSim: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('getSim', 'simId', simId);
                            localVarPath = "/sims/{sim_id}"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns the history of session creation, change, and deletion events occurred on the target SIM in the last 14 days. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
         * @summary List Session Events.
         * @param {string} simId SIM ID of the target SIM.
         * @param {number} [from] Start time for the events search range (unixtime).
         * @param {number} [to] End time for the events search range (unixtime).
         * @param {number} [limit] Maximum number of events to retrieve.
         * @param {string} [lastEvaluatedKey] The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimSessionEvents: function (simId, from, to, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('listSimSessionEvents', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/events/sessions"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of SIMs that match certain criteria. If the total number of SIMs does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List SIMs.
         * @param {number} [limit] Maximum number of SIMs to retrieve.
         * @param {string} [lastEvaluatedKey] The ID of the last SIM retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSims: function (limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/sims";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a schema listing subscription containers and containing a map of PLMN codes to subscription containers
         * @summary Get subscription container status.
         * @param {string} simId Sim Id of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionContainers: function (simId, iccid, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('listSubscriptionContainers', 'simId', simId);
                            // verify required parameter 'iccid' is not null or undefined
                            common_1.assertParamExists('listSubscriptionContainers', 'iccid', iccid);
                            localVarPath = "/sims/{sim_id}/profiles/{iccid}/subscription_containers"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)))
                                .replace("{" + "iccid" + "}", encodeURIComponent(String(iccid)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified SIM.
         * @summary Bulk insert or update SIM tags.
         * @param {string} simId SIM ID of the target SIM.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSimTags: function (simId, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('putSimTags', 'simId', simId);
                            // verify required parameter 'tags' is not null or undefined
                            common_1.assertParamExists('putSimTags', 'tags', tags);
                            localVarPath = "/sims/{sim_id}/tags"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Inserts/updates Country (and optionally network) to subscription container mapping entries in the mapping table.
         * @summary Updates subscription container country mapping entries.
         * @param {string} simId SIM ID of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {MappingEntries} mappingEntries collection of country (and optionally network) to subscription container mapping entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubscriptionContainerCountryMappingEntries: function (simId, iccid, mappingEntries, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('putSubscriptionContainerCountryMappingEntries', 'simId', simId);
                            // verify required parameter 'iccid' is not null or undefined
                            common_1.assertParamExists('putSubscriptionContainerCountryMappingEntries', 'iccid', iccid);
                            // verify required parameter 'mappingEntries' is not null or undefined
                            common_1.assertParamExists('putSubscriptionContainerCountryMappingEntries', 'mappingEntries', mappingEntries);
                            localVarPath = "/sims/{sim_id}/profiles/{iccid}/subscription_containers/country_mapping"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)))
                                .replace("{" + "iccid" + "}", encodeURIComponent(String(iccid)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(mappingEntries, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Registers a SIM to an operator.
         * @summary Register SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {RegisterSimRequest} registerSimRequest A SIM registration request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSim: function (simId, registerSimRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('registerSim', 'simId', simId);
                            // verify required parameter 'registerSimRequest' is not null or undefined
                            common_1.assertParamExists('registerSim', 'registerSimRequest', registerSimRequest);
                            localVarPath = "/sims/{sim_id}/register"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(registerSimRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Triggers SIM to report SIM local info.
         * @summary Triggers SIM to report SIM local info.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSimLocalInfo: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('reportSimLocalInfo', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/report_local_info"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Send SMS to the specified SIM.
         * @summary Send SMS to SIM
         * @param {string} simId SIM ID of the target SIM.
         * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSmsToSim: function (simId, smsForwardingRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('sendSmsToSim', 'simId', simId);
                            // verify required parameter 'smsForwardingRequest' is not null or undefined
                            common_1.assertParamExists('sendSmsToSim', 'smsForwardingRequest', smsForwardingRequest);
                            localVarPath = "/sims/{sim_id}/send_sms"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(smsForwardingRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates expiry time of the specified SIM.
         * @summary Update expiry time of SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {ExpiryTime} request Expiry time after the update (unixtime: in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimExpiryTime: function (simId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('setSimExpiryTime', 'simId', simId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('setSimExpiryTime', 'request', request);
                            localVarPath = "/sims/{sim_id}/set_expiry_time"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified SIM.
         * @summary Set Group id of a SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {SetGroupRequest} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimGroup: function (simId, group, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('setSimGroup', 'simId', simId);
                            // verify required parameter 'group' is not null or undefined
                            common_1.assertParamExists('setSimGroup', 'group', group);
                            localVarPath = "/sims/{sim_id}/set_group"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(group, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Set IMEI that the SIM should be locked to.
         * @summary Set IMEI lock configuration for the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {SetImeiLockRequest} [imeiLock] IMEI lock configuration for the SIM. (IMEI can be left blank for locking to the current IMEI of an online SIM.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimImeiLock: function (simId, imeiLock, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('setSimImeiLock', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/set_imei_lock"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(imeiLock, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Set the specified SIM to standby mode.
         * @summary Set SIM to standby mode.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimToStandby: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('setSimToStandby', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/set_to_standby"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Suspends the specified SIM
         * @summary Suspend SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendSim: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('suspendSim', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/suspend"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Terminates the specified SIM.
         * @summary Terminate SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateSim: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('terminateSim', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/terminate"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes expiry time of specified SIM and changes it to indefinite.
         * @summary Delete expiry time of the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSimExpiryTime: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('unsetSimExpiryTime', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/unset_expiry_time"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified SIM.
         * @summary Unset Group to SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSimGroup: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('unsetSimGroup', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/unset_group"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Remove any existing IMEI lock configuration for the SIM.
         * @summary Unset IMEI lock configuration for SIM.
         * @param {string} simId Sim Id of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSimImeiLock: function (simId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('unsetSimImeiLock', 'simId', simId);
                            localVarPath = "/sims/{sim_id}/unset_imei_lock"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Changes the speed class of the specified SIM.
         * @summary Update SIM speed class.
         * @param {string} simId SIM ID of the target SIM.
         * @param {UpdateSpeedClassRequest} speedClass speed_class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSimSpeedClass: function (simId, speedClass, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('updateSimSpeedClass', 'simId', simId);
                            // verify required parameter 'speedClass' is not null or undefined
                            common_1.assertParamExists('updateSimSpeedClass', 'speedClass', speedClass);
                            localVarPath = "/sims/{sim_id}/update_speed_class"
                                .replace("{" + "sim_id" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(speedClass, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.SimApiAxiosParamCreator = SimApiAxiosParamCreator;
/**
 * SimApi - functional programming interface
 * @export
 */
var SimApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SimApiAxiosParamCreator(configuration);
    return {
        /**
         * Change status of specified SIM to active.
         * @summary Activate SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateSim: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.activateSim(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API is used to trigger the OTA update of a new subscription container to a SIM profile.
         * @summary Adds a new subscription container to a SIM profile
         * @param {string} simId Id of the target SIM
         * @param {string} iccid Iccid of the target profile
         * @param {InlineObject2} [subscriptionParameters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscription: function (simId, iccid, subscriptionParameters, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addSubscription(simId, iccid, subscriptionParameters, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Change status of specified SIM to inactive.
         * @summary Deactivate SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateSim: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deactivateSim(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes session for the specified SIM.
         * @summary Delete Session
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimSession: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSimSession(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a tag from the specified SIM.
         * @summary Delete SIM tag.
         * @param {string} simId Sim Id of the target SIM.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimTag: function (simId, tagName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSimTag(simId, tagName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete subscription container country mapping entries
         * @summary Delete subscription container mapping entries
         * @param {string} simId SIM ID of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {string} mcc mobile country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionContainerCountryMappingEntry: function (simId, iccid, mcc, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSubscriptionContainerCountryMappingEntry(simId, iccid, mcc, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Disables termination of the specified SIM.
         * @summary Disable termination of the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableSimTermination: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disableSimTermination(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Enables termination of specified SIM.
         * @summary Enable termination of the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableSimTermination: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableSimTermination(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Causes the identified container to become the active one on the Sim.
         * @summary Enables a subscription container.
         * @param {string} simId SIM ID of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {string} containerId Identifier of the target container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableSubscriptionContainer: function (simId, iccid, containerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableSubscriptionContainer(simId, iccid, containerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a SIM that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a SIM.
         * @param {string} simId Sim Id of the target SIM.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromSim: function (simId, from, to, sort, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDataFromSim(simId, from, to, sort, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Obtain a SIM record identified by the sim_id
         * @summary Get a SIM identified by sim_id
         * @param {string} simId Id of the target SIM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSim: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSim(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the history of session creation, change, and deletion events occurred on the target SIM in the last 14 days. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
         * @summary List Session Events.
         * @param {string} simId SIM ID of the target SIM.
         * @param {number} [from] Start time for the events search range (unixtime).
         * @param {number} [to] End time for the events search range (unixtime).
         * @param {number} [limit] Maximum number of events to retrieve.
         * @param {string} [lastEvaluatedKey] The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimSessionEvents: function (simId, from, to, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSimSessionEvents(simId, from, to, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of SIMs that match certain criteria. If the total number of SIMs does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List SIMs.
         * @param {number} [limit] Maximum number of SIMs to retrieve.
         * @param {string} [lastEvaluatedKey] The ID of the last SIM retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSims: function (limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSims(limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a schema listing subscription containers and containing a map of PLMN codes to subscription containers
         * @summary Get subscription container status.
         * @param {string} simId Sim Id of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionContainers: function (simId, iccid, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSubscriptionContainers(simId, iccid, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified SIM.
         * @summary Bulk insert or update SIM tags.
         * @param {string} simId SIM ID of the target SIM.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSimTags: function (simId, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putSimTags(simId, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Inserts/updates Country (and optionally network) to subscription container mapping entries in the mapping table.
         * @summary Updates subscription container country mapping entries.
         * @param {string} simId SIM ID of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {MappingEntries} mappingEntries collection of country (and optionally network) to subscription container mapping entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubscriptionContainerCountryMappingEntries: function (simId, iccid, mappingEntries, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putSubscriptionContainerCountryMappingEntries(simId, iccid, mappingEntries, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Registers a SIM to an operator.
         * @summary Register SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {RegisterSimRequest} registerSimRequest A SIM registration request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSim: function (simId, registerSimRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerSim(simId, registerSimRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Triggers SIM to report SIM local info.
         * @summary Triggers SIM to report SIM local info.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSimLocalInfo: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportSimLocalInfo(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send SMS to the specified SIM.
         * @summary Send SMS to SIM
         * @param {string} simId SIM ID of the target SIM.
         * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSmsToSim: function (simId, smsForwardingRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendSmsToSim(simId, smsForwardingRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates expiry time of the specified SIM.
         * @summary Update expiry time of SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {ExpiryTime} request Expiry time after the update (unixtime: in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimExpiryTime: function (simId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setSimExpiryTime(simId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified SIM.
         * @summary Set Group id of a SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {SetGroupRequest} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimGroup: function (simId, group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setSimGroup(simId, group, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set IMEI that the SIM should be locked to.
         * @summary Set IMEI lock configuration for the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {SetImeiLockRequest} [imeiLock] IMEI lock configuration for the SIM. (IMEI can be left blank for locking to the current IMEI of an online SIM.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimImeiLock: function (simId, imeiLock, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setSimImeiLock(simId, imeiLock, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set the specified SIM to standby mode.
         * @summary Set SIM to standby mode.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimToStandby: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setSimToStandby(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Suspends the specified SIM
         * @summary Suspend SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendSim: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.suspendSim(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Terminates the specified SIM.
         * @summary Terminate SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateSim: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.terminateSim(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes expiry time of specified SIM and changes it to indefinite.
         * @summary Delete expiry time of the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSimExpiryTime: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetSimExpiryTime(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified SIM.
         * @summary Unset Group to SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSimGroup: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetSimGroup(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove any existing IMEI lock configuration for the SIM.
         * @summary Unset IMEI lock configuration for SIM.
         * @param {string} simId Sim Id of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSimImeiLock: function (simId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetSimImeiLock(simId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Changes the speed class of the specified SIM.
         * @summary Update SIM speed class.
         * @param {string} simId SIM ID of the target SIM.
         * @param {UpdateSpeedClassRequest} speedClass speed_class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSimSpeedClass: function (simId, speedClass, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateSimSpeedClass(simId, speedClass, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.SimApiFp = SimApiFp;
/**
 * SimApi - factory interface
 * @export
 */
var SimApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SimApiFp(configuration);
    return {
        /**
         * Change status of specified SIM to active.
         * @summary Activate SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateSim: function (simId, options) {
            return localVarFp.activateSim(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API is used to trigger the OTA update of a new subscription container to a SIM profile.
         * @summary Adds a new subscription container to a SIM profile
         * @param {string} simId Id of the target SIM
         * @param {string} iccid Iccid of the target profile
         * @param {InlineObject2} [subscriptionParameters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscription: function (simId, iccid, subscriptionParameters, options) {
            return localVarFp.addSubscription(simId, iccid, subscriptionParameters, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Change status of specified SIM to inactive.
         * @summary Deactivate SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateSim: function (simId, options) {
            return localVarFp.deactivateSim(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes session for the specified SIM.
         * @summary Delete Session
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimSession: function (simId, options) {
            return localVarFp.deleteSimSession(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a tag from the specified SIM.
         * @summary Delete SIM tag.
         * @param {string} simId Sim Id of the target SIM.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimTag: function (simId, tagName, options) {
            return localVarFp.deleteSimTag(simId, tagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete subscription container country mapping entries
         * @summary Delete subscription container mapping entries
         * @param {string} simId SIM ID of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {string} mcc mobile country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionContainerCountryMappingEntry: function (simId, iccid, mcc, options) {
            return localVarFp.deleteSubscriptionContainerCountryMappingEntry(simId, iccid, mcc, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Disables termination of the specified SIM.
         * @summary Disable termination of the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableSimTermination: function (simId, options) {
            return localVarFp.disableSimTermination(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Enables termination of specified SIM.
         * @summary Enable termination of the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableSimTermination: function (simId, options) {
            return localVarFp.enableSimTermination(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Causes the identified container to become the active one on the Sim.
         * @summary Enables a subscription container.
         * @param {string} simId SIM ID of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {string} containerId Identifier of the target container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableSubscriptionContainer: function (simId, iccid, containerId, options) {
            return localVarFp.enableSubscriptionContainer(simId, iccid, containerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of data entries sent from a SIM that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a SIM.
         * @param {string} simId Sim Id of the target SIM.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromSim: function (simId, from, to, sort, limit, lastEvaluatedKey, options) {
            return localVarFp.getDataFromSim(simId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Obtain a SIM record identified by the sim_id
         * @summary Get a SIM identified by sim_id
         * @param {string} simId Id of the target SIM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSim: function (simId, options) {
            return localVarFp.getSim(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the history of session creation, change, and deletion events occurred on the target SIM in the last 14 days. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
         * @summary List Session Events.
         * @param {string} simId SIM ID of the target SIM.
         * @param {number} [from] Start time for the events search range (unixtime).
         * @param {number} [to] End time for the events search range (unixtime).
         * @param {number} [limit] Maximum number of events to retrieve.
         * @param {string} [lastEvaluatedKey] The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimSessionEvents: function (simId, from, to, limit, lastEvaluatedKey, options) {
            return localVarFp.listSimSessionEvents(simId, from, to, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of SIMs that match certain criteria. If the total number of SIMs does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List SIMs.
         * @param {number} [limit] Maximum number of SIMs to retrieve.
         * @param {string} [lastEvaluatedKey] The ID of the last SIM retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSims: function (limit, lastEvaluatedKey, options) {
            return localVarFp.listSims(limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a schema listing subscription containers and containing a map of PLMN codes to subscription containers
         * @summary Get subscription container status.
         * @param {string} simId Sim Id of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionContainers: function (simId, iccid, options) {
            return localVarFp.listSubscriptionContainers(simId, iccid, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Inserts/updates tags for the specified SIM.
         * @summary Bulk insert or update SIM tags.
         * @param {string} simId SIM ID of the target SIM.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSimTags: function (simId, tags, options) {
            return localVarFp.putSimTags(simId, tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Inserts/updates Country (and optionally network) to subscription container mapping entries in the mapping table.
         * @summary Updates subscription container country mapping entries.
         * @param {string} simId SIM ID of the target SIM.
         * @param {string} iccid Iccid of the target profile
         * @param {MappingEntries} mappingEntries collection of country (and optionally network) to subscription container mapping entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubscriptionContainerCountryMappingEntries: function (simId, iccid, mappingEntries, options) {
            return localVarFp.putSubscriptionContainerCountryMappingEntries(simId, iccid, mappingEntries, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Registers a SIM to an operator.
         * @summary Register SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {RegisterSimRequest} registerSimRequest A SIM registration request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSim: function (simId, registerSimRequest, options) {
            return localVarFp.registerSim(simId, registerSimRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Triggers SIM to report SIM local info.
         * @summary Triggers SIM to report SIM local info.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSimLocalInfo: function (simId, options) {
            return localVarFp.reportSimLocalInfo(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send SMS to the specified SIM.
         * @summary Send SMS to SIM
         * @param {string} simId SIM ID of the target SIM.
         * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSmsToSim: function (simId, smsForwardingRequest, options) {
            return localVarFp.sendSmsToSim(simId, smsForwardingRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates expiry time of the specified SIM.
         * @summary Update expiry time of SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {ExpiryTime} request Expiry time after the update (unixtime: in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimExpiryTime: function (simId, request, options) {
            return localVarFp.setSimExpiryTime(simId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets or overwrites a group for the specified SIM.
         * @summary Set Group id of a SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {SetGroupRequest} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimGroup: function (simId, group, options) {
            return localVarFp.setSimGroup(simId, group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set IMEI that the SIM should be locked to.
         * @summary Set IMEI lock configuration for the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {SetImeiLockRequest} [imeiLock] IMEI lock configuration for the SIM. (IMEI can be left blank for locking to the current IMEI of an online SIM.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimImeiLock: function (simId, imeiLock, options) {
            return localVarFp.setSimImeiLock(simId, imeiLock, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set the specified SIM to standby mode.
         * @summary Set SIM to standby mode.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSimToStandby: function (simId, options) {
            return localVarFp.setSimToStandby(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Suspends the specified SIM
         * @summary Suspend SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendSim: function (simId, options) {
            return localVarFp.suspendSim(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Terminates the specified SIM.
         * @summary Terminate SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateSim: function (simId, options) {
            return localVarFp.terminateSim(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes expiry time of specified SIM and changes it to indefinite.
         * @summary Delete expiry time of the SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSimExpiryTime: function (simId, options) {
            return localVarFp.unsetSimExpiryTime(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes the group configuration from the specified SIM.
         * @summary Unset Group to SIM.
         * @param {string} simId SIM ID of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSimGroup: function (simId, options) {
            return localVarFp.unsetSimGroup(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove any existing IMEI lock configuration for the SIM.
         * @summary Unset IMEI lock configuration for SIM.
         * @param {string} simId Sim Id of the target SIM.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetSimImeiLock: function (simId, options) {
            return localVarFp.unsetSimImeiLock(simId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Changes the speed class of the specified SIM.
         * @summary Update SIM speed class.
         * @param {string} simId SIM ID of the target SIM.
         * @param {UpdateSpeedClassRequest} speedClass speed_class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSimSpeedClass: function (simId, speedClass, options) {
            return localVarFp.updateSimSpeedClass(simId, speedClass, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.SimApiFactory = SimApiFactory;
/**
 * SimApi - object-oriented interface
 * @export
 * @class SimApi
 * @extends {BaseAPI}
 */
var SimApi = /** @class */ (function (_super) {
    __extends(SimApi, _super);
    function SimApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Change status of specified SIM to active.
     * @summary Activate SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.activateSim = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).activateSim(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API is used to trigger the OTA update of a new subscription container to a SIM profile.
     * @summary Adds a new subscription container to a SIM profile
     * @param {string} simId Id of the target SIM
     * @param {string} iccid Iccid of the target profile
     * @param {InlineObject2} [subscriptionParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.addSubscription = function (simId, iccid, subscriptionParameters, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).addSubscription(simId, iccid, subscriptionParameters, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Change status of specified SIM to inactive.
     * @summary Deactivate SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.deactivateSim = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).deactivateSim(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes session for the specified SIM.
     * @summary Delete Session
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.deleteSimSession = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).deleteSimSession(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a tag from the specified SIM.
     * @summary Delete SIM tag.
     * @param {string} simId Sim Id of the target SIM.
     * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.deleteSimTag = function (simId, tagName, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).deleteSimTag(simId, tagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete subscription container country mapping entries
     * @summary Delete subscription container mapping entries
     * @param {string} simId SIM ID of the target SIM.
     * @param {string} iccid Iccid of the target profile
     * @param {string} mcc mobile country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.deleteSubscriptionContainerCountryMappingEntry = function (simId, iccid, mcc, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).deleteSubscriptionContainerCountryMappingEntry(simId, iccid, mcc, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Disables termination of the specified SIM.
     * @summary Disable termination of the SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.disableSimTermination = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).disableSimTermination(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Enables termination of specified SIM.
     * @summary Enable termination of the SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.enableSimTermination = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).enableSimTermination(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Causes the identified container to become the active one on the Sim.
     * @summary Enables a subscription container.
     * @param {string} simId SIM ID of the target SIM.
     * @param {string} iccid Iccid of the target profile
     * @param {string} containerId Identifier of the target container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.enableSubscriptionContainer = function (simId, iccid, containerId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).enableSubscriptionContainer(simId, iccid, containerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of data entries sent from a SIM that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary Get data sent from a SIM.
     * @param {string} simId Sim Id of the target SIM.
     * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
     * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
     * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
     * @param {number} [limit] Maximum number of data entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.getDataFromSim = function (simId, from, to, sort, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).getDataFromSim(simId, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Obtain a SIM record identified by the sim_id
     * @summary Get a SIM identified by sim_id
     * @param {string} simId Id of the target SIM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.getSim = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).getSim(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the history of session creation, change, and deletion events occurred on the target SIM in the last 14 days. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
     * @summary List Session Events.
     * @param {string} simId SIM ID of the target SIM.
     * @param {number} [from] Start time for the events search range (unixtime).
     * @param {number} [to] End time for the events search range (unixtime).
     * @param {number} [limit] Maximum number of events to retrieve.
     * @param {string} [lastEvaluatedKey] The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.listSimSessionEvents = function (simId, from, to, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).listSimSessionEvents(simId, from, to, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of SIMs that match certain criteria. If the total number of SIMs does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary List SIMs.
     * @param {number} [limit] Maximum number of SIMs to retrieve.
     * @param {string} [lastEvaluatedKey] The ID of the last SIM retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.listSims = function (limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).listSims(limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a schema listing subscription containers and containing a map of PLMN codes to subscription containers
     * @summary Get subscription container status.
     * @param {string} simId Sim Id of the target SIM.
     * @param {string} iccid Iccid of the target profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.listSubscriptionContainers = function (simId, iccid, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).listSubscriptionContainers(simId, iccid, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Inserts/updates tags for the specified SIM.
     * @summary Bulk insert or update SIM tags.
     * @param {string} simId SIM ID of the target SIM.
     * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.putSimTags = function (simId, tags, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).putSimTags(simId, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Inserts/updates Country (and optionally network) to subscription container mapping entries in the mapping table.
     * @summary Updates subscription container country mapping entries.
     * @param {string} simId SIM ID of the target SIM.
     * @param {string} iccid Iccid of the target profile
     * @param {MappingEntries} mappingEntries collection of country (and optionally network) to subscription container mapping entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.putSubscriptionContainerCountryMappingEntries = function (simId, iccid, mappingEntries, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).putSubscriptionContainerCountryMappingEntries(simId, iccid, mappingEntries, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Registers a SIM to an operator.
     * @summary Register SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {RegisterSimRequest} registerSimRequest A SIM registration request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.registerSim = function (simId, registerSimRequest, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).registerSim(simId, registerSimRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Triggers SIM to report SIM local info.
     * @summary Triggers SIM to report SIM local info.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.reportSimLocalInfo = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).reportSimLocalInfo(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send SMS to the specified SIM.
     * @summary Send SMS to SIM
     * @param {string} simId SIM ID of the target SIM.
     * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.sendSmsToSim = function (simId, smsForwardingRequest, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).sendSmsToSim(simId, smsForwardingRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates expiry time of the specified SIM.
     * @summary Update expiry time of SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {ExpiryTime} request Expiry time after the update (unixtime: in milliseconds).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.setSimExpiryTime = function (simId, request, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).setSimExpiryTime(simId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets or overwrites a group for the specified SIM.
     * @summary Set Group id of a SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {SetGroupRequest} group Group (may include ID only).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.setSimGroup = function (simId, group, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).setSimGroup(simId, group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set IMEI that the SIM should be locked to.
     * @summary Set IMEI lock configuration for the SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {SetImeiLockRequest} [imeiLock] IMEI lock configuration for the SIM. (IMEI can be left blank for locking to the current IMEI of an online SIM.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.setSimImeiLock = function (simId, imeiLock, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).setSimImeiLock(simId, imeiLock, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set the specified SIM to standby mode.
     * @summary Set SIM to standby mode.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.setSimToStandby = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).setSimToStandby(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Suspends the specified SIM
     * @summary Suspend SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.suspendSim = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).suspendSim(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Terminates the specified SIM.
     * @summary Terminate SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.terminateSim = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).terminateSim(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes expiry time of specified SIM and changes it to indefinite.
     * @summary Delete expiry time of the SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.unsetSimExpiryTime = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).unsetSimExpiryTime(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes the group configuration from the specified SIM.
     * @summary Unset Group to SIM.
     * @param {string} simId SIM ID of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.unsetSimGroup = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).unsetSimGroup(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove any existing IMEI lock configuration for the SIM.
     * @summary Unset IMEI lock configuration for SIM.
     * @param {string} simId Sim Id of the target SIM.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.unsetSimImeiLock = function (simId, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).unsetSimImeiLock(simId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Changes the speed class of the specified SIM.
     * @summary Update SIM speed class.
     * @param {string} simId SIM ID of the target SIM.
     * @param {UpdateSpeedClassRequest} speedClass speed_class
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimApi
     */
    SimApi.prototype.updateSimSpeedClass = function (simId, speedClass, options) {
        var _this = this;
        return exports.SimApiFp(this.configuration).updateSimSpeedClass(simId, speedClass, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SimApi;
}(base_1.BaseAPI));
exports.SimApi = SimApi;
/**
 * SoraletApi - axios parameter creator
 * @export
 */
var SoraletApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a Soralet.
         * @summary Create a Soralet.
         * @param {CreateSoraletRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSoralet: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createSoralet', 'request', request);
                            localVarPath = "/soralets";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Delete the specified Soralet.
         * @summary Delete Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSoralet: function (soraletId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'soraletId' is not null or undefined
                            common_1.assertParamExists('deleteSoralet', 'soraletId', soraletId);
                            localVarPath = "/soralets/{soralet_id}"
                                .replace("{" + "soralet_id" + "}", encodeURIComponent(String(soraletId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Delete the specified Soralet version.
         * @summary Delete a Soralet version.
         * @param {string} soraletId The identifier of Soralet.
         * @param {number} version Soralet version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSoraletVersion: function (soraletId, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'soraletId' is not null or undefined
                            common_1.assertParamExists('deleteSoraletVersion', 'soraletId', soraletId);
                            // verify required parameter 'version' is not null or undefined
                            common_1.assertParamExists('deleteSoraletVersion', 'version', version);
                            localVarPath = "/soralets/{soralet_id}/versions/{version}"
                                .replace("{" + "soralet_id" + "}", encodeURIComponent(String(soraletId)))
                                .replace("{" + "version" + "}", encodeURIComponent(String(version)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a Soralet.
         * @summary Get a Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoralet: function (soraletId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'soraletId' is not null or undefined
                            common_1.assertParamExists('getSoralet', 'soraletId', soraletId);
                            localVarPath = "/soralets/{soralet_id}"
                                .replace("{" + "soralet_id" + "}", encodeURIComponent(String(soraletId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of log messages from the specified Soralet.
         * @summary Get log messages from Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {'asc' | 'desc'} [sort] Sort order
         * @param {number} [limit] The maximum number of items in a response.
         * @param {string} [lastEvaluatedKey] The identifier of the last log message retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next log message onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoraletLogs: function (soraletId, sort, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'soraletId' is not null or undefined
                            common_1.assertParamExists('getSoraletLogs', 'soraletId', soraletId);
                            localVarPath = "/soralets/{soralet_id}/logs"
                                .replace("{" + "soralet_id" + "}", encodeURIComponent(String(soraletId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (sort !== undefined) {
                                localVarQueryParameter['sort'] = sort;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of Soralet versions.
         * @summary List versions of Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {'asc' | 'desc'} [sort] Sort order
         * @param {number} [limit] The maximum number of items in a response.
         * @param {string} [lastEvaluatedKey] The identifier of the last version retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next version onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoraletVersions: function (soraletId, sort, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'soraletId' is not null or undefined
                            common_1.assertParamExists('listSoraletVersions', 'soraletId', soraletId);
                            localVarPath = "/soralets/{soralet_id}/versions"
                                .replace("{" + "soralet_id" + "}", encodeURIComponent(String(soraletId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (sort !== undefined) {
                                localVarQueryParameter['sort'] = sort;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of Soralets.
         * @summary List Soralets.
         * @param {'asc' | 'desc'} [sort] Sort order
         * @param {number} [limit] The maximum number of items in a response
         * @param {string} [lastEvaluatedKey] The identifier of the last Soralet retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Soralet onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoralets: function (sort, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/soralets";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (sort !== undefined) {
                                localVarQueryParameter['sort'] = sort;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Execute the specified Soralet with the specified arguments.
         * @summary Execute Soralet with arguments.
         * @param {string} soraletId The identifier of Soralet.
         * @param {ExecuteSoraletRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSoralet: function (soraletId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'soraletId' is not null or undefined
                            common_1.assertParamExists('testSoralet', 'soraletId', soraletId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('testSoralet', 'request', request);
                            localVarPath = "/soralets/{soralet_id}/test"
                                .replace("{" + "soralet_id" + "}", encodeURIComponent(String(soraletId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Upload code and create a new version.
         * @summary Upload code and create a new version.
         * @param {string} soraletId The identifier of Soralet.
         * @param {any} body Content of the file to upload
         * @param {string} [contentType] Content type of the file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSoraletCode: function (soraletId, body, contentType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'soraletId' is not null or undefined
                            common_1.assertParamExists('uploadSoraletCode', 'soraletId', soraletId);
                            // verify required parameter 'body' is not null or undefined
                            common_1.assertParamExists('uploadSoraletCode', 'body', body);
                            localVarPath = "/soralets/{soralet_id}/versions"
                                .replace("{" + "soralet_id" + "}", encodeURIComponent(String(soraletId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (contentType !== undefined && contentType !== null) {
                                localVarHeaderParameter['content-type'] = String(contentType);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.SoraletApiAxiosParamCreator = SoraletApiAxiosParamCreator;
/**
 * SoraletApi - functional programming interface
 * @export
 */
var SoraletApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SoraletApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a Soralet.
         * @summary Create a Soralet.
         * @param {CreateSoraletRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSoralet: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSoralet(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete the specified Soralet.
         * @summary Delete Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSoralet: function (soraletId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSoralet(soraletId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete the specified Soralet version.
         * @summary Delete a Soralet version.
         * @param {string} soraletId The identifier of Soralet.
         * @param {number} version Soralet version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSoraletVersion: function (soraletId, version, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSoraletVersion(soraletId, version, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a Soralet.
         * @summary Get a Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoralet: function (soraletId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSoralet(soraletId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of log messages from the specified Soralet.
         * @summary Get log messages from Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {'asc' | 'desc'} [sort] Sort order
         * @param {number} [limit] The maximum number of items in a response.
         * @param {string} [lastEvaluatedKey] The identifier of the last log message retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next log message onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoraletLogs: function (soraletId, sort, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSoraletLogs(soraletId, sort, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of Soralet versions.
         * @summary List versions of Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {'asc' | 'desc'} [sort] Sort order
         * @param {number} [limit] The maximum number of items in a response.
         * @param {string} [lastEvaluatedKey] The identifier of the last version retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next version onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoraletVersions: function (soraletId, sort, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSoraletVersions(soraletId, sort, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of Soralets.
         * @summary List Soralets.
         * @param {'asc' | 'desc'} [sort] Sort order
         * @param {number} [limit] The maximum number of items in a response
         * @param {string} [lastEvaluatedKey] The identifier of the last Soralet retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Soralet onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoralets: function (sort, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSoralets(sort, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Execute the specified Soralet with the specified arguments.
         * @summary Execute Soralet with arguments.
         * @param {string} soraletId The identifier of Soralet.
         * @param {ExecuteSoraletRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSoralet: function (soraletId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testSoralet(soraletId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Upload code and create a new version.
         * @summary Upload code and create a new version.
         * @param {string} soraletId The identifier of Soralet.
         * @param {any} body Content of the file to upload
         * @param {string} [contentType] Content type of the file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSoraletCode: function (soraletId, body, contentType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.uploadSoraletCode(soraletId, body, contentType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.SoraletApiFp = SoraletApiFp;
/**
 * SoraletApi - factory interface
 * @export
 */
var SoraletApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SoraletApiFp(configuration);
    return {
        /**
         * Create a Soralet.
         * @summary Create a Soralet.
         * @param {CreateSoraletRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSoralet: function (request, options) {
            return localVarFp.createSoralet(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete the specified Soralet.
         * @summary Delete Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSoralet: function (soraletId, options) {
            return localVarFp.deleteSoralet(soraletId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete the specified Soralet version.
         * @summary Delete a Soralet version.
         * @param {string} soraletId The identifier of Soralet.
         * @param {number} version Soralet version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSoraletVersion: function (soraletId, version, options) {
            return localVarFp.deleteSoraletVersion(soraletId, version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a Soralet.
         * @summary Get a Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoralet: function (soraletId, options) {
            return localVarFp.getSoralet(soraletId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of log messages from the specified Soralet.
         * @summary Get log messages from Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {'asc' | 'desc'} [sort] Sort order
         * @param {number} [limit] The maximum number of items in a response.
         * @param {string} [lastEvaluatedKey] The identifier of the last log message retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next log message onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoraletLogs: function (soraletId, sort, limit, lastEvaluatedKey, options) {
            return localVarFp.getSoraletLogs(soraletId, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of Soralet versions.
         * @summary List versions of Soralet.
         * @param {string} soraletId The identifier of Soralet.
         * @param {'asc' | 'desc'} [sort] Sort order
         * @param {number} [limit] The maximum number of items in a response.
         * @param {string} [lastEvaluatedKey] The identifier of the last version retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next version onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoraletVersions: function (soraletId, sort, limit, lastEvaluatedKey, options) {
            return localVarFp.listSoraletVersions(soraletId, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of Soralets.
         * @summary List Soralets.
         * @param {'asc' | 'desc'} [sort] Sort order
         * @param {number} [limit] The maximum number of items in a response
         * @param {string} [lastEvaluatedKey] The identifier of the last Soralet retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Soralet onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoralets: function (sort, limit, lastEvaluatedKey, options) {
            return localVarFp.listSoralets(sort, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Execute the specified Soralet with the specified arguments.
         * @summary Execute Soralet with arguments.
         * @param {string} soraletId The identifier of Soralet.
         * @param {ExecuteSoraletRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSoralet: function (soraletId, request, options) {
            return localVarFp.testSoralet(soraletId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Upload code and create a new version.
         * @summary Upload code and create a new version.
         * @param {string} soraletId The identifier of Soralet.
         * @param {any} body Content of the file to upload
         * @param {string} [contentType] Content type of the file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSoraletCode: function (soraletId, body, contentType, options) {
            return localVarFp.uploadSoraletCode(soraletId, body, contentType, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.SoraletApiFactory = SoraletApiFactory;
/**
 * SoraletApi - object-oriented interface
 * @export
 * @class SoraletApi
 * @extends {BaseAPI}
 */
var SoraletApi = /** @class */ (function (_super) {
    __extends(SoraletApi, _super);
    function SoraletApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a Soralet.
     * @summary Create a Soralet.
     * @param {CreateSoraletRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoraletApi
     */
    SoraletApi.prototype.createSoralet = function (request, options) {
        var _this = this;
        return exports.SoraletApiFp(this.configuration).createSoralet(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete the specified Soralet.
     * @summary Delete Soralet.
     * @param {string} soraletId The identifier of Soralet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoraletApi
     */
    SoraletApi.prototype.deleteSoralet = function (soraletId, options) {
        var _this = this;
        return exports.SoraletApiFp(this.configuration).deleteSoralet(soraletId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete the specified Soralet version.
     * @summary Delete a Soralet version.
     * @param {string} soraletId The identifier of Soralet.
     * @param {number} version Soralet version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoraletApi
     */
    SoraletApi.prototype.deleteSoraletVersion = function (soraletId, version, options) {
        var _this = this;
        return exports.SoraletApiFp(this.configuration).deleteSoraletVersion(soraletId, version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a Soralet.
     * @summary Get a Soralet.
     * @param {string} soraletId The identifier of Soralet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoraletApi
     */
    SoraletApi.prototype.getSoralet = function (soraletId, options) {
        var _this = this;
        return exports.SoraletApiFp(this.configuration).getSoralet(soraletId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of log messages from the specified Soralet.
     * @summary Get log messages from Soralet.
     * @param {string} soraletId The identifier of Soralet.
     * @param {'asc' | 'desc'} [sort] Sort order
     * @param {number} [limit] The maximum number of items in a response.
     * @param {string} [lastEvaluatedKey] The identifier of the last log message retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next log message onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoraletApi
     */
    SoraletApi.prototype.getSoraletLogs = function (soraletId, sort, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SoraletApiFp(this.configuration).getSoraletLogs(soraletId, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of Soralet versions.
     * @summary List versions of Soralet.
     * @param {string} soraletId The identifier of Soralet.
     * @param {'asc' | 'desc'} [sort] Sort order
     * @param {number} [limit] The maximum number of items in a response.
     * @param {string} [lastEvaluatedKey] The identifier of the last version retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next version onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoraletApi
     */
    SoraletApi.prototype.listSoraletVersions = function (soraletId, sort, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SoraletApiFp(this.configuration).listSoraletVersions(soraletId, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of Soralets.
     * @summary List Soralets.
     * @param {'asc' | 'desc'} [sort] Sort order
     * @param {number} [limit] The maximum number of items in a response
     * @param {string} [lastEvaluatedKey] The identifier of the last Soralet retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Soralet onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoraletApi
     */
    SoraletApi.prototype.listSoralets = function (sort, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SoraletApiFp(this.configuration).listSoralets(sort, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Execute the specified Soralet with the specified arguments.
     * @summary Execute Soralet with arguments.
     * @param {string} soraletId The identifier of Soralet.
     * @param {ExecuteSoraletRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoraletApi
     */
    SoraletApi.prototype.testSoralet = function (soraletId, request, options) {
        var _this = this;
        return exports.SoraletApiFp(this.configuration).testSoralet(soraletId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Upload code and create a new version.
     * @summary Upload code and create a new version.
     * @param {string} soraletId The identifier of Soralet.
     * @param {any} body Content of the file to upload
     * @param {string} [contentType] Content type of the file to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoraletApi
     */
    SoraletApi.prototype.uploadSoraletCode = function (soraletId, body, contentType, options) {
        var _this = this;
        return exports.SoraletApiFp(this.configuration).uploadSoraletCode(soraletId, body, contentType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SoraletApi;
}(base_1.BaseAPI));
exports.SoraletApi = SoraletApi;
/**
 * StatsApi - axios parameter creator
 * @export
 */
var StatsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
         * @summary Export Air Usage Report of All Subscribers.
         * @param {string} operatorId operator_id
         * @param {ExportRequest} request export time period
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAirStats: function (operatorId, request, exportMode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('exportAirStats', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('exportAirStats', 'request', request);
                            localVarPath = "/stats/air/operators/{operator_id}/export"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (exportMode !== undefined) {
                                localVarQueryParameter['export_mode'] = exportMode;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
         * @summary Export Beam Usage Report of All Subscribers.
         * @param {string} operatorId operator ID
         * @param {ExportRequest} request export time period
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBeamStats: function (operatorId, request, exportMode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('exportBeamStats', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('exportBeamStats', 'request', request);
                            localVarPath = "/stats/beam/operators/{operator_id}/export"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (exportMode !== undefined) {
                                localVarQueryParameter['export_mode'] = exportMode;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the usage report for the subscriber specified by the IMSI.
         * @summary Get Air Usage Report of Subscriber.
         * @param {string} imsi imsi
         * @param {number} from Start time in unixtime for the aggregate data.
         * @param {number} to End time in unixtime for the aggregate data.
         * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirStats: function (imsi, from, to, period, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('getAirStats', 'imsi', imsi);
                            // verify required parameter 'from' is not null or undefined
                            common_1.assertParamExists('getAirStats', 'from', from);
                            // verify required parameter 'to' is not null or undefined
                            common_1.assertParamExists('getAirStats', 'to', to);
                            // verify required parameter 'period' is not null or undefined
                            common_1.assertParamExists('getAirStats', 'period', period);
                            localVarPath = "/stats/air/subscribers/{imsi}"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (period !== undefined) {
                                localVarQueryParameter['period'] = period;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the usage report for the SIM specified by the simId.
         * @summary Get Air Usage Report of SIM.
         * @param {string} simId SIM ID
         * @param {number} from Start time in unixtime for the aggregate data.
         * @param {number} to End time in unixtime for the aggregate data.
         * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirStatsOfSim: function (simId, from, to, period, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simId' is not null or undefined
                            common_1.assertParamExists('getAirStatsOfSim', 'simId', simId);
                            // verify required parameter 'from' is not null or undefined
                            common_1.assertParamExists('getAirStatsOfSim', 'from', from);
                            // verify required parameter 'to' is not null or undefined
                            common_1.assertParamExists('getAirStatsOfSim', 'to', to);
                            // verify required parameter 'period' is not null or undefined
                            common_1.assertParamExists('getAirStatsOfSim', 'period', period);
                            localVarPath = "/stats/air/sims/{simId}"
                                .replace("{" + "simId" + "}", encodeURIComponent(String(simId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (period !== undefined) {
                                localVarQueryParameter['period'] = period;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the Soracom Beam usage report for the subscriber specified by the IMSI.
         * @summary Get Beam Usage Report of Subscriber.
         * @param {string} imsi imsi
         * @param {number} from Start time in unixtime for the aggregate data.
         * @param {number} to End time in unixtime for the aggregate data.
         * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBeamStats: function (imsi, from, to, period, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('getBeamStats', 'imsi', imsi);
                            // verify required parameter 'from' is not null or undefined
                            common_1.assertParamExists('getBeamStats', 'from', from);
                            // verify required parameter 'to' is not null or undefined
                            common_1.assertParamExists('getBeamStats', 'to', to);
                            // verify required parameter 'period' is not null or undefined
                            common_1.assertParamExists('getBeamStats', 'period', period);
                            localVarPath = "/stats/beam/subscribers/{imsi}"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (period !== undefined) {
                                localVarQueryParameter['period'] = period;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the SORACOM Harvest usage report for the operator.
         * @summary Get \'Harvest usage report\' for the specified operator.
         * @param {string} operatorId operator_id
         * @param {string} [yearMonth] Year/Month in \&#39;YYYYMM\&#39; format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHarvestExportedDataStats: function (operatorId, yearMonth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getHarvestExportedDataStats', 'operatorId', operatorId);
                            localVarPath = "/stats/harvest/operators/{operator_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (yearMonth !== undefined) {
                                localVarQueryParameter['year_month'] = yearMonth;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Get Napter audit logs\' monthly exported data stats
         * @summary Get Napter audit logs\' monthly exported data stats
         * @param {string} [yearMonth] Year/Month in \&#39;YYYYMM\&#39; format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNapterAuditLogsExportedDataStats: function (yearMonth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/stats/napter/audit_logs";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (yearMonth !== undefined) {
                                localVarQueryParameter['year_month'] = yearMonth;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.StatsApiAxiosParamCreator = StatsApiAxiosParamCreator;
/**
 * StatsApi - functional programming interface
 * @export
 */
var StatsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.StatsApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
         * @summary Export Air Usage Report of All Subscribers.
         * @param {string} operatorId operator_id
         * @param {ExportRequest} request export time period
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAirStats: function (operatorId, request, exportMode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportAirStats(operatorId, request, exportMode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
         * @summary Export Beam Usage Report of All Subscribers.
         * @param {string} operatorId operator ID
         * @param {ExportRequest} request export time period
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBeamStats: function (operatorId, request, exportMode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportBeamStats(operatorId, request, exportMode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves the usage report for the subscriber specified by the IMSI.
         * @summary Get Air Usage Report of Subscriber.
         * @param {string} imsi imsi
         * @param {number} from Start time in unixtime for the aggregate data.
         * @param {number} to End time in unixtime for the aggregate data.
         * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirStats: function (imsi, from, to, period, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAirStats(imsi, from, to, period, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves the usage report for the SIM specified by the simId.
         * @summary Get Air Usage Report of SIM.
         * @param {string} simId SIM ID
         * @param {number} from Start time in unixtime for the aggregate data.
         * @param {number} to End time in unixtime for the aggregate data.
         * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirStatsOfSim: function (simId, from, to, period, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAirStatsOfSim(simId, from, to, period, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves the Soracom Beam usage report for the subscriber specified by the IMSI.
         * @summary Get Beam Usage Report of Subscriber.
         * @param {string} imsi imsi
         * @param {number} from Start time in unixtime for the aggregate data.
         * @param {number} to End time in unixtime for the aggregate data.
         * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBeamStats: function (imsi, from, to, period, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBeamStats(imsi, from, to, period, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves the SORACOM Harvest usage report for the operator.
         * @summary Get \'Harvest usage report\' for the specified operator.
         * @param {string} operatorId operator_id
         * @param {string} [yearMonth] Year/Month in \&#39;YYYYMM\&#39; format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHarvestExportedDataStats: function (operatorId, yearMonth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHarvestExportedDataStats(operatorId, yearMonth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get Napter audit logs\' monthly exported data stats
         * @summary Get Napter audit logs\' monthly exported data stats
         * @param {string} [yearMonth] Year/Month in \&#39;YYYYMM\&#39; format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNapterAuditLogsExportedDataStats: function (yearMonth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNapterAuditLogsExportedDataStats(yearMonth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.StatsApiFp = StatsApiFp;
/**
 * StatsApi - factory interface
 * @export
 */
var StatsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.StatsApiFp(configuration);
    return {
        /**
         * Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
         * @summary Export Air Usage Report of All Subscribers.
         * @param {string} operatorId operator_id
         * @param {ExportRequest} request export time period
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAirStats: function (operatorId, request, exportMode, options) {
            return localVarFp.exportAirStats(operatorId, request, exportMode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
         * @summary Export Beam Usage Report of All Subscribers.
         * @param {string} operatorId operator ID
         * @param {ExportRequest} request export time period
         * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBeamStats: function (operatorId, request, exportMode, options) {
            return localVarFp.exportBeamStats(operatorId, request, exportMode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the usage report for the subscriber specified by the IMSI.
         * @summary Get Air Usage Report of Subscriber.
         * @param {string} imsi imsi
         * @param {number} from Start time in unixtime for the aggregate data.
         * @param {number} to End time in unixtime for the aggregate data.
         * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirStats: function (imsi, from, to, period, options) {
            return localVarFp.getAirStats(imsi, from, to, period, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the usage report for the SIM specified by the simId.
         * @summary Get Air Usage Report of SIM.
         * @param {string} simId SIM ID
         * @param {number} from Start time in unixtime for the aggregate data.
         * @param {number} to End time in unixtime for the aggregate data.
         * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirStatsOfSim: function (simId, from, to, period, options) {
            return localVarFp.getAirStatsOfSim(simId, from, to, period, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the Soracom Beam usage report for the subscriber specified by the IMSI.
         * @summary Get Beam Usage Report of Subscriber.
         * @param {string} imsi imsi
         * @param {number} from Start time in unixtime for the aggregate data.
         * @param {number} to End time in unixtime for the aggregate data.
         * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBeamStats: function (imsi, from, to, period, options) {
            return localVarFp.getBeamStats(imsi, from, to, period, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the SORACOM Harvest usage report for the operator.
         * @summary Get \'Harvest usage report\' for the specified operator.
         * @param {string} operatorId operator_id
         * @param {string} [yearMonth] Year/Month in \&#39;YYYYMM\&#39; format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHarvestExportedDataStats: function (operatorId, yearMonth, options) {
            return localVarFp.getHarvestExportedDataStats(operatorId, yearMonth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get Napter audit logs\' monthly exported data stats
         * @summary Get Napter audit logs\' monthly exported data stats
         * @param {string} [yearMonth] Year/Month in \&#39;YYYYMM\&#39; format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNapterAuditLogsExportedDataStats: function (yearMonth, options) {
            return localVarFp.getNapterAuditLogsExportedDataStats(yearMonth, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.StatsApiFactory = StatsApiFactory;
/**
 * StatsApi - object-oriented interface
 * @export
 * @class StatsApi
 * @extends {BaseAPI}
 */
var StatsApi = /** @class */ (function (_super) {
    __extends(StatsApi, _super);
    function StatsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
     * @summary Export Air Usage Report of All Subscribers.
     * @param {string} operatorId operator_id
     * @param {ExportRequest} request export time period
     * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    StatsApi.prototype.exportAirStats = function (operatorId, request, exportMode, options) {
        var _this = this;
        return exports.StatsApiFp(this.configuration).exportAirStats(operatorId, request, exportMode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
     * @summary Export Beam Usage Report of All Subscribers.
     * @param {string} operatorId operator ID
     * @param {ExportRequest} request export time period
     * @param {'async' | 'sync'} [exportMode] export_mode (async, sync)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    StatsApi.prototype.exportBeamStats = function (operatorId, request, exportMode, options) {
        var _this = this;
        return exports.StatsApiFp(this.configuration).exportBeamStats(operatorId, request, exportMode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the usage report for the subscriber specified by the IMSI.
     * @summary Get Air Usage Report of Subscriber.
     * @param {string} imsi imsi
     * @param {number} from Start time in unixtime for the aggregate data.
     * @param {number} to End time in unixtime for the aggregate data.
     * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    StatsApi.prototype.getAirStats = function (imsi, from, to, period, options) {
        var _this = this;
        return exports.StatsApiFp(this.configuration).getAirStats(imsi, from, to, period, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the usage report for the SIM specified by the simId.
     * @summary Get Air Usage Report of SIM.
     * @param {string} simId SIM ID
     * @param {number} from Start time in unixtime for the aggregate data.
     * @param {number} to End time in unixtime for the aggregate data.
     * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    StatsApi.prototype.getAirStatsOfSim = function (simId, from, to, period, options) {
        var _this = this;
        return exports.StatsApiFp(this.configuration).getAirStatsOfSim(simId, from, to, period, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the Soracom Beam usage report for the subscriber specified by the IMSI.
     * @summary Get Beam Usage Report of Subscriber.
     * @param {string} imsi imsi
     * @param {number} from Start time in unixtime for the aggregate data.
     * @param {number} to End time in unixtime for the aggregate data.
     * @param {'month' | 'day' | 'minutes'} period Units of aggregate data. For minutes, the interval is around 5 minutes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    StatsApi.prototype.getBeamStats = function (imsi, from, to, period, options) {
        var _this = this;
        return exports.StatsApiFp(this.configuration).getBeamStats(imsi, from, to, period, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the SORACOM Harvest usage report for the operator.
     * @summary Get \'Harvest usage report\' for the specified operator.
     * @param {string} operatorId operator_id
     * @param {string} [yearMonth] Year/Month in \&#39;YYYYMM\&#39; format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    StatsApi.prototype.getHarvestExportedDataStats = function (operatorId, yearMonth, options) {
        var _this = this;
        return exports.StatsApiFp(this.configuration).getHarvestExportedDataStats(operatorId, yearMonth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get Napter audit logs\' monthly exported data stats
     * @summary Get Napter audit logs\' monthly exported data stats
     * @param {string} [yearMonth] Year/Month in \&#39;YYYYMM\&#39; format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    StatsApi.prototype.getNapterAuditLogsExportedDataStats = function (yearMonth, options) {
        var _this = this;
        return exports.StatsApiFp(this.configuration).getNapterAuditLogsExportedDataStats(yearMonth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StatsApi;
}(base_1.BaseAPI));
exports.StatsApi = StatsApi;
/**
 * SubscriberApi - axios parameter creator
 * @export
 */
var SubscriberApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Activates status of specified subscriber.
         * @summary Activate Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateSubscriber: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('activateSubscriber', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/activate"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deactivates specified subscriber.
         * @summary Deactivate Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateSubscriber: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('deactivateSubscriber', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/deactivate"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes session for the specified subscriber.
         * @summary Delete Session
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriberSession: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('deleteSubscriberSession', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/delete_session"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a tag from the specified subscriber.
         * @summary Delete Subscriber Tag.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriberTag: function (imsi, tagName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('deleteSubscriberTag', 'imsi', imsi);
                            // verify required parameter 'tagName' is not null or undefined
                            common_1.assertParamExists('deleteSubscriberTag', 'tagName', tagName);
                            localVarPath = "/subscribers/{imsi}/tags/{tag_name}"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)))
                                .replace("{" + "tag_name" + "}", encodeURIComponent(String(tagName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the subscriber\'s inter-operator control transfer token, and cancels the control transfer.
         * @summary Delete Subscribers Transfer Token.
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriberTransferToken: function (token, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'token' is not null or undefined
                            common_1.assertParamExists('deleteSubscriberTransferToken', 'token', token);
                            localVarPath = "/subscribers/transfer_token/{token}"
                                .replace("{" + "token" + "}", encodeURIComponent(String(token)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Disables termination of specified subscriber.
         * @summary Disable Termination of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTermination: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('disableTermination', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/disable_termination"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Enables termination of specified subscriber.
         * @summary Enable Termination of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTermination: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('enableTermination', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/enable_termination"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a subscriber that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a subscriber.
         * @param {string} imsi IMSI of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromSubscriber: function (imsi, from, to, sort, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('getDataFromSubscriber', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/data"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (sort !== undefined) {
                                localVarQueryParameter['sort'] = sort;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns information about the specified subscriber.
         * @summary Get Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriber: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('getSubscriber', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sends the subscriber\'s inter-operator control transfer token to the control destination operator.
         * @summary Issue Subscribers Transfer Token.
         * @param {IssueSubscriberTransferTokenRequest} request Destination operator\&#39;s email address, Operator ID, transferring IMSI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueSubscriberTransferToken: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('issueSubscriberTransferToken', 'request', request);
                            localVarPath = "/subscribers/transfer_token/issue";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns the event history for the specified subscriber, including session creation, change, and deletion. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
         * @summary List Session Events.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {number} [from] Start time for the events search range (unixtime).
         * @param {number} [to] End time for the events search range (unixtime).
         * @param {number} [limit] Maximum number of events to retrieve.
         * @param {string} [lastEvaluatedKey] The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionEvents: function (imsi, from, to, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('listSessionEvents', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/events/sessions"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['to'] = to;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of subscribers that match certain criteria. If the total number of subscribers does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List Subscribers.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {string} [statusFilter] Status for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;active&#x60;, &#x60;inactive&#x60;, &#x60;ready&#x60;, &#x60;instock&#x60;, &#x60;shipped&#x60;, &#x60;suspended&#x60;, and &#x60;terminated&#x60;.
         * @param {string} [speedClassFilter] Speed class for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;s1.minimum&#x60;, &#x60;s1.slow&#x60;, &#x60;s1.standard&#x60;, &#x60;s1.fast&#x60;
         * @param {string} [serialNumberFilter] Serial number for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Returns subscribers with serial number starting with the specified value(s).
         * @param {number} [limit] Maximum number of subscribers to retrieve.
         * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscribers: function (tagName, tagValue, tagValueMatchMode, statusFilter, speedClassFilter, serialNumberFilter, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/subscribers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (tagName !== undefined) {
                                localVarQueryParameter['tag_name'] = tagName;
                            }
                            if (tagValue !== undefined) {
                                localVarQueryParameter['tag_value'] = tagValue;
                            }
                            if (tagValueMatchMode !== undefined) {
                                localVarQueryParameter['tag_value_match_mode'] = tagValueMatchMode;
                            }
                            if (statusFilter !== undefined) {
                                localVarQueryParameter['status_filter'] = statusFilter;
                            }
                            if (speedClassFilter !== undefined) {
                                localVarQueryParameter['speed_class_filter'] = speedClassFilter;
                            }
                            if (serialNumberFilter !== undefined) {
                                localVarQueryParameter['serial_number_filter'] = serialNumberFilter;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets bundles to the specified subscriber.
         * @summary Set Bundles to Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {Array<string>} bundles Array of bundles to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBundles: function (imsi, bundles, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('putBundles', 'imsi', imsi);
                            // verify required parameter 'bundles' is not null or undefined
                            common_1.assertParamExists('putBundles', 'bundles', bundles);
                            localVarPath = "/subscribers/{imsi}/bundles"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bundles, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified subscriber.
         * @summary Bulk Insert or Update Subscriber Tags.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubscriberTags: function (imsi, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('putSubscriberTags', 'imsi', imsi);
                            // verify required parameter 'tags' is not null or undefined
                            common_1.assertParamExists('putSubscriberTags', 'tags', tags);
                            localVarPath = "/subscribers/{imsi}/tags"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tags, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Registers a subscriber.
         * @summary Register Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {RegisterSubscribersRequest} subscriber subscriber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSubscriber: function (imsi, subscriber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('registerSubscriber', 'imsi', imsi);
                            // verify required parameter 'subscriber' is not null or undefined
                            common_1.assertParamExists('registerSubscriber', 'subscriber', subscriber);
                            localVarPath = "/subscribers/{imsi}/register"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(subscriber, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Triggers Subscriber to report SIM local info.
         * @summary Triggers Subscriber to report SIM local info.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportLocalInfo: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('reportLocalInfo', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/report_local_info"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Send SMS to the specified subscriber.
         * @summary Send SMS to Subscriber
         * @param {string} imsi IMSI of the target subscriber.
         * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSms: function (imsi, smsForwardingRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('sendSms', 'imsi', imsi);
                            // verify required parameter 'smsForwardingRequest' is not null or undefined
                            common_1.assertParamExists('sendSms', 'smsForwardingRequest', smsForwardingRequest);
                            localVarPath = "/subscribers/{imsi}/send_sms"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(smsForwardingRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Send SMS to a subscriber specified with MSISDN.
         * @summary Send SMS to Subscriber by MSISDN
         * @param {string} msisdn MSISDN of the target subscriber.
         * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSmsByMsisdn: function (msisdn, smsForwardingRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'msisdn' is not null or undefined
                            common_1.assertParamExists('sendSmsByMsisdn', 'msisdn', msisdn);
                            // verify required parameter 'smsForwardingRequest' is not null or undefined
                            common_1.assertParamExists('sendSmsByMsisdn', 'smsForwardingRequest', smsForwardingRequest);
                            localVarPath = "/subscribers/msisdn/{msisdn}/send_sms"
                                .replace("{" + "msisdn" + "}", encodeURIComponent(String(msisdn)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(smsForwardingRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates expiry time of specified subscriber.
         * @summary Update Expiry Time of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {ExpiryTime} request Expiry time after the update (unixtime: in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExpiryTime: function (imsi, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('setExpiryTime', 'imsi', imsi);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('setExpiryTime', 'request', request);
                            localVarPath = "/subscribers/{imsi}/set_expiry_time"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified subscriber.
         * @summary Set Group to Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {SetGroupRequest} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGroup: function (imsi, group, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('setGroup', 'imsi', imsi);
                            // verify required parameter 'group' is not null or undefined
                            common_1.assertParamExists('setGroup', 'group', group);
                            localVarPath = "/subscribers/{imsi}/set_group"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(group, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Set IMEI that the subscriber should be locked to.
         * @summary Set IMEI lock configuration for Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {SetImeiLockRequest} [imeiLock] IMEI lock configuration for the subscriber. (IMEI can be left blank for locking to the current IMEI of an online subscriber.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setImeiLock: function (imsi, imeiLock, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('setImeiLock', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/set_imei_lock"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(imeiLock, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Set the specified subscriber to standby mode.
         * @summary Set Subscriber to standby mode.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSubscriberToStandby: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('setSubscriberToStandby', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/set_to_standby"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Suspends the specified subscriber
         * @summary Suspend Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendSubscriber: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('suspendSubscriber', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/suspend"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Terminates the specified subscriber
         * @summary Terminate Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateSubscriber: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('terminateSubscriber', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/terminate"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes expiry time of specified subscriber and changes it to indefinite.
         * @summary Delete Expiry Time of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetExpiryTime: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('unsetExpiryTime', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/unset_expiry_time"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified subscriber.
         * @summary Unset Group to Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetGroup: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('unsetGroup', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/unset_group"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Remove any existing IMEI lock configuration for the subscriber.
         * @summary Unset IMEI lock configuration for Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetImeiLock: function (imsi, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('unsetImeiLock', 'imsi', imsi);
                            localVarPath = "/subscribers/{imsi}/unset_imei_lock"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Changes the speed class of the specified subscriber.
         * @summary Update Subscriber speed class.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {UpdateSpeedClassRequest} speedClass speed_class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpeedClass: function (imsi, speedClass, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'imsi' is not null or undefined
                            common_1.assertParamExists('updateSpeedClass', 'imsi', imsi);
                            // verify required parameter 'speedClass' is not null or undefined
                            common_1.assertParamExists('updateSpeedClass', 'speedClass', speedClass);
                            localVarPath = "/subscribers/{imsi}/update_speed_class"
                                .replace("{" + "imsi" + "}", encodeURIComponent(String(imsi)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(speedClass, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Verifies the subscriber\'s control transfer token, and executes the transfer. This API is called from the operator of the control destination.
         * @summary Verify Subscriber Transfer Token.
         * @param {VerifySubscriberTransferTokenRequest} token Subscriber transfer token that noficed via email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySubscriberTransferToken: function (token, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'token' is not null or undefined
                            common_1.assertParamExists('verifySubscriberTransferToken', 'token', token);
                            localVarPath = "/subscribers/transfer_token/verify";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(token, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.SubscriberApiAxiosParamCreator = SubscriberApiAxiosParamCreator;
/**
 * SubscriberApi - functional programming interface
 * @export
 */
var SubscriberApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SubscriberApiAxiosParamCreator(configuration);
    return {
        /**
         * Activates status of specified subscriber.
         * @summary Activate Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateSubscriber: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.activateSubscriber(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deactivates specified subscriber.
         * @summary Deactivate Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateSubscriber: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deactivateSubscriber(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes session for the specified subscriber.
         * @summary Delete Session
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriberSession: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSubscriberSession(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a tag from the specified subscriber.
         * @summary Delete Subscriber Tag.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriberTag: function (imsi, tagName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSubscriberTag(imsi, tagName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the subscriber\'s inter-operator control transfer token, and cancels the control transfer.
         * @summary Delete Subscribers Transfer Token.
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriberTransferToken: function (token, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSubscriberTransferToken(token, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Disables termination of specified subscriber.
         * @summary Disable Termination of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTermination: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disableTermination(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Enables termination of specified subscriber.
         * @summary Enable Termination of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTermination: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableTermination(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of data entries sent from a subscriber that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a subscriber.
         * @param {string} imsi IMSI of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromSubscriber: function (imsi, from, to, sort, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDataFromSubscriber(imsi, from, to, sort, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns information about the specified subscriber.
         * @summary Get Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriber: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSubscriber(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sends the subscriber\'s inter-operator control transfer token to the control destination operator.
         * @summary Issue Subscribers Transfer Token.
         * @param {IssueSubscriberTransferTokenRequest} request Destination operator\&#39;s email address, Operator ID, transferring IMSI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueSubscriberTransferToken: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.issueSubscriberTransferToken(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the event history for the specified subscriber, including session creation, change, and deletion. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
         * @summary List Session Events.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {number} [from] Start time for the events search range (unixtime).
         * @param {number} [to] End time for the events search range (unixtime).
         * @param {number} [limit] Maximum number of events to retrieve.
         * @param {string} [lastEvaluatedKey] The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionEvents: function (imsi, from, to, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSessionEvents(imsi, from, to, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of subscribers that match certain criteria. If the total number of subscribers does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List Subscribers.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {string} [statusFilter] Status for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;active&#x60;, &#x60;inactive&#x60;, &#x60;ready&#x60;, &#x60;instock&#x60;, &#x60;shipped&#x60;, &#x60;suspended&#x60;, and &#x60;terminated&#x60;.
         * @param {string} [speedClassFilter] Speed class for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;s1.minimum&#x60;, &#x60;s1.slow&#x60;, &#x60;s1.standard&#x60;, &#x60;s1.fast&#x60;
         * @param {string} [serialNumberFilter] Serial number for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Returns subscribers with serial number starting with the specified value(s).
         * @param {number} [limit] Maximum number of subscribers to retrieve.
         * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscribers: function (tagName, tagValue, tagValueMatchMode, statusFilter, speedClassFilter, serialNumberFilter, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSubscribers(tagName, tagValue, tagValueMatchMode, statusFilter, speedClassFilter, serialNumberFilter, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets bundles to the specified subscriber.
         * @summary Set Bundles to Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {Array<string>} bundles Array of bundles to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBundles: function (imsi, bundles, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putBundles(imsi, bundles, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Inserts/updates tags for the specified subscriber.
         * @summary Bulk Insert or Update Subscriber Tags.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubscriberTags: function (imsi, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putSubscriberTags(imsi, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Registers a subscriber.
         * @summary Register Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {RegisterSubscribersRequest} subscriber subscriber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSubscriber: function (imsi, subscriber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerSubscriber(imsi, subscriber, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Triggers Subscriber to report SIM local info.
         * @summary Triggers Subscriber to report SIM local info.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportLocalInfo: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportLocalInfo(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send SMS to the specified subscriber.
         * @summary Send SMS to Subscriber
         * @param {string} imsi IMSI of the target subscriber.
         * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSms: function (imsi, smsForwardingRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendSms(imsi, smsForwardingRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send SMS to a subscriber specified with MSISDN.
         * @summary Send SMS to Subscriber by MSISDN
         * @param {string} msisdn MSISDN of the target subscriber.
         * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSmsByMsisdn: function (msisdn, smsForwardingRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendSmsByMsisdn(msisdn, smsForwardingRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates expiry time of specified subscriber.
         * @summary Update Expiry Time of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {ExpiryTime} request Expiry time after the update (unixtime: in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExpiryTime: function (imsi, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setExpiryTime(imsi, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets or overwrites a group for the specified subscriber.
         * @summary Set Group to Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {SetGroupRequest} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGroup: function (imsi, group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setGroup(imsi, group, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set IMEI that the subscriber should be locked to.
         * @summary Set IMEI lock configuration for Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {SetImeiLockRequest} [imeiLock] IMEI lock configuration for the subscriber. (IMEI can be left blank for locking to the current IMEI of an online subscriber.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setImeiLock: function (imsi, imeiLock, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setImeiLock(imsi, imeiLock, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set the specified subscriber to standby mode.
         * @summary Set Subscriber to standby mode.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSubscriberToStandby: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setSubscriberToStandby(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Suspends the specified subscriber
         * @summary Suspend Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendSubscriber: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.suspendSubscriber(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Terminates the specified subscriber
         * @summary Terminate Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateSubscriber: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.terminateSubscriber(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes expiry time of specified subscriber and changes it to indefinite.
         * @summary Delete Expiry Time of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetExpiryTime: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetExpiryTime(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Removes the group configuration from the specified subscriber.
         * @summary Unset Group to Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetGroup: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetGroup(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove any existing IMEI lock configuration for the subscriber.
         * @summary Unset IMEI lock configuration for Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetImeiLock: function (imsi, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetImeiLock(imsi, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Changes the speed class of the specified subscriber.
         * @summary Update Subscriber speed class.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {UpdateSpeedClassRequest} speedClass speed_class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpeedClass: function (imsi, speedClass, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateSpeedClass(imsi, speedClass, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Verifies the subscriber\'s control transfer token, and executes the transfer. This API is called from the operator of the control destination.
         * @summary Verify Subscriber Transfer Token.
         * @param {VerifySubscriberTransferTokenRequest} token Subscriber transfer token that noficed via email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySubscriberTransferToken: function (token, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.verifySubscriberTransferToken(token, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.SubscriberApiFp = SubscriberApiFp;
/**
 * SubscriberApi - factory interface
 * @export
 */
var SubscriberApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SubscriberApiFp(configuration);
    return {
        /**
         * Activates status of specified subscriber.
         * @summary Activate Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateSubscriber: function (imsi, options) {
            return localVarFp.activateSubscriber(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deactivates specified subscriber.
         * @summary Deactivate Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateSubscriber: function (imsi, options) {
            return localVarFp.deactivateSubscriber(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes session for the specified subscriber.
         * @summary Delete Session
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriberSession: function (imsi, options) {
            return localVarFp.deleteSubscriberSession(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a tag from the specified subscriber.
         * @summary Delete Subscriber Tag.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriberTag: function (imsi, tagName, options) {
            return localVarFp.deleteSubscriberTag(imsi, tagName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the subscriber\'s inter-operator control transfer token, and cancels the control transfer.
         * @summary Delete Subscribers Transfer Token.
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriberTransferToken: function (token, options) {
            return localVarFp.deleteSubscriberTransferToken(token, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Disables termination of specified subscriber.
         * @summary Disable Termination of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTermination: function (imsi, options) {
            return localVarFp.disableTermination(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Enables termination of specified subscriber.
         * @summary Enable Termination of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTermination: function (imsi, options) {
            return localVarFp.enableTermination(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of data entries sent from a subscriber that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary Get data sent from a subscriber.
         * @param {string} imsi IMSI of the target subscriber that generated data entries.
         * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
         * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
         * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
         * @param {number} [limit] Maximum number of data entries to retrieve.
         * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromSubscriber: function (imsi, from, to, sort, limit, lastEvaluatedKey, options) {
            return localVarFp.getDataFromSubscriber(imsi, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns information about the specified subscriber.
         * @summary Get Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriber: function (imsi, options) {
            return localVarFp.getSubscriber(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sends the subscriber\'s inter-operator control transfer token to the control destination operator.
         * @summary Issue Subscribers Transfer Token.
         * @param {IssueSubscriberTransferTokenRequest} request Destination operator\&#39;s email address, Operator ID, transferring IMSI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueSubscriberTransferToken: function (request, options) {
            return localVarFp.issueSubscriberTransferToken(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the event history for the specified subscriber, including session creation, change, and deletion. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
         * @summary List Session Events.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {number} [from] Start time for the events search range (unixtime).
         * @param {number} [to] End time for the events search range (unixtime).
         * @param {number} [limit] Maximum number of events to retrieve.
         * @param {string} [lastEvaluatedKey] The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionEvents: function (imsi, from, to, limit, lastEvaluatedKey, options) {
            return localVarFp.listSessionEvents(imsi, from, to, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of subscribers that match certain criteria. If the total number of subscribers does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
         * @summary List Subscribers.
         * @param {string} [tagName] Tag name for filtering the search (exact match).
         * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {string} [statusFilter] Status for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;active&#x60;, &#x60;inactive&#x60;, &#x60;ready&#x60;, &#x60;instock&#x60;, &#x60;shipped&#x60;, &#x60;suspended&#x60;, and &#x60;terminated&#x60;.
         * @param {string} [speedClassFilter] Speed class for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;s1.minimum&#x60;, &#x60;s1.slow&#x60;, &#x60;s1.standard&#x60;, &#x60;s1.fast&#x60;
         * @param {string} [serialNumberFilter] Serial number for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Returns subscribers with serial number starting with the specified value(s).
         * @param {number} [limit] Maximum number of subscribers to retrieve.
         * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscribers: function (tagName, tagValue, tagValueMatchMode, statusFilter, speedClassFilter, serialNumberFilter, limit, lastEvaluatedKey, options) {
            return localVarFp.listSubscribers(tagName, tagValue, tagValueMatchMode, statusFilter, speedClassFilter, serialNumberFilter, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets bundles to the specified subscriber.
         * @summary Set Bundles to Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {Array<string>} bundles Array of bundles to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBundles: function (imsi, bundles, options) {
            return localVarFp.putBundles(imsi, bundles, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Inserts/updates tags for the specified subscriber.
         * @summary Bulk Insert or Update Subscriber Tags.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubscriberTags: function (imsi, tags, options) {
            return localVarFp.putSubscriberTags(imsi, tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Registers a subscriber.
         * @summary Register Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {RegisterSubscribersRequest} subscriber subscriber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSubscriber: function (imsi, subscriber, options) {
            return localVarFp.registerSubscriber(imsi, subscriber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Triggers Subscriber to report SIM local info.
         * @summary Triggers Subscriber to report SIM local info.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportLocalInfo: function (imsi, options) {
            return localVarFp.reportLocalInfo(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send SMS to the specified subscriber.
         * @summary Send SMS to Subscriber
         * @param {string} imsi IMSI of the target subscriber.
         * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSms: function (imsi, smsForwardingRequest, options) {
            return localVarFp.sendSms(imsi, smsForwardingRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send SMS to a subscriber specified with MSISDN.
         * @summary Send SMS to Subscriber by MSISDN
         * @param {string} msisdn MSISDN of the target subscriber.
         * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSmsByMsisdn: function (msisdn, smsForwardingRequest, options) {
            return localVarFp.sendSmsByMsisdn(msisdn, smsForwardingRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates expiry time of specified subscriber.
         * @summary Update Expiry Time of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {ExpiryTime} request Expiry time after the update (unixtime: in milliseconds).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExpiryTime: function (imsi, request, options) {
            return localVarFp.setExpiryTime(imsi, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets or overwrites a group for the specified subscriber.
         * @summary Set Group to Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {SetGroupRequest} group Group (may include ID only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGroup: function (imsi, group, options) {
            return localVarFp.setGroup(imsi, group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set IMEI that the subscriber should be locked to.
         * @summary Set IMEI lock configuration for Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {SetImeiLockRequest} [imeiLock] IMEI lock configuration for the subscriber. (IMEI can be left blank for locking to the current IMEI of an online subscriber.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setImeiLock: function (imsi, imeiLock, options) {
            return localVarFp.setImeiLock(imsi, imeiLock, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set the specified subscriber to standby mode.
         * @summary Set Subscriber to standby mode.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSubscriberToStandby: function (imsi, options) {
            return localVarFp.setSubscriberToStandby(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Suspends the specified subscriber
         * @summary Suspend Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendSubscriber: function (imsi, options) {
            return localVarFp.suspendSubscriber(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Terminates the specified subscriber
         * @summary Terminate Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateSubscriber: function (imsi, options) {
            return localVarFp.terminateSubscriber(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes expiry time of specified subscriber and changes it to indefinite.
         * @summary Delete Expiry Time of Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetExpiryTime: function (imsi, options) {
            return localVarFp.unsetExpiryTime(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes the group configuration from the specified subscriber.
         * @summary Unset Group to Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetGroup: function (imsi, options) {
            return localVarFp.unsetGroup(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove any existing IMEI lock configuration for the subscriber.
         * @summary Unset IMEI lock configuration for Subscriber.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetImeiLock: function (imsi, options) {
            return localVarFp.unsetImeiLock(imsi, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Changes the speed class of the specified subscriber.
         * @summary Update Subscriber speed class.
         * @param {string} imsi IMSI of the target subscriber.
         * @param {UpdateSpeedClassRequest} speedClass speed_class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpeedClass: function (imsi, speedClass, options) {
            return localVarFp.updateSpeedClass(imsi, speedClass, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Verifies the subscriber\'s control transfer token, and executes the transfer. This API is called from the operator of the control destination.
         * @summary Verify Subscriber Transfer Token.
         * @param {VerifySubscriberTransferTokenRequest} token Subscriber transfer token that noficed via email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySubscriberTransferToken: function (token, options) {
            return localVarFp.verifySubscriberTransferToken(token, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.SubscriberApiFactory = SubscriberApiFactory;
/**
 * SubscriberApi - object-oriented interface
 * @export
 * @class SubscriberApi
 * @extends {BaseAPI}
 */
var SubscriberApi = /** @class */ (function (_super) {
    __extends(SubscriberApi, _super);
    function SubscriberApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Activates status of specified subscriber.
     * @summary Activate Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.activateSubscriber = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).activateSubscriber(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deactivates specified subscriber.
     * @summary Deactivate Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.deactivateSubscriber = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).deactivateSubscriber(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes session for the specified subscriber.
     * @summary Delete Session
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.deleteSubscriberSession = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).deleteSubscriberSession(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a tag from the specified subscriber.
     * @summary Delete Subscriber Tag.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {string} tagName Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.deleteSubscriberTag = function (imsi, tagName, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).deleteSubscriberTag(imsi, tagName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the subscriber\'s inter-operator control transfer token, and cancels the control transfer.
     * @summary Delete Subscribers Transfer Token.
     * @param {string} token token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.deleteSubscriberTransferToken = function (token, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).deleteSubscriberTransferToken(token, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Disables termination of specified subscriber.
     * @summary Disable Termination of Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.disableTermination = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).disableTermination(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Enables termination of specified subscriber.
     * @summary Enable Termination of Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.enableTermination = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).enableTermination(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of data entries sent from a subscriber that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary Get data sent from a subscriber.
     * @param {string} imsi IMSI of the target subscriber that generated data entries.
     * @param {number} [from] Start time for the data entries search range (unixtime in milliseconds).
     * @param {number} [to] End time for the data entries search range (unixtime in milliseconds).
     * @param {'desc' | 'asc'} [sort] Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first).
     * @param {number} [limit] Maximum number of data entries to retrieve.
     * @param {string} [lastEvaluatedKey] The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.getDataFromSubscriber = function (imsi, from, to, sort, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).getDataFromSubscriber(imsi, from, to, sort, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns information about the specified subscriber.
     * @summary Get Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.getSubscriber = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).getSubscriber(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sends the subscriber\'s inter-operator control transfer token to the control destination operator.
     * @summary Issue Subscribers Transfer Token.
     * @param {IssueSubscriberTransferTokenRequest} request Destination operator\&#39;s email address, Operator ID, transferring IMSI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.issueSubscriberTransferToken = function (request, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).issueSubscriberTransferToken(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the event history for the specified subscriber, including session creation, change, and deletion. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
     * @summary List Session Events.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {number} [from] Start time for the events search range (unixtime).
     * @param {number} [to] End time for the events search range (unixtime).
     * @param {number} [limit] Maximum number of events to retrieve.
     * @param {string} [lastEvaluatedKey] The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.listSessionEvents = function (imsi, from, to, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).listSessionEvents(imsi, from, to, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of subscribers that match certain criteria. If the total number of subscribers does not fit in one page, a URL for accessing the next page is returned in the \'Link\' header of the response.
     * @summary List Subscribers.
     * @param {string} [tagName] Tag name for filtering the search (exact match).
     * @param {string} [tagValue] Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified.
     * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
     * @param {string} [statusFilter] Status for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;active&#x60;, &#x60;inactive&#x60;, &#x60;ready&#x60;, &#x60;instock&#x60;, &#x60;shipped&#x60;, &#x60;suspended&#x60;, and &#x60;terminated&#x60;.
     * @param {string} [speedClassFilter] Speed class for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;s1.minimum&#x60;, &#x60;s1.slow&#x60;, &#x60;s1.standard&#x60;, &#x60;s1.fast&#x60;
     * @param {string} [serialNumberFilter] Serial number for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Returns subscribers with serial number starting with the specified value(s).
     * @param {number} [limit] Maximum number of subscribers to retrieve.
     * @param {string} [lastEvaluatedKey] The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.listSubscribers = function (tagName, tagValue, tagValueMatchMode, statusFilter, speedClassFilter, serialNumberFilter, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).listSubscribers(tagName, tagValue, tagValueMatchMode, statusFilter, speedClassFilter, serialNumberFilter, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets bundles to the specified subscriber.
     * @summary Set Bundles to Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {Array<string>} bundles Array of bundles to be set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.putBundles = function (imsi, bundles, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).putBundles(imsi, bundles, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Inserts/updates tags for the specified subscriber.
     * @summary Bulk Insert or Update Subscriber Tags.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {Array<TagUpdateRequest>} tags Array of tags to be inserted/updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.putSubscriberTags = function (imsi, tags, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).putSubscriberTags(imsi, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Registers a subscriber.
     * @summary Register Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {RegisterSubscribersRequest} subscriber subscriber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.registerSubscriber = function (imsi, subscriber, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).registerSubscriber(imsi, subscriber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Triggers Subscriber to report SIM local info.
     * @summary Triggers Subscriber to report SIM local info.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.reportLocalInfo = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).reportLocalInfo(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send SMS to the specified subscriber.
     * @summary Send SMS to Subscriber
     * @param {string} imsi IMSI of the target subscriber.
     * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.sendSms = function (imsi, smsForwardingRequest, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).sendSms(imsi, smsForwardingRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send SMS to a subscriber specified with MSISDN.
     * @summary Send SMS to Subscriber by MSISDN
     * @param {string} msisdn MSISDN of the target subscriber.
     * @param {SmsForwardingRequest} smsForwardingRequest SMS forwarding request that contains message body and its encoding type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.sendSmsByMsisdn = function (msisdn, smsForwardingRequest, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).sendSmsByMsisdn(msisdn, smsForwardingRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates expiry time of specified subscriber.
     * @summary Update Expiry Time of Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {ExpiryTime} request Expiry time after the update (unixtime: in milliseconds).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.setExpiryTime = function (imsi, request, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).setExpiryTime(imsi, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets or overwrites a group for the specified subscriber.
     * @summary Set Group to Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {SetGroupRequest} group Group (may include ID only).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.setGroup = function (imsi, group, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).setGroup(imsi, group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set IMEI that the subscriber should be locked to.
     * @summary Set IMEI lock configuration for Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {SetImeiLockRequest} [imeiLock] IMEI lock configuration for the subscriber. (IMEI can be left blank for locking to the current IMEI of an online subscriber.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.setImeiLock = function (imsi, imeiLock, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).setImeiLock(imsi, imeiLock, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set the specified subscriber to standby mode.
     * @summary Set Subscriber to standby mode.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.setSubscriberToStandby = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).setSubscriberToStandby(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Suspends the specified subscriber
     * @summary Suspend Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.suspendSubscriber = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).suspendSubscriber(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Terminates the specified subscriber
     * @summary Terminate Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.terminateSubscriber = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).terminateSubscriber(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes expiry time of specified subscriber and changes it to indefinite.
     * @summary Delete Expiry Time of Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.unsetExpiryTime = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).unsetExpiryTime(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes the group configuration from the specified subscriber.
     * @summary Unset Group to Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.unsetGroup = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).unsetGroup(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove any existing IMEI lock configuration for the subscriber.
     * @summary Unset IMEI lock configuration for Subscriber.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.unsetImeiLock = function (imsi, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).unsetImeiLock(imsi, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Changes the speed class of the specified subscriber.
     * @summary Update Subscriber speed class.
     * @param {string} imsi IMSI of the target subscriber.
     * @param {UpdateSpeedClassRequest} speedClass speed_class
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.updateSpeedClass = function (imsi, speedClass, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).updateSpeedClass(imsi, speedClass, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Verifies the subscriber\'s control transfer token, and executes the transfer. This API is called from the operator of the control destination.
     * @summary Verify Subscriber Transfer Token.
     * @param {VerifySubscriberTransferTokenRequest} token Subscriber transfer token that noficed via email.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    SubscriberApi.prototype.verifySubscriberTransferToken = function (token, options) {
        var _this = this;
        return exports.SubscriberApiFp(this.configuration).verifySubscriberTransferToken(token, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SubscriberApi;
}(base_1.BaseAPI));
exports.SubscriberApi = SubscriberApi;
/**
 * SystemNotificationApi - axios parameter creator
 * @export
 */
var SystemNotificationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes a system notification.
         * @summary Delete system notification
         * @param {string} operatorId operator_id
         * @param {'billing'} type system notification type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystemNotification: function (operatorId, type, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('deleteSystemNotification', 'operatorId', operatorId);
                            // verify required parameter 'type' is not null or undefined
                            common_1.assertParamExists('deleteSystemNotification', 'type', type);
                            localVarPath = "/operators/{operator_id}/system_notifications/{type}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "type" + "}", encodeURIComponent(String(type)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a system notification.
         * @summary Get system notification
         * @param {string} operatorId operator_id
         * @param {'primary' | 'recovery' | 'billing'} type system notification type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemNotification: function (operatorId, type, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getSystemNotification', 'operatorId', operatorId);
                            // verify required parameter 'type' is not null or undefined
                            common_1.assertParamExists('getSystemNotification', 'type', type);
                            localVarPath = "/operators/{operator_id}/system_notifications/{type}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "type" + "}", encodeURIComponent(String(type)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of system notifications.
         * @summary List system notifications
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemNotifications: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('listSystemNotifications', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/system_notifications"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets a system notification.
         * @summary Set system notification
         * @param {string} operatorId operator_id
         * @param {'primary' | 'recovery' | 'billing'} type system notification type
         * @param {SetSystemNotificationsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemNotification: function (operatorId, type, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('setSystemNotification', 'operatorId', operatorId);
                            // verify required parameter 'type' is not null or undefined
                            common_1.assertParamExists('setSystemNotification', 'type', type);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('setSystemNotification', 'request', request);
                            localVarPath = "/operators/{operator_id}/system_notifications/{type}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "type" + "}", encodeURIComponent(String(type)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.SystemNotificationApiAxiosParamCreator = SystemNotificationApiAxiosParamCreator;
/**
 * SystemNotificationApi - functional programming interface
 * @export
 */
var SystemNotificationApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemNotificationApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes a system notification.
         * @summary Delete system notification
         * @param {string} operatorId operator_id
         * @param {'billing'} type system notification type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystemNotification: function (operatorId, type, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSystemNotification(operatorId, type, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a system notification.
         * @summary Get system notification
         * @param {string} operatorId operator_id
         * @param {'primary' | 'recovery' | 'billing'} type system notification type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemNotification: function (operatorId, type, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemNotification(operatorId, type, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of system notifications.
         * @summary List system notifications
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemNotifications: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSystemNotifications(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets a system notification.
         * @summary Set system notification
         * @param {string} operatorId operator_id
         * @param {'primary' | 'recovery' | 'billing'} type system notification type
         * @param {SetSystemNotificationsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemNotification: function (operatorId, type, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setSystemNotification(operatorId, type, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.SystemNotificationApiFp = SystemNotificationApiFp;
/**
 * SystemNotificationApi - factory interface
 * @export
 */
var SystemNotificationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemNotificationApiFp(configuration);
    return {
        /**
         * Deletes a system notification.
         * @summary Delete system notification
         * @param {string} operatorId operator_id
         * @param {'billing'} type system notification type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystemNotification: function (operatorId, type, options) {
            return localVarFp.deleteSystemNotification(operatorId, type, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a system notification.
         * @summary Get system notification
         * @param {string} operatorId operator_id
         * @param {'primary' | 'recovery' | 'billing'} type system notification type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemNotification: function (operatorId, type, options) {
            return localVarFp.getSystemNotification(operatorId, type, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of system notifications.
         * @summary List system notifications
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemNotifications: function (operatorId, options) {
            return localVarFp.listSystemNotifications(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets a system notification.
         * @summary Set system notification
         * @param {string} operatorId operator_id
         * @param {'primary' | 'recovery' | 'billing'} type system notification type
         * @param {SetSystemNotificationsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemNotification: function (operatorId, type, request, options) {
            return localVarFp.setSystemNotification(operatorId, type, request, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.SystemNotificationApiFactory = SystemNotificationApiFactory;
/**
 * SystemNotificationApi - object-oriented interface
 * @export
 * @class SystemNotificationApi
 * @extends {BaseAPI}
 */
var SystemNotificationApi = /** @class */ (function (_super) {
    __extends(SystemNotificationApi, _super);
    function SystemNotificationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a system notification.
     * @summary Delete system notification
     * @param {string} operatorId operator_id
     * @param {'billing'} type system notification type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemNotificationApi
     */
    SystemNotificationApi.prototype.deleteSystemNotification = function (operatorId, type, options) {
        var _this = this;
        return exports.SystemNotificationApiFp(this.configuration).deleteSystemNotification(operatorId, type, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a system notification.
     * @summary Get system notification
     * @param {string} operatorId operator_id
     * @param {'primary' | 'recovery' | 'billing'} type system notification type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemNotificationApi
     */
    SystemNotificationApi.prototype.getSystemNotification = function (operatorId, type, options) {
        var _this = this;
        return exports.SystemNotificationApiFp(this.configuration).getSystemNotification(operatorId, type, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of system notifications.
     * @summary List system notifications
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemNotificationApi
     */
    SystemNotificationApi.prototype.listSystemNotifications = function (operatorId, options) {
        var _this = this;
        return exports.SystemNotificationApiFp(this.configuration).listSystemNotifications(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets a system notification.
     * @summary Set system notification
     * @param {string} operatorId operator_id
     * @param {'primary' | 'recovery' | 'billing'} type system notification type
     * @param {SetSystemNotificationsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemNotificationApi
     */
    SystemNotificationApi.prototype.setSystemNotification = function (operatorId, type, request, options) {
        var _this = this;
        return exports.SystemNotificationApiFp(this.configuration).setSystemNotification(operatorId, type, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemNotificationApi;
}(base_1.BaseAPI));
exports.SystemNotificationApi = SystemNotificationApi;
/**
 * UserApi - axios parameter creator
 * @export
 */
var UserApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds a new SAM user.
         * @summary Create User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {CreateUserRequest} request description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (operatorId, userName, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('createUser', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('createUser', 'userName', userName);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createUser', 'request', request);
                            localVarPath = "/operators/{operator_id}/users/{user_name}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Creates a password for the SAM user.
         * @summary Create Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {CreateUserPasswordRequest} request password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserPassword: function (operatorId, userName, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('createUserPassword', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('createUserPassword', 'userName', userName);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('createUserPassword', 'request', request);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/password"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the SAM user.
         * @summary Delete User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('deleteUser', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('deleteUser', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an AuthKey from the SAM user.
         * @summary Delete User AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {string} authKeyId auth_key_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAuthKey: function (operatorId, userName, authKeyId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('deleteUserAuthKey', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('deleteUserAuthKey', 'userName', userName);
                            // verify required parameter 'authKeyId' is not null or undefined
                            common_1.assertParamExists('deleteUserAuthKey', 'authKeyId', authKeyId);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/auth_keys/{auth_key_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)))
                                .replace("{" + "auth_key_id" + "}", encodeURIComponent(String(authKeyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the user\'s password.
         * @summary Delete Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPassword: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('deleteUserPassword', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('deleteUserPassword', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/password"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Enable SAM user\'s MFA
         * @summary Enable SAM user\'s MFA
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableUserMFA: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('enableUserMFA', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('enableUserMFA', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/mfa"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Generates an AuthKey for the SAM user.
         * @summary Generate AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUserAuthKey: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('generateUserAuthKey', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('generateUserAuthKey', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/auth_keys"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Get the default permissions rule that is applied to all of the SAM users
         * @summary Get the default permissions
         * @param {string} operatorId Operator ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultPermissions: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getDefaultPermissions', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/users/default_permissions"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a SAM user.
         * @summary Get User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getUser', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('getUser', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns the SAM user\'s AuthKey.
         * @summary Get AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {string} authKeyId auth_key_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAuthKey: function (operatorId, userName, authKeyId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getUserAuthKey', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('getUserAuthKey', 'userName', userName);
                            // verify required parameter 'authKeyId' is not null or undefined
                            common_1.assertParamExists('getUserAuthKey', 'authKeyId', authKeyId);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/auth_keys/{auth_key_id}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)))
                                .replace("{" + "auth_key_id" + "}", encodeURIComponent(String(authKeyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Get SAM user\'s MFA status
         * @summary Get SAM user\'s MFA status
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMFAStatus: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getUserMFAStatus', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('getUserMFAStatus', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/mfa"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the SAM user\'s permissions.
         * @summary Get User Permission.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermission: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('getUserPermission', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('getUserPermission', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/permission"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves whether the SAM user has a password or not.
         * @summary Has User Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasUserPassword: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('hasUserPassword', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('hasUserPassword', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/password"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns the SAM user\'s AuthKey list.
         * @summary List User AuthKeys.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAuthKeys: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('listUserAuthKeys', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('listUserAuthKeys', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/auth_keys"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of SAM users.
         * @summary List Users.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (operatorId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('listUsers', 'operatorId', operatorId);
                            localVarPath = "/operators/{operator_id}/users"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Revoke SAM user\'s MFA
         * @summary Revoke SAM user\'s MFA
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeUserMFA: function (operatorId, userName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('revokeUserMFA', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('revokeUserMFA', 'userName', userName);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/mfa"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Update the default permissions rule that is applied to all of the SAM
         * @summary Update the default permissions
         * @param {string} operatorId Operator ID
         * @param {UpdateDefaultPermissionsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultPermissions: function (operatorId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('updateDefaultPermissions', 'operatorId', operatorId);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateDefaultPermissions', 'request', request);
                            localVarPath = "/operators/{operator_id}/users/default_permissions"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates the SAM user.
         * @summary Update User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {UpdateUserRequest} request description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (operatorId, userName, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('updateUser', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('updateUser', 'userName', userName);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateUser', 'request', request);
                            localVarPath = "/operators/{operator_id}/users/{user_name}"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates the password of the SAM user.
         * @summary Update Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {UpdatePasswordRequest} request password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: function (operatorId, userName, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('updateUserPassword', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('updateUserPassword', 'userName', userName);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateUserPassword', 'request', request);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/password"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Updates the SAM user\'s permissions.
         * @summary Update Permission to User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {SetUserPermissionRequest} request permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPermission: function (operatorId, userName, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('updateUserPermission', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('updateUserPermission', 'userName', userName);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('updateUserPermission', 'request', request);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/permission"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Verify SAM user\'s MFA OTP code when MFA activation phase
         * @summary Verify SAM user\'s MFA OTP code when MFA activation phase
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {MFAAuthenticationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserMFA: function (operatorId, userName, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'operatorId' is not null or undefined
                            common_1.assertParamExists('verifyUserMFA', 'operatorId', operatorId);
                            // verify required parameter 'userName' is not null or undefined
                            common_1.assertParamExists('verifyUserMFA', 'userName', userName);
                            // verify required parameter 'request' is not null or undefined
                            common_1.assertParamExists('verifyUserMFA', 'request', request);
                            localVarPath = "/operators/{operator_id}/users/{user_name}/mfa/verify"
                                .replace("{" + "operator_id" + "}", encodeURIComponent(String(operatorId)))
                                .replace("{" + "user_name" + "}", encodeURIComponent(String(userName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(request, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
var UserApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.UserApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new SAM user.
         * @summary Create User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {CreateUserRequest} request description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (operatorId, userName, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createUser(operatorId, userName, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Creates a password for the SAM user.
         * @summary Create Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {CreateUserPasswordRequest} request password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserPassword: function (operatorId, userName, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createUserPassword(operatorId, userName, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the SAM user.
         * @summary Delete User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUser(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes an AuthKey from the SAM user.
         * @summary Delete User AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {string} authKeyId auth_key_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAuthKey: function (operatorId, userName, authKeyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUserAuthKey(operatorId, userName, authKeyId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the user\'s password.
         * @summary Delete Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPassword: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUserPassword(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Enable SAM user\'s MFA
         * @summary Enable SAM user\'s MFA
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableUserMFA: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableUserMFA(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Generates an AuthKey for the SAM user.
         * @summary Generate AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUserAuthKey: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.generateUserAuthKey(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the default permissions rule that is applied to all of the SAM users
         * @summary Get the default permissions
         * @param {string} operatorId Operator ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultPermissions: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDefaultPermissions(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a SAM user.
         * @summary Get User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUser(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the SAM user\'s AuthKey.
         * @summary Get AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {string} authKeyId auth_key_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAuthKey: function (operatorId, userName, authKeyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserAuthKey(operatorId, userName, authKeyId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get SAM user\'s MFA status
         * @summary Get SAM user\'s MFA status
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMFAStatus: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserMFAStatus(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves the SAM user\'s permissions.
         * @summary Get User Permission.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermission: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserPermission(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves whether the SAM user has a password or not.
         * @summary Has User Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasUserPassword: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.hasUserPassword(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the SAM user\'s AuthKey list.
         * @summary List User AuthKeys.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAuthKeys: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listUserAuthKeys(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of SAM users.
         * @summary List Users.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (operatorId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listUsers(operatorId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Revoke SAM user\'s MFA
         * @summary Revoke SAM user\'s MFA
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeUserMFA: function (operatorId, userName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.revokeUserMFA(operatorId, userName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update the default permissions rule that is applied to all of the SAM
         * @summary Update the default permissions
         * @param {string} operatorId Operator ID
         * @param {UpdateDefaultPermissionsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultPermissions: function (operatorId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateDefaultPermissions(operatorId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the SAM user.
         * @summary Update User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {UpdateUserRequest} request description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (operatorId, userName, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUser(operatorId, userName, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the password of the SAM user.
         * @summary Update Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {UpdatePasswordRequest} request password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: function (operatorId, userName, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUserPassword(operatorId, userName, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the SAM user\'s permissions.
         * @summary Update Permission to User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {SetUserPermissionRequest} request permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPermission: function (operatorId, userName, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUserPermission(operatorId, userName, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Verify SAM user\'s MFA OTP code when MFA activation phase
         * @summary Verify SAM user\'s MFA OTP code when MFA activation phase
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {MFAAuthenticationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserMFA: function (operatorId, userName, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.verifyUserMFA(operatorId, userName, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
var UserApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.UserApiFp(configuration);
    return {
        /**
         * Adds a new SAM user.
         * @summary Create User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {CreateUserRequest} request description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (operatorId, userName, request, options) {
            return localVarFp.createUser(operatorId, userName, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a password for the SAM user.
         * @summary Create Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {CreateUserPasswordRequest} request password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserPassword: function (operatorId, userName, request, options) {
            return localVarFp.createUserPassword(operatorId, userName, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the SAM user.
         * @summary Delete User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (operatorId, userName, options) {
            return localVarFp.deleteUser(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an AuthKey from the SAM user.
         * @summary Delete User AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {string} authKeyId auth_key_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAuthKey: function (operatorId, userName, authKeyId, options) {
            return localVarFp.deleteUserAuthKey(operatorId, userName, authKeyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the user\'s password.
         * @summary Delete Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPassword: function (operatorId, userName, options) {
            return localVarFp.deleteUserPassword(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Enable SAM user\'s MFA
         * @summary Enable SAM user\'s MFA
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableUserMFA: function (operatorId, userName, options) {
            return localVarFp.enableUserMFA(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Generates an AuthKey for the SAM user.
         * @summary Generate AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUserAuthKey: function (operatorId, userName, options) {
            return localVarFp.generateUserAuthKey(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the default permissions rule that is applied to all of the SAM users
         * @summary Get the default permissions
         * @param {string} operatorId Operator ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultPermissions: function (operatorId, options) {
            return localVarFp.getDefaultPermissions(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a SAM user.
         * @summary Get User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (operatorId, userName, options) {
            return localVarFp.getUser(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the SAM user\'s AuthKey.
         * @summary Get AuthKey.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {string} authKeyId auth_key_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAuthKey: function (operatorId, userName, authKeyId, options) {
            return localVarFp.getUserAuthKey(operatorId, userName, authKeyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get SAM user\'s MFA status
         * @summary Get SAM user\'s MFA status
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMFAStatus: function (operatorId, userName, options) {
            return localVarFp.getUserMFAStatus(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the SAM user\'s permissions.
         * @summary Get User Permission.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermission: function (operatorId, userName, options) {
            return localVarFp.getUserPermission(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves whether the SAM user has a password or not.
         * @summary Has User Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasUserPassword: function (operatorId, userName, options) {
            return localVarFp.hasUserPassword(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the SAM user\'s AuthKey list.
         * @summary List User AuthKeys.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAuthKeys: function (operatorId, userName, options) {
            return localVarFp.listUserAuthKeys(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of SAM users.
         * @summary List Users.
         * @param {string} operatorId operator_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (operatorId, options) {
            return localVarFp.listUsers(operatorId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke SAM user\'s MFA
         * @summary Revoke SAM user\'s MFA
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeUserMFA: function (operatorId, userName, options) {
            return localVarFp.revokeUserMFA(operatorId, userName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update the default permissions rule that is applied to all of the SAM
         * @summary Update the default permissions
         * @param {string} operatorId Operator ID
         * @param {UpdateDefaultPermissionsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultPermissions: function (operatorId, request, options) {
            return localVarFp.updateDefaultPermissions(operatorId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the SAM user.
         * @summary Update User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {UpdateUserRequest} request description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (operatorId, userName, request, options) {
            return localVarFp.updateUser(operatorId, userName, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the password of the SAM user.
         * @summary Update Password.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {UpdatePasswordRequest} request password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: function (operatorId, userName, request, options) {
            return localVarFp.updateUserPassword(operatorId, userName, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the SAM user\'s permissions.
         * @summary Update Permission to User.
         * @param {string} operatorId operator_id
         * @param {string} userName user_name
         * @param {SetUserPermissionRequest} request permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPermission: function (operatorId, userName, request, options) {
            return localVarFp.updateUserPermission(operatorId, userName, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Verify SAM user\'s MFA OTP code when MFA activation phase
         * @summary Verify SAM user\'s MFA OTP code when MFA activation phase
         * @param {string} operatorId Operator ID
         * @param {string} userName SAM user name
         * @param {MFAAuthenticationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserMFA: function (operatorId, userName, request, options) {
            return localVarFp.verifyUserMFA(operatorId, userName, request, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
var UserApi = /** @class */ (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a new SAM user.
     * @summary Create User.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {CreateUserRequest} request description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.createUser = function (operatorId, userName, request, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).createUser(operatorId, userName, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a password for the SAM user.
     * @summary Create Password.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {CreateUserPasswordRequest} request password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.createUserPassword = function (operatorId, userName, request, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).createUserPassword(operatorId, userName, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the SAM user.
     * @summary Delete User.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.deleteUser = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).deleteUser(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an AuthKey from the SAM user.
     * @summary Delete User AuthKey.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {string} authKeyId auth_key_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.deleteUserAuthKey = function (operatorId, userName, authKeyId, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).deleteUserAuthKey(operatorId, userName, authKeyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the user\'s password.
     * @summary Delete Password.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.deleteUserPassword = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).deleteUserPassword(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Enable SAM user\'s MFA
     * @summary Enable SAM user\'s MFA
     * @param {string} operatorId Operator ID
     * @param {string} userName SAM user name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.enableUserMFA = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).enableUserMFA(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Generates an AuthKey for the SAM user.
     * @summary Generate AuthKey.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.generateUserAuthKey = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).generateUserAuthKey(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the default permissions rule that is applied to all of the SAM users
     * @summary Get the default permissions
     * @param {string} operatorId Operator ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getDefaultPermissions = function (operatorId, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).getDefaultPermissions(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a SAM user.
     * @summary Get User.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUser = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).getUser(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the SAM user\'s AuthKey.
     * @summary Get AuthKey.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {string} authKeyId auth_key_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUserAuthKey = function (operatorId, userName, authKeyId, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).getUserAuthKey(operatorId, userName, authKeyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get SAM user\'s MFA status
     * @summary Get SAM user\'s MFA status
     * @param {string} operatorId Operator ID
     * @param {string} userName SAM user name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUserMFAStatus = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).getUserMFAStatus(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the SAM user\'s permissions.
     * @summary Get User Permission.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUserPermission = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).getUserPermission(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves whether the SAM user has a password or not.
     * @summary Has User Password.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.hasUserPassword = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).hasUserPassword(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the SAM user\'s AuthKey list.
     * @summary List User AuthKeys.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.listUserAuthKeys = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).listUserAuthKeys(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of SAM users.
     * @summary List Users.
     * @param {string} operatorId operator_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.listUsers = function (operatorId, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).listUsers(operatorId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke SAM user\'s MFA
     * @summary Revoke SAM user\'s MFA
     * @param {string} operatorId Operator ID
     * @param {string} userName SAM user name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.revokeUserMFA = function (operatorId, userName, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).revokeUserMFA(operatorId, userName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update the default permissions rule that is applied to all of the SAM
     * @summary Update the default permissions
     * @param {string} operatorId Operator ID
     * @param {UpdateDefaultPermissionsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateDefaultPermissions = function (operatorId, request, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).updateDefaultPermissions(operatorId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the SAM user.
     * @summary Update User.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {UpdateUserRequest} request description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUser = function (operatorId, userName, request, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).updateUser(operatorId, userName, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the password of the SAM user.
     * @summary Update Password.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {UpdatePasswordRequest} request password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUserPassword = function (operatorId, userName, request, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).updateUserPassword(operatorId, userName, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the SAM user\'s permissions.
     * @summary Update Permission to User.
     * @param {string} operatorId operator_id
     * @param {string} userName user_name
     * @param {SetUserPermissionRequest} request permission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUserPermission = function (operatorId, userName, request, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).updateUserPermission(operatorId, userName, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Verify SAM user\'s MFA OTP code when MFA activation phase
     * @summary Verify SAM user\'s MFA OTP code when MFA activation phase
     * @param {string} operatorId Operator ID
     * @param {string} userName SAM user name
     * @param {MFAAuthenticationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.verifyUserMFA = function (operatorId, userName, request, options) {
        var _this = this;
        return exports.UserApiFp(this.configuration).verifyUserMFA(operatorId, userName, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserApi;
}(base_1.BaseAPI));
exports.UserApi = UserApi;
/**
 * VirtualPrivateGatewayApi - axios parameter creator
 * @export
 */
var VirtualPrivateGatewayApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Close SORACOM Gate on the specified VPG.
         * @summary Close SORACOM Gate.
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeGate: function (vpgId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('closeGate', 'vpgId', vpgId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/gate/close"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Add node in the list of Junction mirroring peers
         * @summary Add node in the list of Junction mirroring peers
         * @param {string} vpgId VPG ID
         * @param {JunctionMirroringPeer} mirroringPeer Mirroring peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMirroringPeer: function (vpgId, mirroringPeer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('createMirroringPeer', 'vpgId', vpgId);
                            // verify required parameter 'mirroringPeer' is not null or undefined
                            common_1.assertParamExists('createMirroringPeer', 'mirroringPeer', mirroringPeer);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/junction/mirroring/peers"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(mirroringPeer, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Create a packet capture sessins associated the VPG
         * @summary Create Packet Capture Session
         * @param {string} vpgId VPG ID
         * @param {PacketCaptureSessionRequest} packetCaptureSessionRequest A packet capture session request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPacketCaptureSession: function (vpgId, packetCaptureSessionRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('createPacketCaptureSession', 'vpgId', vpgId);
                            // verify required parameter 'packetCaptureSessionRequest' is not null or undefined
                            common_1.assertParamExists('createPacketCaptureSession', 'packetCaptureSessionRequest', packetCaptureSessionRequest);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/packet_capture_sessions"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(packetCaptureSessionRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Create new VPG.
         * @summary Create Virtual Private Gateway.
         * @param {CreateVirtualPrivateGatewayRequest} createVirtualPrivateGatewayRequest Request containing information for the new VPG to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualPrivateGateway: function (createVirtualPrivateGatewayRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'createVirtualPrivateGatewayRequest' is not null or undefined
                            common_1.assertParamExists('createVirtualPrivateGateway', 'createVirtualPrivateGatewayRequest', createVirtualPrivateGatewayRequest);
                            localVarPath = "/virtual_private_gateways";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createVirtualPrivateGatewayRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Creates a VPC peering connection for the specified VPG.
         * @summary Create VPC Peering Connection
         * @param {string} vpgId Target VPG ID.
         * @param {CreateVpcPeeringConnectionRequest} vpcPeeringConnection VPC peering connection to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVpcPeeringConnection: function (vpgId, vpcPeeringConnection, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('createVpcPeeringConnection', 'vpgId', vpgId);
                            // verify required parameter 'vpcPeeringConnection' is not null or undefined
                            common_1.assertParamExists('createVpcPeeringConnection', 'vpcPeeringConnection', vpcPeeringConnection);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/vpc_peering_connections"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(vpcPeeringConnection, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Remove peer from the list of Junction mirroring peers
         * @summary Remove peer from the list of Junction mirroring peers
         * @param {string} vpgId VPG ID
         * @param {string} ipaddr IP address of mirroring peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMirroringPeer: function (vpgId, ipaddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('deleteMirroringPeer', 'vpgId', vpgId);
                            // verify required parameter 'ipaddr' is not null or undefined
                            common_1.assertParamExists('deleteMirroringPeer', 'ipaddr', ipaddr);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/junction/mirroring/peers/{ipaddr}"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)))
                                .replace("{" + "ipaddr" + "}", encodeURIComponent(String(ipaddr)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Delete a packet capture sessins associated the VPG
         * @summary Delete Packet Capture Session
         * @param {string} vpgId VPG ID
         * @param {string} sessionId Packet capture session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePacketCaptureSession: function (vpgId, sessionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('deletePacketCaptureSession', 'vpgId', vpgId);
                            // verify required parameter 'sessionId' is not null or undefined
                            common_1.assertParamExists('deletePacketCaptureSession', 'sessionId', sessionId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/packet_capture_sessions/{session_id}"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)))
                                .replace("{" + "session_id" + "}", encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an entry in VPG IP address map.
         * @summary Delete VPG IP address map entry
         * @param {string} vpgId Target VPG ID.
         * @param {string} key Target key to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualPrivateGatewayIpAddressMapEntry: function (vpgId, key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('deleteVirtualPrivateGatewayIpAddressMapEntry', 'vpgId', vpgId);
                            // verify required parameter 'key' is not null or undefined
                            common_1.assertParamExists('deleteVirtualPrivateGatewayIpAddressMapEntry', 'key', key);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/ip_address_map/{key}"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)))
                                .replace("{" + "key" + "}", encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the specified VPC peering connection.
         * @summary Delete VPC Peering Connection.
         * @param {string} vpgId Target VPG ID.
         * @param {string} pcxId VPC peering connection ID to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVpcPeeringConnection: function (vpgId, pcxId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('deleteVpcPeeringConnection', 'vpgId', vpgId);
                            // verify required parameter 'pcxId' is not null or undefined
                            common_1.assertParamExists('deleteVpcPeeringConnection', 'pcxId', pcxId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/vpc_peering_connections/{pcx_id}"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)))
                                .replace("{" + "pcx_id" + "}", encodeURIComponent(String(pcxId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Get a packet capture sessins associated the VPG
         * @summary Get Packet Capture Session
         * @param {string} vpgId VPG ID
         * @param {string} sessionId Packet capture session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPacketCaptureSession: function (vpgId, sessionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('getPacketCaptureSession', 'vpgId', vpgId);
                            // verify required parameter 'sessionId' is not null or undefined
                            common_1.assertParamExists('getPacketCaptureSession', 'sessionId', sessionId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/packet_capture_sessions/{session_id}"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)))
                                .replace("{" + "session_id" + "}", encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves information about the specified VPG.
         * @summary Get Virtual Private Gateway.
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualPrivateGateway: function (vpgId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('getVirtualPrivateGateway', 'vpgId', vpgId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * List Gate peers registered in the Virtual Private Gateway
         * @summary List VPG Gate peers
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGatePeers: function (vpgId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('listGatePeers', 'vpgId', vpgId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/gate/peers"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * List packet capture sessins associated with the VPG
         * @summary List Packet Capture Sessions
         * @param {string} vpgId VPG ID
         * @param {string} [lastEvaluatedKey] ID of the last group in the previous page
         * @param {number} [limit] Max number of results in a response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPacketCaptureSessions: function (vpgId, lastEvaluatedKey, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('listPacketCaptureSessions', 'vpgId', vpgId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/packet_capture_sessions"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Describes the list of IP addresse map entries in the Virtual Private Gateway
         * @summary List VPG IP address map entries
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualPrivateGatewayIpAddressMapEntries: function (vpgId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('listVirtualPrivateGatewayIpAddressMapEntries', 'vpgId', vpgId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/ip_address_map"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of VPGs.
         * @summary List Virtual Private Gateways.
         * @param {string} [tagName] Tag name of the VPG. Filters through all VPGs that exactly match the tag name. When tag_name is specified, tag_value is required.
         * @param {string} [tagValue] Tag value of the VPGs.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The last group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next VPG onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualPrivateGateways: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/virtual_private_gateways";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            if (tagName !== undefined) {
                                localVarQueryParameter['tag_name'] = tagName;
                            }
                            if (tagValue !== undefined) {
                                localVarQueryParameter['tag_value'] = tagValue;
                            }
                            if (tagValueMatchMode !== undefined) {
                                localVarQueryParameter['tag_value_match_mode'] = tagValueMatchMode;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (lastEvaluatedKey !== undefined) {
                                localVarQueryParameter['last_evaluated_key'] = lastEvaluatedKey;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Open SORACOM Gate on the specified VPG.
         * @summary Open SORACOM Gate.
         * @param {string} vpgId Target VPG ID.
         * @param {OpenGateRequest} [configurationParameters] Optional configuration parameters for Gate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openGate: function (vpgId, configurationParameters, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('openGate', 'vpgId', vpgId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/gate/open"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(configurationParameters, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Puts an entry in VPG IP address map.
         * @summary Put an entry in VPG IP address map
         * @param {string} vpgId Target VPG ID.
         * @param {PutIpAddressMapEntryRequest} putIpAddressMapEntryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putVirtualPrivateGatewayIpAddressMapEntry: function (vpgId, putIpAddressMapEntryRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('putVirtualPrivateGatewayIpAddressMapEntry', 'vpgId', vpgId);
                            // verify required parameter 'putIpAddressMapEntryRequest' is not null or undefined
                            common_1.assertParamExists('putVirtualPrivateGatewayIpAddressMapEntry', 'putIpAddressMapEntryRequest', putIpAddressMapEntryRequest);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/ip_address_map"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(putIpAddressMapEntryRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Register a host as a gate peer in the Virtual Private Gateway
         * @summary Register VPG Gate peer
         * @param {string} vpgId Target VPG ID.
         * @param {RegisterGatePeerRequest} gatePeer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerGatePeer: function (vpgId, gatePeer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('registerGatePeer', 'vpgId', vpgId);
                            // verify required parameter 'gatePeer' is not null or undefined
                            common_1.assertParamExists('registerGatePeer', 'gatePeer', gatePeer);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/gate/peers"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(gatePeer, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Set configuration for Junction inspection feature
         * @summary Set configuration for Junction inspection feature
         * @param {string} vpgId VPG ID
         * @param {JunctionInspectionConfiguration} inspectionConfiguration Inspection configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInspectionConfiguration: function (vpgId, inspectionConfiguration, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('setInspectionConfiguration', 'vpgId', vpgId);
                            // verify required parameter 'inspectionConfiguration' is not null or undefined
                            common_1.assertParamExists('setInspectionConfiguration', 'inspectionConfiguration', inspectionConfiguration);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/junction/set_inspection"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(inspectionConfiguration, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Set configuration for Junction redirection feature
         * @summary Set configuration for Junction redirection feature
         * @param {string} vpgId VPG ID
         * @param {JunctionRedirectionConfiguration} redirectionConfiguration Redirection configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRedirectionConfiguration: function (vpgId, redirectionConfiguration, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('setRedirectionConfiguration', 'vpgId', vpgId);
                            // verify required parameter 'redirectionConfiguration' is not null or undefined
                            common_1.assertParamExists('setRedirectionConfiguration', 'redirectionConfiguration', redirectionConfiguration);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/junction/set_redirection"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(redirectionConfiguration, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Sets Virtual Private Gateway outbound routing filter.
         * @summary Sets Virtual Private Gateway outbound routing filter.
         * @param {string} vpgId Target VPG ID.
         * @param {Array<RoutingFilterEntry>} routingFilterEntries List of routing filter entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoutingFilter: function (vpgId, routingFilterEntries, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('setRoutingFilter', 'vpgId', vpgId);
                            // verify required parameter 'routingFilterEntries' is not null or undefined
                            common_1.assertParamExists('setRoutingFilter', 'routingFilterEntries', routingFilterEntries);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/set_routing_filter"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(routingFilterEntries, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Terminates the specified VPG.
         * @summary Terminate Virtual Private Gateway.
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateVirtualPrivateGateway: function (vpgId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('terminateVirtualPrivateGateway', 'vpgId', vpgId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/terminate"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Unregister a gate peer from the Virtual Private Gateway
         * @summary Unregister VPG gate peer
         * @param {string} vpgId Target VPG ID.
         * @param {string} outerIpAddress ID of the target node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterGatePeer: function (vpgId, outerIpAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('unregisterGatePeer', 'vpgId', vpgId);
                            // verify required parameter 'outerIpAddress' is not null or undefined
                            common_1.assertParamExists('unregisterGatePeer', 'outerIpAddress', outerIpAddress);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/gate/peers/{outer_ip_address}"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)))
                                .replace("{" + "outer_ip_address" + "}", encodeURIComponent(String(outerIpAddress)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Unset configuration for Junction inspection feature
         * @summary Unset configuration for Junction inspection feature
         * @param {string} vpgId VPG ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetInspectionConfiguration: function (vpgId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('unsetInspectionConfiguration', 'vpgId', vpgId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/junction/unset_inspection"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Unset configuration for Junction redirection feature
         * @summary Unset configuration for Junction redirection feature
         * @param {string} vpgId VPG ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetRedirectionConfiguration: function (vpgId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('unsetRedirectionConfiguration', 'vpgId', vpgId);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/junction/unset_redirection"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Update a Junction mirroring peer
         * @summary Update a Junction mirroring peer
         * @param {string} vpgId VPG ID
         * @param {string} ipaddr Mirroring peer IP address
         * @param {Array<AttributeUpdate>} updates List of attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMirroringPeer: function (vpgId, ipaddr, updates, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vpgId' is not null or undefined
                            common_1.assertParamExists('updateMirroringPeer', 'vpgId', vpgId);
                            // verify required parameter 'ipaddr' is not null or undefined
                            common_1.assertParamExists('updateMirroringPeer', 'ipaddr', ipaddr);
                            // verify required parameter 'updates' is not null or undefined
                            common_1.assertParamExists('updateMirroringPeer', 'updates', updates);
                            localVarPath = "/virtual_private_gateways/{vpg_id}/junction/mirroring/peers/{ipaddr}"
                                .replace("{" + "vpg_id" + "}", encodeURIComponent(String(vpgId)))
                                .replace("{" + "ipaddr" + "}", encodeURIComponent(String(ipaddr)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication api_key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-API-Key", configuration)
                                // authentication api_token required
                            ];
                        case 1:
                            // authentication api_key required
                            _a.sent();
                            // authentication api_token required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-Soracom-Token", configuration)];
                        case 2:
                            // authentication api_token required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updates, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.VirtualPrivateGatewayApiAxiosParamCreator = VirtualPrivateGatewayApiAxiosParamCreator;
/**
 * VirtualPrivateGatewayApi - functional programming interface
 * @export
 */
var VirtualPrivateGatewayApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.VirtualPrivateGatewayApiAxiosParamCreator(configuration);
    return {
        /**
         * Close SORACOM Gate on the specified VPG.
         * @summary Close SORACOM Gate.
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeGate: function (vpgId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.closeGate(vpgId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Add node in the list of Junction mirroring peers
         * @summary Add node in the list of Junction mirroring peers
         * @param {string} vpgId VPG ID
         * @param {JunctionMirroringPeer} mirroringPeer Mirroring peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMirroringPeer: function (vpgId, mirroringPeer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createMirroringPeer(vpgId, mirroringPeer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create a packet capture sessins associated the VPG
         * @summary Create Packet Capture Session
         * @param {string} vpgId VPG ID
         * @param {PacketCaptureSessionRequest} packetCaptureSessionRequest A packet capture session request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPacketCaptureSession: function (vpgId, packetCaptureSessionRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPacketCaptureSession(vpgId, packetCaptureSessionRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create new VPG.
         * @summary Create Virtual Private Gateway.
         * @param {CreateVirtualPrivateGatewayRequest} createVirtualPrivateGatewayRequest Request containing information for the new VPG to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualPrivateGateway: function (createVirtualPrivateGatewayRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createVirtualPrivateGateway(createVirtualPrivateGatewayRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Creates a VPC peering connection for the specified VPG.
         * @summary Create VPC Peering Connection
         * @param {string} vpgId Target VPG ID.
         * @param {CreateVpcPeeringConnectionRequest} vpcPeeringConnection VPC peering connection to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVpcPeeringConnection: function (vpgId, vpcPeeringConnection, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createVpcPeeringConnection(vpgId, vpcPeeringConnection, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove peer from the list of Junction mirroring peers
         * @summary Remove peer from the list of Junction mirroring peers
         * @param {string} vpgId VPG ID
         * @param {string} ipaddr IP address of mirroring peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMirroringPeer: function (vpgId, ipaddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteMirroringPeer(vpgId, ipaddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete a packet capture sessins associated the VPG
         * @summary Delete Packet Capture Session
         * @param {string} vpgId VPG ID
         * @param {string} sessionId Packet capture session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePacketCaptureSession: function (vpgId, sessionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePacketCaptureSession(vpgId, sessionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes an entry in VPG IP address map.
         * @summary Delete VPG IP address map entry
         * @param {string} vpgId Target VPG ID.
         * @param {string} key Target key to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualPrivateGatewayIpAddressMapEntry: function (vpgId, key, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteVirtualPrivateGatewayIpAddressMapEntry(vpgId, key, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the specified VPC peering connection.
         * @summary Delete VPC Peering Connection.
         * @param {string} vpgId Target VPG ID.
         * @param {string} pcxId VPC peering connection ID to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVpcPeeringConnection: function (vpgId, pcxId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteVpcPeeringConnection(vpgId, pcxId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a packet capture sessins associated the VPG
         * @summary Get Packet Capture Session
         * @param {string} vpgId VPG ID
         * @param {string} sessionId Packet capture session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPacketCaptureSession: function (vpgId, sessionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPacketCaptureSession(vpgId, sessionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves information about the specified VPG.
         * @summary Get Virtual Private Gateway.
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualPrivateGateway: function (vpgId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVirtualPrivateGateway(vpgId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List Gate peers registered in the Virtual Private Gateway
         * @summary List VPG Gate peers
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGatePeers: function (vpgId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listGatePeers(vpgId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List packet capture sessins associated with the VPG
         * @summary List Packet Capture Sessions
         * @param {string} vpgId VPG ID
         * @param {string} [lastEvaluatedKey] ID of the last group in the previous page
         * @param {number} [limit] Max number of results in a response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPacketCaptureSessions: function (vpgId, lastEvaluatedKey, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPacketCaptureSessions(vpgId, lastEvaluatedKey, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Describes the list of IP addresse map entries in the Virtual Private Gateway
         * @summary List VPG IP address map entries
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualPrivateGatewayIpAddressMapEntries: function (vpgId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listVirtualPrivateGatewayIpAddressMapEntries(vpgId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of VPGs.
         * @summary List Virtual Private Gateways.
         * @param {string} [tagName] Tag name of the VPG. Filters through all VPGs that exactly match the tag name. When tag_name is specified, tag_value is required.
         * @param {string} [tagValue] Tag value of the VPGs.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The last group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next VPG onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualPrivateGateways: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listVirtualPrivateGateways(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Open SORACOM Gate on the specified VPG.
         * @summary Open SORACOM Gate.
         * @param {string} vpgId Target VPG ID.
         * @param {OpenGateRequest} [configurationParameters] Optional configuration parameters for Gate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openGate: function (vpgId, configurationParameters, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.openGate(vpgId, configurationParameters, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Puts an entry in VPG IP address map.
         * @summary Put an entry in VPG IP address map
         * @param {string} vpgId Target VPG ID.
         * @param {PutIpAddressMapEntryRequest} putIpAddressMapEntryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putVirtualPrivateGatewayIpAddressMapEntry: function (vpgId, putIpAddressMapEntryRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putVirtualPrivateGatewayIpAddressMapEntry(vpgId, putIpAddressMapEntryRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Register a host as a gate peer in the Virtual Private Gateway
         * @summary Register VPG Gate peer
         * @param {string} vpgId Target VPG ID.
         * @param {RegisterGatePeerRequest} gatePeer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerGatePeer: function (vpgId, gatePeer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerGatePeer(vpgId, gatePeer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set configuration for Junction inspection feature
         * @summary Set configuration for Junction inspection feature
         * @param {string} vpgId VPG ID
         * @param {JunctionInspectionConfiguration} inspectionConfiguration Inspection configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInspectionConfiguration: function (vpgId, inspectionConfiguration, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setInspectionConfiguration(vpgId, inspectionConfiguration, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set configuration for Junction redirection feature
         * @summary Set configuration for Junction redirection feature
         * @param {string} vpgId VPG ID
         * @param {JunctionRedirectionConfiguration} redirectionConfiguration Redirection configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRedirectionConfiguration: function (vpgId, redirectionConfiguration, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setRedirectionConfiguration(vpgId, redirectionConfiguration, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets Virtual Private Gateway outbound routing filter.
         * @summary Sets Virtual Private Gateway outbound routing filter.
         * @param {string} vpgId Target VPG ID.
         * @param {Array<RoutingFilterEntry>} routingFilterEntries List of routing filter entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoutingFilter: function (vpgId, routingFilterEntries, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setRoutingFilter(vpgId, routingFilterEntries, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Terminates the specified VPG.
         * @summary Terminate Virtual Private Gateway.
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateVirtualPrivateGateway: function (vpgId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.terminateVirtualPrivateGateway(vpgId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Unregister a gate peer from the Virtual Private Gateway
         * @summary Unregister VPG gate peer
         * @param {string} vpgId Target VPG ID.
         * @param {string} outerIpAddress ID of the target node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterGatePeer: function (vpgId, outerIpAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unregisterGatePeer(vpgId, outerIpAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Unset configuration for Junction inspection feature
         * @summary Unset configuration for Junction inspection feature
         * @param {string} vpgId VPG ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetInspectionConfiguration: function (vpgId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetInspectionConfiguration(vpgId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Unset configuration for Junction redirection feature
         * @summary Unset configuration for Junction redirection feature
         * @param {string} vpgId VPG ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetRedirectionConfiguration: function (vpgId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unsetRedirectionConfiguration(vpgId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update a Junction mirroring peer
         * @summary Update a Junction mirroring peer
         * @param {string} vpgId VPG ID
         * @param {string} ipaddr Mirroring peer IP address
         * @param {Array<AttributeUpdate>} updates List of attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMirroringPeer: function (vpgId, ipaddr, updates, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateMirroringPeer(vpgId, ipaddr, updates, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.VirtualPrivateGatewayApiFp = VirtualPrivateGatewayApiFp;
/**
 * VirtualPrivateGatewayApi - factory interface
 * @export
 */
var VirtualPrivateGatewayApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.VirtualPrivateGatewayApiFp(configuration);
    return {
        /**
         * Close SORACOM Gate on the specified VPG.
         * @summary Close SORACOM Gate.
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeGate: function (vpgId, options) {
            return localVarFp.closeGate(vpgId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Add node in the list of Junction mirroring peers
         * @summary Add node in the list of Junction mirroring peers
         * @param {string} vpgId VPG ID
         * @param {JunctionMirroringPeer} mirroringPeer Mirroring peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMirroringPeer: function (vpgId, mirroringPeer, options) {
            return localVarFp.createMirroringPeer(vpgId, mirroringPeer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a packet capture sessins associated the VPG
         * @summary Create Packet Capture Session
         * @param {string} vpgId VPG ID
         * @param {PacketCaptureSessionRequest} packetCaptureSessionRequest A packet capture session request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPacketCaptureSession: function (vpgId, packetCaptureSessionRequest, options) {
            return localVarFp.createPacketCaptureSession(vpgId, packetCaptureSessionRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create new VPG.
         * @summary Create Virtual Private Gateway.
         * @param {CreateVirtualPrivateGatewayRequest} createVirtualPrivateGatewayRequest Request containing information for the new VPG to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualPrivateGateway: function (createVirtualPrivateGatewayRequest, options) {
            return localVarFp.createVirtualPrivateGateway(createVirtualPrivateGatewayRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a VPC peering connection for the specified VPG.
         * @summary Create VPC Peering Connection
         * @param {string} vpgId Target VPG ID.
         * @param {CreateVpcPeeringConnectionRequest} vpcPeeringConnection VPC peering connection to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVpcPeeringConnection: function (vpgId, vpcPeeringConnection, options) {
            return localVarFp.createVpcPeeringConnection(vpgId, vpcPeeringConnection, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove peer from the list of Junction mirroring peers
         * @summary Remove peer from the list of Junction mirroring peers
         * @param {string} vpgId VPG ID
         * @param {string} ipaddr IP address of mirroring peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMirroringPeer: function (vpgId, ipaddr, options) {
            return localVarFp.deleteMirroringPeer(vpgId, ipaddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a packet capture sessins associated the VPG
         * @summary Delete Packet Capture Session
         * @param {string} vpgId VPG ID
         * @param {string} sessionId Packet capture session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePacketCaptureSession: function (vpgId, sessionId, options) {
            return localVarFp.deletePacketCaptureSession(vpgId, sessionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an entry in VPG IP address map.
         * @summary Delete VPG IP address map entry
         * @param {string} vpgId Target VPG ID.
         * @param {string} key Target key to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualPrivateGatewayIpAddressMapEntry: function (vpgId, key, options) {
            return localVarFp.deleteVirtualPrivateGatewayIpAddressMapEntry(vpgId, key, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the specified VPC peering connection.
         * @summary Delete VPC Peering Connection.
         * @param {string} vpgId Target VPG ID.
         * @param {string} pcxId VPC peering connection ID to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVpcPeeringConnection: function (vpgId, pcxId, options) {
            return localVarFp.deleteVpcPeeringConnection(vpgId, pcxId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a packet capture sessins associated the VPG
         * @summary Get Packet Capture Session
         * @param {string} vpgId VPG ID
         * @param {string} sessionId Packet capture session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPacketCaptureSession: function (vpgId, sessionId, options) {
            return localVarFp.getPacketCaptureSession(vpgId, sessionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves information about the specified VPG.
         * @summary Get Virtual Private Gateway.
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualPrivateGateway: function (vpgId, options) {
            return localVarFp.getVirtualPrivateGateway(vpgId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List Gate peers registered in the Virtual Private Gateway
         * @summary List VPG Gate peers
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGatePeers: function (vpgId, options) {
            return localVarFp.listGatePeers(vpgId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List packet capture sessins associated with the VPG
         * @summary List Packet Capture Sessions
         * @param {string} vpgId VPG ID
         * @param {string} [lastEvaluatedKey] ID of the last group in the previous page
         * @param {number} [limit] Max number of results in a response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPacketCaptureSessions: function (vpgId, lastEvaluatedKey, limit, options) {
            return localVarFp.listPacketCaptureSessions(vpgId, lastEvaluatedKey, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Describes the list of IP addresse map entries in the Virtual Private Gateway
         * @summary List VPG IP address map entries
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualPrivateGatewayIpAddressMapEntries: function (vpgId, options) {
            return localVarFp.listVirtualPrivateGatewayIpAddressMapEntries(vpgId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of VPGs.
         * @summary List Virtual Private Gateways.
         * @param {string} [tagName] Tag name of the VPG. Filters through all VPGs that exactly match the tag name. When tag_name is specified, tag_value is required.
         * @param {string} [tagValue] Tag value of the VPGs.
         * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
         * @param {number} [limit] Maximum number of results per response page.
         * @param {string} [lastEvaluatedKey] The last group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next VPG onward.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualPrivateGateways: function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
            return localVarFp.listVirtualPrivateGateways(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Open SORACOM Gate on the specified VPG.
         * @summary Open SORACOM Gate.
         * @param {string} vpgId Target VPG ID.
         * @param {OpenGateRequest} [configurationParameters] Optional configuration parameters for Gate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openGate: function (vpgId, configurationParameters, options) {
            return localVarFp.openGate(vpgId, configurationParameters, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Puts an entry in VPG IP address map.
         * @summary Put an entry in VPG IP address map
         * @param {string} vpgId Target VPG ID.
         * @param {PutIpAddressMapEntryRequest} putIpAddressMapEntryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putVirtualPrivateGatewayIpAddressMapEntry: function (vpgId, putIpAddressMapEntryRequest, options) {
            return localVarFp.putVirtualPrivateGatewayIpAddressMapEntry(vpgId, putIpAddressMapEntryRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Register a host as a gate peer in the Virtual Private Gateway
         * @summary Register VPG Gate peer
         * @param {string} vpgId Target VPG ID.
         * @param {RegisterGatePeerRequest} gatePeer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerGatePeer: function (vpgId, gatePeer, options) {
            return localVarFp.registerGatePeer(vpgId, gatePeer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set configuration for Junction inspection feature
         * @summary Set configuration for Junction inspection feature
         * @param {string} vpgId VPG ID
         * @param {JunctionInspectionConfiguration} inspectionConfiguration Inspection configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInspectionConfiguration: function (vpgId, inspectionConfiguration, options) {
            return localVarFp.setInspectionConfiguration(vpgId, inspectionConfiguration, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set configuration for Junction redirection feature
         * @summary Set configuration for Junction redirection feature
         * @param {string} vpgId VPG ID
         * @param {JunctionRedirectionConfiguration} redirectionConfiguration Redirection configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRedirectionConfiguration: function (vpgId, redirectionConfiguration, options) {
            return localVarFp.setRedirectionConfiguration(vpgId, redirectionConfiguration, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets Virtual Private Gateway outbound routing filter.
         * @summary Sets Virtual Private Gateway outbound routing filter.
         * @param {string} vpgId Target VPG ID.
         * @param {Array<RoutingFilterEntry>} routingFilterEntries List of routing filter entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoutingFilter: function (vpgId, routingFilterEntries, options) {
            return localVarFp.setRoutingFilter(vpgId, routingFilterEntries, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Terminates the specified VPG.
         * @summary Terminate Virtual Private Gateway.
         * @param {string} vpgId Target VPG ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateVirtualPrivateGateway: function (vpgId, options) {
            return localVarFp.terminateVirtualPrivateGateway(vpgId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Unregister a gate peer from the Virtual Private Gateway
         * @summary Unregister VPG gate peer
         * @param {string} vpgId Target VPG ID.
         * @param {string} outerIpAddress ID of the target node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterGatePeer: function (vpgId, outerIpAddress, options) {
            return localVarFp.unregisterGatePeer(vpgId, outerIpAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Unset configuration for Junction inspection feature
         * @summary Unset configuration for Junction inspection feature
         * @param {string} vpgId VPG ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetInspectionConfiguration: function (vpgId, options) {
            return localVarFp.unsetInspectionConfiguration(vpgId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Unset configuration for Junction redirection feature
         * @summary Unset configuration for Junction redirection feature
         * @param {string} vpgId VPG ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsetRedirectionConfiguration: function (vpgId, options) {
            return localVarFp.unsetRedirectionConfiguration(vpgId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a Junction mirroring peer
         * @summary Update a Junction mirroring peer
         * @param {string} vpgId VPG ID
         * @param {string} ipaddr Mirroring peer IP address
         * @param {Array<AttributeUpdate>} updates List of attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMirroringPeer: function (vpgId, ipaddr, updates, options) {
            return localVarFp.updateMirroringPeer(vpgId, ipaddr, updates, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.VirtualPrivateGatewayApiFactory = VirtualPrivateGatewayApiFactory;
/**
 * VirtualPrivateGatewayApi - object-oriented interface
 * @export
 * @class VirtualPrivateGatewayApi
 * @extends {BaseAPI}
 */
var VirtualPrivateGatewayApi = /** @class */ (function (_super) {
    __extends(VirtualPrivateGatewayApi, _super);
    function VirtualPrivateGatewayApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Close SORACOM Gate on the specified VPG.
     * @summary Close SORACOM Gate.
     * @param {string} vpgId Target VPG ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.closeGate = function (vpgId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).closeGate(vpgId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Add node in the list of Junction mirroring peers
     * @summary Add node in the list of Junction mirroring peers
     * @param {string} vpgId VPG ID
     * @param {JunctionMirroringPeer} mirroringPeer Mirroring peer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.createMirroringPeer = function (vpgId, mirroringPeer, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).createMirroringPeer(vpgId, mirroringPeer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a packet capture sessins associated the VPG
     * @summary Create Packet Capture Session
     * @param {string} vpgId VPG ID
     * @param {PacketCaptureSessionRequest} packetCaptureSessionRequest A packet capture session request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.createPacketCaptureSession = function (vpgId, packetCaptureSessionRequest, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).createPacketCaptureSession(vpgId, packetCaptureSessionRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create new VPG.
     * @summary Create Virtual Private Gateway.
     * @param {CreateVirtualPrivateGatewayRequest} createVirtualPrivateGatewayRequest Request containing information for the new VPG to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.createVirtualPrivateGateway = function (createVirtualPrivateGatewayRequest, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).createVirtualPrivateGateway(createVirtualPrivateGatewayRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a VPC peering connection for the specified VPG.
     * @summary Create VPC Peering Connection
     * @param {string} vpgId Target VPG ID.
     * @param {CreateVpcPeeringConnectionRequest} vpcPeeringConnection VPC peering connection to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.createVpcPeeringConnection = function (vpgId, vpcPeeringConnection, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).createVpcPeeringConnection(vpgId, vpcPeeringConnection, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove peer from the list of Junction mirroring peers
     * @summary Remove peer from the list of Junction mirroring peers
     * @param {string} vpgId VPG ID
     * @param {string} ipaddr IP address of mirroring peer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.deleteMirroringPeer = function (vpgId, ipaddr, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).deleteMirroringPeer(vpgId, ipaddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a packet capture sessins associated the VPG
     * @summary Delete Packet Capture Session
     * @param {string} vpgId VPG ID
     * @param {string} sessionId Packet capture session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.deletePacketCaptureSession = function (vpgId, sessionId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).deletePacketCaptureSession(vpgId, sessionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an entry in VPG IP address map.
     * @summary Delete VPG IP address map entry
     * @param {string} vpgId Target VPG ID.
     * @param {string} key Target key to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.deleteVirtualPrivateGatewayIpAddressMapEntry = function (vpgId, key, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).deleteVirtualPrivateGatewayIpAddressMapEntry(vpgId, key, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the specified VPC peering connection.
     * @summary Delete VPC Peering Connection.
     * @param {string} vpgId Target VPG ID.
     * @param {string} pcxId VPC peering connection ID to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.deleteVpcPeeringConnection = function (vpgId, pcxId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).deleteVpcPeeringConnection(vpgId, pcxId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a packet capture sessins associated the VPG
     * @summary Get Packet Capture Session
     * @param {string} vpgId VPG ID
     * @param {string} sessionId Packet capture session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.getPacketCaptureSession = function (vpgId, sessionId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).getPacketCaptureSession(vpgId, sessionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves information about the specified VPG.
     * @summary Get Virtual Private Gateway.
     * @param {string} vpgId Target VPG ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.getVirtualPrivateGateway = function (vpgId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).getVirtualPrivateGateway(vpgId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List Gate peers registered in the Virtual Private Gateway
     * @summary List VPG Gate peers
     * @param {string} vpgId Target VPG ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.listGatePeers = function (vpgId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).listGatePeers(vpgId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List packet capture sessins associated with the VPG
     * @summary List Packet Capture Sessions
     * @param {string} vpgId VPG ID
     * @param {string} [lastEvaluatedKey] ID of the last group in the previous page
     * @param {number} [limit] Max number of results in a response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.listPacketCaptureSessions = function (vpgId, lastEvaluatedKey, limit, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).listPacketCaptureSessions(vpgId, lastEvaluatedKey, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Describes the list of IP addresse map entries in the Virtual Private Gateway
     * @summary List VPG IP address map entries
     * @param {string} vpgId Target VPG ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.listVirtualPrivateGatewayIpAddressMapEntries = function (vpgId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).listVirtualPrivateGatewayIpAddressMapEntries(vpgId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of VPGs.
     * @summary List Virtual Private Gateways.
     * @param {string} [tagName] Tag name of the VPG. Filters through all VPGs that exactly match the tag name. When tag_name is specified, tag_value is required.
     * @param {string} [tagValue] Tag value of the VPGs.
     * @param {'exact' | 'prefix'} [tagValueMatchMode] Tag match mode.
     * @param {number} [limit] Maximum number of results per response page.
     * @param {string} [lastEvaluatedKey] The last group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next VPG onward.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.listVirtualPrivateGateways = function (tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).listVirtualPrivateGateways(tagName, tagValue, tagValueMatchMode, limit, lastEvaluatedKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Open SORACOM Gate on the specified VPG.
     * @summary Open SORACOM Gate.
     * @param {string} vpgId Target VPG ID.
     * @param {OpenGateRequest} [configurationParameters] Optional configuration parameters for Gate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.openGate = function (vpgId, configurationParameters, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).openGate(vpgId, configurationParameters, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Puts an entry in VPG IP address map.
     * @summary Put an entry in VPG IP address map
     * @param {string} vpgId Target VPG ID.
     * @param {PutIpAddressMapEntryRequest} putIpAddressMapEntryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.putVirtualPrivateGatewayIpAddressMapEntry = function (vpgId, putIpAddressMapEntryRequest, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).putVirtualPrivateGatewayIpAddressMapEntry(vpgId, putIpAddressMapEntryRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Register a host as a gate peer in the Virtual Private Gateway
     * @summary Register VPG Gate peer
     * @param {string} vpgId Target VPG ID.
     * @param {RegisterGatePeerRequest} gatePeer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.registerGatePeer = function (vpgId, gatePeer, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).registerGatePeer(vpgId, gatePeer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set configuration for Junction inspection feature
     * @summary Set configuration for Junction inspection feature
     * @param {string} vpgId VPG ID
     * @param {JunctionInspectionConfiguration} inspectionConfiguration Inspection configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.setInspectionConfiguration = function (vpgId, inspectionConfiguration, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).setInspectionConfiguration(vpgId, inspectionConfiguration, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set configuration for Junction redirection feature
     * @summary Set configuration for Junction redirection feature
     * @param {string} vpgId VPG ID
     * @param {JunctionRedirectionConfiguration} redirectionConfiguration Redirection configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.setRedirectionConfiguration = function (vpgId, redirectionConfiguration, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).setRedirectionConfiguration(vpgId, redirectionConfiguration, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets Virtual Private Gateway outbound routing filter.
     * @summary Sets Virtual Private Gateway outbound routing filter.
     * @param {string} vpgId Target VPG ID.
     * @param {Array<RoutingFilterEntry>} routingFilterEntries List of routing filter entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.setRoutingFilter = function (vpgId, routingFilterEntries, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).setRoutingFilter(vpgId, routingFilterEntries, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Terminates the specified VPG.
     * @summary Terminate Virtual Private Gateway.
     * @param {string} vpgId Target VPG ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.terminateVirtualPrivateGateway = function (vpgId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).terminateVirtualPrivateGateway(vpgId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Unregister a gate peer from the Virtual Private Gateway
     * @summary Unregister VPG gate peer
     * @param {string} vpgId Target VPG ID.
     * @param {string} outerIpAddress ID of the target node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.unregisterGatePeer = function (vpgId, outerIpAddress, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).unregisterGatePeer(vpgId, outerIpAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Unset configuration for Junction inspection feature
     * @summary Unset configuration for Junction inspection feature
     * @param {string} vpgId VPG ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.unsetInspectionConfiguration = function (vpgId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).unsetInspectionConfiguration(vpgId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Unset configuration for Junction redirection feature
     * @summary Unset configuration for Junction redirection feature
     * @param {string} vpgId VPG ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.unsetRedirectionConfiguration = function (vpgId, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).unsetRedirectionConfiguration(vpgId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a Junction mirroring peer
     * @summary Update a Junction mirroring peer
     * @param {string} vpgId VPG ID
     * @param {string} ipaddr Mirroring peer IP address
     * @param {Array<AttributeUpdate>} updates List of attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPrivateGatewayApi
     */
    VirtualPrivateGatewayApi.prototype.updateMirroringPeer = function (vpgId, ipaddr, updates, options) {
        var _this = this;
        return exports.VirtualPrivateGatewayApiFp(this.configuration).updateMirroringPeer(vpgId, ipaddr, updates, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VirtualPrivateGatewayApi;
}(base_1.BaseAPI));
exports.VirtualPrivateGatewayApi = VirtualPrivateGatewayApi;
